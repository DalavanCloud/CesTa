group ShadowVariablesParser : Base;

/**
 *	Basic templates
 */
resistantGetValue(variable, ident) ::= "__get_<variable.group.ident>(<ident>,(short)<variable.id>)"
resistantSetValue(variable, value) ::= "__set_<variable.group.ident>((<variable.type>)(<value>),(short)<variable.id>)"
resistantInitValue(variable, value) ::= "=<resistantSetValue(variable=variable, value=value)>"

/**
 * Parameter shouldReturnValue is computed during parsing and detects whether we should return 
 * 		(short)(i=something) or simply i=something
 *	first one has to be used in method arguments or inside statements like "i += j+=2;"
 */
assignSetValue(variable, ident, value, shouldReturnValue) ::= 
"<if(shouldReturnValue)>(<variable.type>)(<endif><ident>=<resistantSetValue(variable=variable,value=value)><if(shouldReturnValue)>)<endif>"
preIncSetValue(variable, ident, value, shouldReturnValue) ::= "<if(shouldReturnValue)>(<variable.type>)(<endif><assignSetValue(variable=variable,ident=ident,value=value)><if(shouldReturnValue)>)<endif>"
preDecSetValue(variable, ident, value, shouldReturnValue) ::= "<if(shouldReturnValue)>(<variable.type>)(<endif><assignSetValue(variable=variable,ident=ident,value=value)><if(shouldReturnValue)>)<endif>"
postIncSetValue(variable, ident, value, shouldReturnValue) ::= "<if(shouldReturnValue)>(<variable.type>)((<endif><assignSetValue(variable=variable,ident=ident,value=value)><if(shouldReturnValue)>)-1)<endif>"
postDecSetValue(variable, ident, value, shouldReturnValue) ::= "<if(shouldReturnValue)>(<variable.type>)((<endif><assignSetValue(variable=variable,ident=ident,value=value)><if(shouldReturnValue)>)+1)<endif>"

/**
 *	Simple templates for computing negation of specific types
 */
computeNegation_boolean(value) ::= "!<value>"
computeNegation_short(value) ::= "<value> ^ (short)((1\<\<15)-1)"
computeNegation_byte(value) ::= "<value> ^ (byte)((1\<\<7)-1)"

declareResistantSetter(varGroup) ::= <<
	/**
	 *	This method will set value in help array to negation of original value.
	 *@param value value to set
	 *@param id id of variable in array of shadow copies
	 *@return value value, which was set
	 */
	private <if(varGroup.isStatic)>static <endif><varGroup.type> __set_<varGroup.ident>(<varGroup.type> value, short id){
		fault_resistant_<varGroup.ident>[id] = (<varGroup.type>)(<(varGroup.NegationTmpl)("value")>);
		return value;
	}
>>
declareResistantGetter(varGroup) ::= << 
	/**
	 *	This method will compare negation of input value with stored negation. 
	 * 	In case of error an exception will be thrown. 
	 *@param value value, which is expected
	 *@param id id of variable in array of shadow copies
	 *@throw Exception if value is corrupted
	 */
	private <if(varGroup.isStatic)>static <endif><varGroup.type> __get_<varGroup.ident>(<varGroup.type> value, short id){
		if (fault_resistant_<varGroup.ident>[id] != (<varGroup.type>)(<(varGroup.NegationTmpl)("value")>)) 
			<if(params.javaCard)>
			ISOException.throwIt(ISO7816.SW_DATA_INVALID);
			<else>
			throw new RuntimeException("Error induction");
			<endif>
		return value;
	}
>>

/**
 *	Additional imports, that will be included in transformed file
 */
additionalImports() ::= <<
<if(params.javaCard)>
import javacard.framework.ISO7816;
import javacard.framework.ISOException;<\n>
<else>
<endif>
>>

/**
 *	This template declares array for shadow variables.
 */
declareResistantArray(varGroup) ::= << 
	private <if(varGroup.isStatic)>static <endif><varGroup.type> fault_resistant_<varGroup.ident>[] = <(varGroup.ResistantArrayInitTmpl)(varGroup=varGroup)>;	/* help array to store negations of <if(varGroup.isGlobal)>global<else>local<endif> <varGroup.type> variables*/
>>

/**
 *	Specific initializers can be used for different initialization of different types
 */
resistantArrayInit_boolean(varGroup) ::= <<
<resistantArrayInit(varGroup=varGroup)>
>>
resistantArrayInit_short(varGroup) ::= <<
<resistantArrayInit(varGroup=varGroup)>
>>
resistantArrayInit_byte(varGroup) ::= <<
<resistantArrayInit(varGroup=varGroup)>
>>
resistantArrayInit(varGroup) ::= <<
new <varGroup.type>[<varGroup.size>]
>>
