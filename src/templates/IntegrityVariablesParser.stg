group IntegrityVariablesParser : Base;

/**
 * Additional imports, that will be included in transformed file
 */
additionalImports() ::= <<
<if(params.javaCard)>
import javacard.framework.ISO7816;
import javacard.framework.ISOException;<\n>
<else>
<endif>
>>


/**
 * Declarators for setters and getter for each supported type
 */

declareBooleanSetter(trueValue,falseValue) ::= << <\n>
    private static byte _setBoolean(boolean var) {
        return var ? (byte) <trueValue> : (byte) <falseValue>;
    }
<\n> >>

declareBooleanGetter(trueValue,falseValue) ::= << <\n>
    private static boolean _getBoolean(byte var) {
        switch (var) {
            case (byte) <trueValue>: return true;
            case (byte) <falseValue>: return false;
            default: <if(params.javaCard)>ISOException.throwIt(ISO7816.SW_DATA_INVALID);
                     <else>throw new RuntimeException("Error induction");
                     <endif>
        }
    }
>>

declareByteSetter(mask) ::= << <\n>
    private static short _setByte(byte var) {
        return (short) ((short) ((<mask> ^ var) \<\< 8) ^ (var & 0xFF));
    }
>>

declareByteGetter(mask) ::= << <\n>
    private static byte _getByte(short var) {
        if (((byte) (var \>\>\> 8) ^ <mask>) == (byte) var) {
            return (byte) var;
        } else {
            <if(params.javaCard)>
            ISOException.throwIt(ISO7816.SW_DATA_INVALID);
            <else>
            throw new RuntimeException("Error induction");
            <endif>
        }
    }
>>

addDualShortType() ::= << <\n>
    public class DualShort {
        public short original;
        public short masked;
    }
>>

declareShortSetter(mask) ::= << <\n>
    private DualShort _setShort(short var) {
        DualShort dual = new DualShort();
        dual.original = var;
        dual.masked = (short) (<mask> ^ var);
        return dual;
    }
>>

declareShortGetter(mask) ::= << <\n>
    private short _getShort(DualShort var) {
        if ((var.masked ^ <mask>) == var.original) {
            return var.original;
        } else {
            <if(params.javaCard)>
            ISOException.throwIt(ISO7816.SW_DATA_INVALID);
            <else>
            throw new RuntimeException("Error induction");
            <endif>
        }
    }
>>


/*
 * Templates adding a call to setter or getter for each supported variable
 */

set_boolean(value) ::= "_setBoolean(<value>)"

get_boolean(value) ::= "_getBoolean(<value>)"

set_byte(value) ::= "_setByte((byte) (<value>))"

get_byte(value) ::= "_getByte(<value>)"

set_short(value) ::= "_setShort((short) (<value>))"

get_short(value) ::= "_getShort(<value>)"


/*
 * Templates for type representation changes during declarations
 */

resistantType_boolean() ::= "/*boolean*/byte"

resistantType_byte() ::= "/*byte*/short"

resistantType_short() ::= "/*short*/DualShort"


/*
 * Templates for assign expressions
 */

unwrapAssign_boolean(left, right, sign) ::=
    "<left> = <set_boolean(value={<get_boolean(value=left)> <sign> (<right>)})>"

unwrapAssign_byte(left, right, sign) ::=
    "<left> = <set_byte(value={<get_byte(value=left)> <sign> (<right>)})>"

unwrapPreIncrementation_byte(variable, sign) ::=
    "<unwrapAssign_byte(left=variable, right=1, sign=sign)>"

unwrapPostIncrementation_byte(variable, sign) ::=
    "<unwrapPreIncrementation_byte(variable=variable, sign=sign)>"

unwrapAssign_short(left, right, sign) ::=
    "<left> = <set_short(value={<get_short(value=left)> <sign> (<right>)})>"

unwrapPreIncrementation_short(variable, sign) ::=
    "<unwrapAssign_short(left=variable, right=1, sign=sign)>"

unwrapPostIncrementation_short(variable, sign) ::=
    "<unwrapPreIncrementation_short(variable=variable, sign=sign)>"
