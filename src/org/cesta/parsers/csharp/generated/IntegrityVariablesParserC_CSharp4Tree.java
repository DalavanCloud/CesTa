// $ANTLR 3.4 CSharp4Tree.g 2013-04-19 22:47:09

package org.cesta.parsers.csharp.generated;



import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
@SuppressWarnings({"all", "warnings", "unchecked"})
public class IntegrityVariablesParserC_CSharp4Tree extends TreeParser {
    public static final int EOF=-1;
    public static final int ABSTRACT=4;
    public static final int AMP=5;
    public static final int AS=6;
    public static final int ASSIGNMENT=7;
    public static final int Asterisks=8;
    public static final int Available_identifier=9;
    public static final int BACK_SLASH=10;
    public static final int BANG=11;
    public static final int BASE=12;
    public static final int BITWISE_OR=13;
    public static final int BOOL=14;
    public static final int BREAK=15;
    public static final int BYTE=16;
    public static final int CARET=17;
    public static final int CASE=18;
    public static final int CATCH=19;
    public static final int CHAR=20;
    public static final int CHARACTER_LITERAL=21;
    public static final int CHECKED=22;
    public static final int CLASS=23;
    public static final int CLOSE_BRACE=24;
    public static final int CLOSE_BRACKET=25;
    public static final int CLOSE_PARENS=26;
    public static final int COLON=27;
    public static final int COMMA=28;
    public static final int CONST=29;
    public static final int CONTINUE=30;
    public static final int Character=31;
    public static final int Combining_character=32;
    public static final int Conditional_symbol=33;
    public static final int Connecting_character=34;
    public static final int DECIMAL=35;
    public static final int DECIMAL_DIGIT=36;
    public static final int DEFAULT=37;
    public static final int DELEGATE=38;
    public static final int DELIMITED_COMMENT=39;
    public static final int DELIMITED_DOC_COMMENT=40;
    public static final int DIV=41;
    public static final int DO=42;
    public static final int DOT=43;
    public static final int DOUBLE=44;
    public static final int DOUBLE_BACK_SLASH=45;
    public static final int DOUBLE_COLON=46;
    public static final int DOUBLE_QUOTE=47;
    public static final int Decimal_digit_character=48;
    public static final int Decimal_digits=49;
    public static final int Decimal_integer_literal=50;
    public static final int Delimited_comment_section=51;
    public static final int ELSE=52;
    public static final int ENUM=53;
    public static final int EVENT=54;
    public static final int EXPLICIT=55;
    public static final int EXTERN=56;
    public static final int Exponent_part=57;
    public static final int FALSE=58;
    public static final int FINALLY=59;
    public static final int FIXED=60;
    public static final int FLOAT=61;
    public static final int FOR=62;
    public static final int FOREACH=63;
    public static final int File_name=64;
    public static final int File_name_character=65;
    public static final int File_name_characters=66;
    public static final int Formatting_character=67;
    public static final int GOTO=68;
    public static final int GT=69;
    public static final int HEX_DIGIT=70;
    public static final int Hex_digits=71;
    public static final int Hexadecimal_escape_sequence=72;
    public static final int Hexadecimal_integer_literal=73;
    public static final int IDENTIFIER=74;
    public static final int IF=75;
    public static final int IMPLICIT=76;
    public static final int IN=77;
    public static final int INT=78;
    public static final int INTEGER_LITERAL=79;
    public static final int INTERFACE=80;
    public static final int INTERNAL=81;
    public static final int INTERR=82;
    public static final int IS=83;
    public static final int Identifier_or_keyword=84;
    public static final int Identifier_part_character=85;
    public static final int Identifier_start_character=86;
    public static final int Input_character=87;
    public static final int Input_characters=88;
    public static final int Integer_type_suffix=89;
    public static final int LOCK=90;
    public static final int LONG=91;
    public static final int LT=92;
    public static final int Letter_character=93;
    public static final int Line_indicator=94;
    public static final int LiteralAccess=95;
    public static final int MINUS=96;
    public static final int NAMESPACE=97;
    public static final int NEW=98;
    public static final int NEW_LINE=99;
    public static final int NEW_LINE_CHARACTER=100;
    public static final int NULL=101;
    public static final int Not_number_sign=102;
    public static final int Not_slash_or_asterisk=103;
    public static final int OBJECT=104;
    public static final int OPEN_BRACE=105;
    public static final int OPEN_BRACKET=106;
    public static final int OPEN_PARENS=107;
    public static final int OPERATOR=108;
    public static final int OP_ADD_ASSIGNMENT=109;
    public static final int OP_AND=110;
    public static final int OP_AND_ASSIGNMENT=111;
    public static final int OP_COALESCING=112;
    public static final int OP_DEC=113;
    public static final int OP_DIV_ASSIGNMENT=114;
    public static final int OP_EQ=115;
    public static final int OP_GE=116;
    public static final int OP_INC=117;
    public static final int OP_LE=118;
    public static final int OP_LEFT_SHIFT=119;
    public static final int OP_LEFT_SHIFT_ASSIGNMENT=120;
    public static final int OP_MOD_ASSIGNMENT=121;
    public static final int OP_MULT_ASSIGNMENT=122;
    public static final int OP_NE=123;
    public static final int OP_OR=124;
    public static final int OP_OR_ASSIGNMENT=125;
    public static final int OP_PTR=126;
    public static final int OP_SUB_ASSIGNMENT=127;
    public static final int OP_XOR_ASSIGNMENT=128;
    public static final int OUT=129;
    public static final int OVERRIDE=130;
    public static final int PARAMS=131;
    public static final int PERCENT=132;
    public static final int PLUS=133;
    public static final int PRIVATE=134;
    public static final int PROTECTED=135;
    public static final int PUBLIC=136;
    public static final int Pp_and_expression=137;
    public static final int Pp_conditional=138;
    public static final int Pp_declaration=139;
    public static final int Pp_diagnostic=140;
    public static final int Pp_directive=141;
    public static final int Pp_elif_section=142;
    public static final int Pp_else_section=143;
    public static final int Pp_end_region=144;
    public static final int Pp_endif=145;
    public static final int Pp_equality_expression=146;
    public static final int Pp_expression=147;
    public static final int Pp_if_section=148;
    public static final int Pp_line=149;
    public static final int Pp_message=150;
    public static final int Pp_new_line=151;
    public static final int Pp_or_expression=152;
    public static final int Pp_pragma=153;
    public static final int Pp_pragma_text=154;
    public static final int Pp_primary_expression=155;
    public static final int Pp_region=156;
    public static final int Pp_start_region=157;
    public static final int Pp_unary_expression=158;
    public static final int QUOTE=159;
    public static final int Quote_escape_sequence=160;
    public static final int READONLY=161;
    public static final int REAL_LITERAL=162;
    public static final int REF=163;
    public static final int RETURN=164;
    public static final int Real_type_suffix=165;
    public static final int Regular_string_literal=166;
    public static final int Regular_string_literal_character=167;
    public static final int SBYTE=168;
    public static final int SEALED=169;
    public static final int SEMICOLON=170;
    public static final int SHARP=171;
    public static final int SHORT=172;
    public static final int SINGLE_LINE_COMMENT=173;
    public static final int SINGLE_LINE_DOC_COMMENT=174;
    public static final int SIZEOF=175;
    public static final int STACKALLOC=176;
    public static final int STAR=177;
    public static final int STATIC=178;
    public static final int STRING=179;
    public static final int STRING_LITERAL=180;
    public static final int STRUCT=181;
    public static final int SWITCH=182;
    public static final int Sign=183;
    public static final int Simple_escape_sequence=184;
    public static final int Single_character=185;
    public static final int Single_regular_string_literal_character=186;
    public static final int Single_verbatim_string_literal_character=187;
    public static final int SkiPped_characters=188;
    public static final int SkiPped_section_part=189;
    public static final int THIS=190;
    public static final int THROW=191;
    public static final int TILDE=192;
    public static final int TRUE=193;
    public static final int TRY=194;
    public static final int TYPEOF=195;
    public static final int Tokens=196;
    public static final int UINT=197;
    public static final int ULONG=198;
    public static final int UNCHECKED=199;
    public static final int UNICODE_CLASS_CF=200;
    public static final int UNICODE_CLASS_LL=201;
    public static final int UNICODE_CLASS_LM=202;
    public static final int UNICODE_CLASS_LO=203;
    public static final int UNICODE_CLASS_LT=204;
    public static final int UNICODE_CLASS_LU=205;
    public static final int UNICODE_CLASS_MC=206;
    public static final int UNICODE_CLASS_MN=207;
    public static final int UNICODE_CLASS_ND=208;
    public static final int UNICODE_CLASS_NL=209;
    public static final int UNICODE_CLASS_PC=210;
    public static final int UNICODE_CLASS_ZS=211;
    public static final int UNSAFE=212;
    public static final int USHORT=213;
    public static final int USING=214;
    public static final int Unicode_escape_sequence=215;
    public static final int VIRTUAL=216;
    public static final int VOID=217;
    public static final int VOLATILE=218;
    public static final int Verbatim_string_literal=219;
    public static final int Verbatim_string_literal_character=220;
    public static final int WHILE=221;
    public static final int WHITESPACE=222;
    public static final int Whitespace_character=223;
    public static final int Whitespace_characters=224;
    public static final int ARGUMENT=227;
    public static final int ARGUMENT_VALUE=228;
    public static final int ARRAY_ACCESS=229;
    public static final int ASSIGNMENT_OPERATOR=232;
    public static final int ATTRIBUTE=233;
    public static final int ATTRIBUTES=234;
    public static final int ATTRIBUTE_LIST=235;
    public static final int ATTRIBUTE_NAME=236;
    public static final int ATTRIBUTE_TARGET=237;
    public static final int BLOCK=241;
    public static final int BOOL_NOT=243;
    public static final int CAST_EXPRESSION=248;
    public static final int CLASS_MEMBER_DECLARATIONS=254;
    public static final int CONDITION=260;
    public static final int CONDITIONAL_EXPRESSION=261;
    public static final int CONSTANT_DECLARATOR=263;
    public static final int CONSTANT_DECLARATORS=264;
    public static final int CONSTANT_INITIALIZER=265;
    public static final int CONSTRUCTOR_DECL=266;
    public static final int EALED=276;
    public static final int ENUM_EXTENDS=279;
    public static final int ENUM_MEMBER_DECLARATION=280;
    public static final int ENUM_MEMBER_DECLARATIONS=281;
    public static final int ENUM_MEMBER_INITIALIZER=282;
    public static final int EXPRESSION_STATEMENT=285;
    public static final int EXTENDS_OR_IMPLEMENTS=286;
    public static final int EXTERN_ALIAS_DIRECTIVES=288;
    public static final int FIELD_DECL=290;
    public static final int FIRST_OP=292;
    public static final int FIXED_PARAMETER=293;
    public static final int FORMAL_PARAMETER_LIST=297;
    public static final int FOR_INITIALIZER=298;
    public static final int FOR_ITERATOR=299;
    public static final int IMPLEMENTS=304;
    public static final int INDEXER_DECL=307;
    public static final int INTERFACE_MEMBER_DECLARATIONS=311;
    public static final int LABELED_STATEMENT=315;
    public static final int LOCAL_VARIABLE_DECLARATOR=316;
    public static final int LOCAL_VARIABLE_INITIALIZER=317;
    public static final int LOOP_BODY=320;
    public static final int MEMBER_ACCESS=322;
    public static final int MEMBER_NAME=323;
    public static final int METHOD_DECL=324;
    public static final int METHOD_INVOCATION=325;
    public static final int MODIFIERS=327;
    public static final int NAMESPACE_MEMBER_DECLARATIONS=329;
    public static final int NAMESPACE_OR_TYPE_NAME=330;
    public static final int NAMESPACE_OR_TYPE_PART=331;
    public static final int OBJECT_CREATION_EXPRESSION=335;
    public static final int OP_RIGHT_SHIFT=358;
    public static final int OP_RIGHT_SHIFT_ASSIGNMENT=359;
    public static final int PARAMETER_ARRAY=364;
    public static final int PARAMETER_MODIFIER=365;
    public static final int POSITIONAL_ARGUMENT_LIST=369;
    public static final int POST_DEC=370;
    public static final int POST_INC=371;
    public static final int PROPERTY_DECL=373;
    public static final int QUALIFIED_ALIAS_MEMBER=376;
    public static final int QUALIFIED_IDENTIFIER=377;
    public static final int RANK_SPECIFIER=378;
    public static final int SECOND_OP=385;
    public static final int SIMPLE_NAME=388;
    public static final int STRUCT_MEMBER_DECLARATIONS=396;
    public static final int THEN=398;
    public static final int TYPE=404;
    public static final int TYPE_ARGUMENT_LIST=406;
    public static final int TYPE_PARAM=407;
    public static final int TYPE_PARAMETERS=408;
    public static final int TYPE_PARAMETER_CONSTRAINTS_CLAUSE=409;
    public static final int TYPE_PARAMETER_CONSTRAINTS_CLAUSES=410;
    public static final int UNARY_EXPRESSION=413;
    public static final int USING_ALIAS_DIRECTIVE=418;
    public static final int USING_DIRECTIVES=419;
    public static final int USING_NAMESPACE_DIRECTIVE=420;
    public static final int VARIABLE_DECLARATOR=421;
    public static final int VARIABLE_INITIALIZER=422;
    public static final int VARIANCE_ANNOTATION=423;
    public static final int VARIANT_TYPE_PARAMETERS=424;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators
    public IntegrityVariablesParserC gIntegrityVariablesParserC;
    public IntegrityVariablesParserC gParent;


    public IntegrityVariablesParserC_CSharp4Tree(TreeNodeStream input, IntegrityVariablesParserC gIntegrityVariablesParserC) {
        this(input, new RecognizerSharedState(), gIntegrityVariablesParserC);
    }
    public IntegrityVariablesParserC_CSharp4Tree(TreeNodeStream input, RecognizerSharedState state, IntegrityVariablesParserC gIntegrityVariablesParserC) {
        super(input, state);
        this.gIntegrityVariablesParserC = gIntegrityVariablesParserC;
        gParent = gIntegrityVariablesParserC;
    }

protected StringTemplateGroup templateLib =
  new StringTemplateGroup("IntegrityVariablesParserC_CSharp4TreeTemplates", AngleBracketTemplateLexer.class);

public void setTemplateLib(StringTemplateGroup templateLib) {
  this.templateLib = templateLib;
}
public StringTemplateGroup getTemplateLib() {
  return templateLib;
}
/** allows convenient multi-value initialization:
 *  "new STAttrMap().put(...).put(...)"
 */
public static class STAttrMap extends HashMap {
  public STAttrMap put(String attrName, Object value) {
    super.put(attrName, value);
    return this;
  }
  public STAttrMap put(String attrName, int value) {
    super.put(attrName, new Integer(value));
    return this;
  }
}
    public String[] getTokenNames() { return IntegrityVariablesParserC.tokenNames; }
    public String getGrammarFileName() { return "CSharp4Tree.g"; }


    public static class namespace_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_name"
    // CSharp4Tree.g:25:1: namespace_name : namespace_or_type_name ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_name_return namespace_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_name_return();
        retval.start = input.LT(1);

        int namespace_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // CSharp4Tree.g:26:5: ( namespace_or_type_name )
            // CSharp4Tree.g:26:10: namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name108);
            namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, namespace_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_name"


    public static class type_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_name"
    // CSharp4Tree.g:29:1: type_name : namespace_or_type_name ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_name_return type_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_name_return();
        retval.start = input.LT(1);

        int type_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // CSharp4Tree.g:30:5: ( namespace_or_type_name )
            // CSharp4Tree.g:30:10: namespace_or_type_name
            {
            pushFollow(FOLLOW_namespace_or_type_name_in_type_name129);
            namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_name"


    public static class namespace_or_type_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name"
    // CSharp4Tree.g:34:1: namespace_or_type_name : ^( NAMESPACE_OR_TYPE_NAME namespace_or_type_name2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name_return();
        retval.start = input.LT(1);

        int namespace_or_type_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // CSharp4Tree.g:35:5: ( ^( NAMESPACE_OR_TYPE_NAME namespace_or_type_name2 ) )
            // CSharp4Tree.g:35:10: ^( NAMESPACE_OR_TYPE_NAME namespace_or_type_name2 )
            {
            match(input,NAMESPACE_OR_TYPE_NAME,FOLLOW_NAMESPACE_OR_TYPE_NAME_in_namespace_or_type_name151); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_namespace_or_type_name2_in_namespace_or_type_name154);
            namespace_or_type_name2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, namespace_or_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"


    public static class namespace_or_type_name2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_or_type_name2"
    // CSharp4Tree.g:38:1: namespace_or_type_name2 : ( IDENTIFIER type_argument_list_opt | qualified_alias_member ) ( namespace_part )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name2_return namespace_or_type_name2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name2_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_or_type_name2_return();
        retval.start = input.LT(1);

        int namespace_or_type_name2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // CSharp4Tree.g:39:5: ( ( IDENTIFIER type_argument_list_opt | qualified_alias_member ) ( namespace_part )* )
            // CSharp4Tree.g:39:10: ( IDENTIFIER type_argument_list_opt | qualified_alias_member ) ( namespace_part )*
            {
            // CSharp4Tree.g:39:10: ( IDENTIFIER type_argument_list_opt | qualified_alias_member )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==IDENTIFIER) ) {
                alt1=1;
            }
            else if ( (LA1_0==QUALIFIED_ALIAS_MEMBER) ) {
                alt1=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }
            switch (alt1) {
                case 1 :
                    // CSharp4Tree.g:39:12: IDENTIFIER type_argument_list_opt
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_or_type_name2177); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_or_type_name2179);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:39:48: qualified_alias_member
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_namespace_or_type_name2183);
                    qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:40:10: ( namespace_part )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NAMESPACE_OR_TYPE_PART) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // CSharp4Tree.g:40:10: namespace_part
            	    {
            	    pushFollow(FOLLOW_namespace_part_in_namespace_or_type_name2196);
            	    namespace_part();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, namespace_or_type_name2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name2"


    public static class namespace_part_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_part"
    // CSharp4Tree.g:45:1: namespace_part : ^( NAMESPACE_OR_TYPE_PART IDENTIFIER ( type_argument_list_opt )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_part_return namespace_part() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_part_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_part_return();
        retval.start = input.LT(1);

        int namespace_part_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // CSharp4Tree.g:46:5: ( ^( NAMESPACE_OR_TYPE_PART IDENTIFIER ( type_argument_list_opt )? ) )
            // CSharp4Tree.g:46:10: ^( NAMESPACE_OR_TYPE_PART IDENTIFIER ( type_argument_list_opt )? )
            {
            match(input,NAMESPACE_OR_TYPE_PART,FOLLOW_NAMESPACE_OR_TYPE_PART_in_namespace_part220); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_namespace_part222); if (state.failed) return retval;

            // CSharp4Tree.g:46:46: ( type_argument_list_opt )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==TYPE_ARGUMENT_LIST) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // CSharp4Tree.g:46:46: type_argument_list_opt
                    {
                    pushFollow(FOLLOW_type_argument_list_opt_in_namespace_part224);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, namespace_part_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_part"


    public static class type_argument_list_opt_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list_opt"
    // CSharp4Tree.g:56:1: type_argument_list_opt : type_argument_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_argument_list_opt_return type_argument_list_opt() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_argument_list_opt_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_argument_list_opt_return();
        retval.start = input.LT(1);

        int type_argument_list_opt_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // CSharp4Tree.g:57:5: ( type_argument_list )
            // CSharp4Tree.g:57:10: type_argument_list
            {
            pushFollow(FOLLOW_type_argument_list_in_type_argument_list_opt254);
            type_argument_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, type_argument_list_opt_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_argument_list_opt"


    public static class type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type"
    // CSharp4Tree.g:62:1: type : ^( TYPE type2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_return type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_return();
        retval.start = input.LT(1);

        int type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // CSharp4Tree.g:63:5: ( ^( TYPE type2 ) )
            // CSharp4Tree.g:63:10: ^( TYPE type2 )
            {
            match(input,TYPE,FOLLOW_TYPE_in_type277); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type2_in_type279);
            type2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type"


    public static class type2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type2"
    // CSharp4Tree.g:68:1: type2 : base_type ( INTERR | rank_specifier | STAR )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.type2_return type2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type2_return retval = new IntegrityVariablesParserC_CSharp4Tree.type2_return();
        retval.start = input.LT(1);

        int type2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // CSharp4Tree.g:69:5: ( base_type ( INTERR | rank_specifier | STAR )* )
            // CSharp4Tree.g:69:10: base_type ( INTERR | rank_specifier | STAR )*
            {
            pushFollow(FOLLOW_base_type_in_type2302);
            base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:69:20: ( INTERR | rank_specifier | STAR )*
            loop4:
            do {
                int alt4=4;
                switch ( input.LA(1) ) {
                case INTERR:
                    {
                    alt4=1;
                    }
                    break;
                case RANK_SPECIFIER:
                    {
                    alt4=2;
                    }
                    break;
                case STAR:
                    {
                    alt4=3;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // CSharp4Tree.g:69:22: INTERR
            	    {
            	    match(input,INTERR,FOLLOW_INTERR_in_type2306); if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:69:31: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_type2310);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 3 :
            	    // CSharp4Tree.g:69:48: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_type2314); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, type2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type2"


    public static class base_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_type"
    // CSharp4Tree.g:73:1: base_type : ( simple_type | class_type | VOID STAR );
    public final IntegrityVariablesParserC_CSharp4Tree.base_type_return base_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.base_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.base_type_return();
        retval.start = input.LT(1);

        int base_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // CSharp4Tree.g:74:5: ( simple_type | class_type | VOID STAR )
            int alt5=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt5=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
            case NAMESPACE_OR_TYPE_NAME:
                {
                alt5=2;
                }
                break;
            case VOID:
                {
                alt5=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // CSharp4Tree.g:74:10: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_base_type337);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:75:10: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_base_type348);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:76:10: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_base_type361); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_base_type363); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, base_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "base_type"


    public static class simple_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_type"
    // CSharp4Tree.g:80:1: simple_type : ( numeric_type | BOOL );
    public final IntegrityVariablesParserC_CSharp4Tree.simple_type_return simple_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.simple_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.simple_type_return();
        retval.start = input.LT(1);

        int simple_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // CSharp4Tree.g:81:5: ( numeric_type | BOOL )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==BYTE||LA6_0==CHAR||LA6_0==DECIMAL||LA6_0==DOUBLE||LA6_0==FLOAT||LA6_0==INT||LA6_0==LONG||LA6_0==SBYTE||LA6_0==SHORT||(LA6_0 >= UINT && LA6_0 <= ULONG)||LA6_0==USHORT) ) {
                alt6=1;
            }
            else if ( (LA6_0==BOOL) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // CSharp4Tree.g:81:10: numeric_type
                    {
                    pushFollow(FOLLOW_numeric_type_in_simple_type386);
                    numeric_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:82:10: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_simple_type397); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, simple_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class numeric_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "numeric_type"
    // CSharp4Tree.g:85:1: numeric_type : ( integral_type | floating_point_type | DECIMAL );
    public final IntegrityVariablesParserC_CSharp4Tree.numeric_type_return numeric_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.numeric_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.numeric_type_return();
        retval.start = input.LT(1);

        int numeric_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // CSharp4Tree.g:86:5: ( integral_type | floating_point_type | DECIMAL )
            int alt7=3;
            switch ( input.LA(1) ) {
            case BYTE:
            case CHAR:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt7=1;
                }
                break;
            case DOUBLE:
            case FLOAT:
                {
                alt7=2;
                }
                break;
            case DECIMAL:
                {
                alt7=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // CSharp4Tree.g:86:10: integral_type
                    {
                    pushFollow(FOLLOW_integral_type_in_numeric_type418);
                    integral_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:87:10: floating_point_type
                    {
                    pushFollow(FOLLOW_floating_point_type_in_numeric_type429);
                    floating_point_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:88:10: DECIMAL
                    {
                    match(input,DECIMAL,FOLLOW_DECIMAL_in_numeric_type440); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, numeric_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numeric_type"


    public static class integral_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "integral_type"
    // CSharp4Tree.g:91:1: integral_type : ( SBYTE | BYTE | SHORT | USHORT | INT | UINT | LONG | ULONG | CHAR );
    public final IntegrityVariablesParserC_CSharp4Tree.integral_type_return integral_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.integral_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.integral_type_return();
        retval.start = input.LT(1);

        int integral_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // CSharp4Tree.g:92:5: ( SBYTE | BYTE | SHORT | USHORT | INT | UINT | LONG | ULONG | CHAR )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SBYTE||input.LA(1)==SHORT||(input.LA(1) >= UINT && input.LA(1) <= ULONG)||input.LA(1)==USHORT ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, integral_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "integral_type"


    public static class floating_point_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "floating_point_type"
    // CSharp4Tree.g:103:1: floating_point_type : ( FLOAT | DOUBLE );
    public final IntegrityVariablesParserC_CSharp4Tree.floating_point_type_return floating_point_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.floating_point_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.floating_point_type_return();
        retval.start = input.LT(1);

        int floating_point_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // CSharp4Tree.g:104:5: ( FLOAT | DOUBLE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==DOUBLE||input.LA(1)==FLOAT ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, floating_point_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "floating_point_type"


    public static class nullable_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "nullable_type"
    // CSharp4Tree.g:108:1: nullable_type : non_nullable_value_type INTERR ;
    public final IntegrityVariablesParserC_CSharp4Tree.nullable_type_return nullable_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.nullable_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.nullable_type_return();
        retval.start = input.LT(1);

        int nullable_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // CSharp4Tree.g:109:5: ( non_nullable_value_type INTERR )
            // CSharp4Tree.g:109:10: non_nullable_value_type INTERR
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_nullable_type602);
            non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,INTERR,FOLLOW_INTERR_in_nullable_type604); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, nullable_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nullable_type"


    public static class non_nullable_value_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_nullable_value_type"
    // CSharp4Tree.g:114:1: non_nullable_value_type : base_type ( rank_specifier | STAR )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.non_nullable_value_type_return non_nullable_value_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.non_nullable_value_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.non_nullable_value_type_return();
        retval.start = input.LT(1);

        int non_nullable_value_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // CSharp4Tree.g:115:5: ( base_type ( rank_specifier | STAR )* )
            // CSharp4Tree.g:115:7: base_type ( rank_specifier | STAR )*
            {
            pushFollow(FOLLOW_base_type_in_non_nullable_value_type624);
            base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:115:17: ( rank_specifier | STAR )*
            loop8:
            do {
                int alt8=3;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==RANK_SPECIFIER) ) {
                    alt8=1;
                }
                else if ( (LA8_0==STAR) ) {
                    alt8=2;
                }


                switch (alt8) {
            	case 1 :
            	    // CSharp4Tree.g:115:18: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_non_nullable_value_type627);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:115:35: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_non_nullable_value_type631); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, non_nullable_value_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_nullable_value_type"


    public static class reference_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "reference_type"
    // CSharp4Tree.g:119:1: reference_type : ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.reference_type_return reference_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.reference_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.reference_type_return();
        retval.start = input.LT(1);

        int reference_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // CSharp4Tree.g:120:5: ( ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )+ )
            // CSharp4Tree.g:120:10: ( simple_type | class_type | VOID STAR ) ( ( STAR | INTERR )* rank_specifier )+
            {
            // CSharp4Tree.g:120:10: ( simple_type | class_type | VOID STAR )
            int alt9=3;
            switch ( input.LA(1) ) {
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SBYTE:
            case SHORT:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt9=1;
                }
                break;
            case IDENTIFIER:
            case OBJECT:
            case STRING:
            case NAMESPACE_OR_TYPE_NAME:
                {
                alt9=2;
                }
                break;
            case VOID:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }

            switch (alt9) {
                case 1 :
                    // CSharp4Tree.g:120:12: simple_type
                    {
                    pushFollow(FOLLOW_simple_type_in_reference_type657);
                    simple_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:120:26: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_reference_type661);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:120:39: VOID STAR
                    {
                    match(input,VOID,FOLLOW_VOID_in_reference_type665); if (state.failed) return retval;

                    match(input,STAR,FOLLOW_STAR_in_reference_type667); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:121:10: ( ( STAR | INTERR )* rank_specifier )+
            int cnt11=0;
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==INTERR||LA11_0==STAR||LA11_0==RANK_SPECIFIER) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // CSharp4Tree.g:121:11: ( STAR | INTERR )* rank_specifier
            	    {
            	    // CSharp4Tree.g:121:11: ( STAR | INTERR )*
            	    loop10:
            	    do {
            	        int alt10=2;
            	        int LA10_0 = input.LA(1);

            	        if ( (LA10_0==INTERR||LA10_0==STAR) ) {
            	            alt10=1;
            	        }


            	        switch (alt10) {
            	    	case 1 :
            	    	    // CSharp4Tree.g:
            	    	    {
            	    	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	    	        input.consume();
            	    	        state.errorRecovery=false;
            	    	        state.failed=false;
            	    	    }
            	    	    else {
            	    	        if (state.backtracking>0) {state.failed=true; return retval;}
            	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	    	        throw mse;
            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop10;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_rank_specifier_in_reference_type690);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt11 >= 1 ) break loop11;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(11, input);
                        throw eee;
                }
                cnt11++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, reference_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference_type"


    public static class class_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_type"
    // CSharp4Tree.g:125:1: class_type : ( type_name | OBJECT | dynamic_contextual_keyword | STRING );
    public final IntegrityVariablesParserC_CSharp4Tree.class_type_return class_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_type_return();
        retval.start = input.LT(1);

        int class_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // CSharp4Tree.g:126:5: ( type_name | OBJECT | dynamic_contextual_keyword | STRING )
            int alt12=4;
            switch ( input.LA(1) ) {
            case NAMESPACE_OR_TYPE_NAME:
                {
                alt12=1;
                }
                break;
            case OBJECT:
                {
                alt12=2;
                }
                break;
            case IDENTIFIER:
                {
                alt12=3;
                }
                break;
            case STRING:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }

            switch (alt12) {
                case 1 :
                    // CSharp4Tree.g:126:10: type_name
                    {
                    pushFollow(FOLLOW_type_name_in_class_type715);
                    type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:127:10: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_class_type726); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:128:10: dynamic_contextual_keyword
                    {
                    pushFollow(FOLLOW_dynamic_contextual_keyword_in_class_type737);
                    dynamic_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:129:10: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_class_type748); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, class_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_type"


    public static class interface_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type"
    // CSharp4Tree.g:133:1: interface_type : type_name ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_type_return interface_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_type_return();
        retval.start = input.LT(1);

        int interface_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // CSharp4Tree.g:134:5: ( type_name )
            // CSharp4Tree.g:134:10: type_name
            {
            pushFollow(FOLLOW_type_name_in_interface_type771);
            type_name();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, interface_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_type"


    public static class delegate_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_type"
    // CSharp4Tree.g:138:1: delegate_type : type_name ;
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_type_return delegate_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_type_return();
        retval.start = input.LT(1);

        int delegate_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // CSharp4Tree.g:139:5: ( type_name )
            // CSharp4Tree.g:139:10: type_name
            {
            pushFollow(FOLLOW_type_name_in_delegate_type794);
            type_name();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, delegate_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_type"


    public static class type_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument_list"
    // CSharp4Tree.g:142:1: type_argument_list : ^( TYPE_ARGUMENT_LIST type_arguments ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_argument_list_return type_argument_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_argument_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_argument_list_return();
        retval.start = input.LT(1);

        int type_argument_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // CSharp4Tree.g:143:5: ( ^( TYPE_ARGUMENT_LIST type_arguments ) )
            // CSharp4Tree.g:143:10: ^( TYPE_ARGUMENT_LIST type_arguments )
            {
            match(input,TYPE_ARGUMENT_LIST,FOLLOW_TYPE_ARGUMENT_LIST_in_type_argument_list816); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_arguments_in_type_argument_list818);
            type_arguments();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, type_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_argument_list"


    public static class type_arguments_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_arguments"
    // CSharp4Tree.g:146:1: type_arguments : type_argument ( type_argument )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_arguments_return type_arguments() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_arguments_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_arguments_return();
        retval.start = input.LT(1);

        int type_arguments_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // CSharp4Tree.g:147:5: ( type_argument ( type_argument )* )
            // CSharp4Tree.g:147:10: type_argument ( type_argument )*
            {
            pushFollow(FOLLOW_type_argument_in_type_arguments840);
            type_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:147:24: ( type_argument )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==TYPE) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // CSharp4Tree.g:147:24: type_argument
            	    {
            	    pushFollow(FOLLOW_type_argument_in_type_arguments842);
            	    type_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, type_arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_arguments"


    public static class type_argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_argument"
    // CSharp4Tree.g:150:1: type_argument : type ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_argument_return type_argument() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_argument_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_argument_return();
        retval.start = input.LT(1);

        int type_argument_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // CSharp4Tree.g:151:5: ( type )
            // CSharp4Tree.g:151:10: type
            {
            pushFollow(FOLLOW_type_in_type_argument864);
            type();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, type_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_argument"


    public static class type_void_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_void"
    // CSharp4Tree.g:155:1: type_void : ^( TYPE VOID ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_void_return type_void() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_void_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_void_return();
        retval.start = input.LT(1);

        int type_void_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // CSharp4Tree.g:156:5: ( ^( TYPE VOID ) )
            // CSharp4Tree.g:156:10: ^( TYPE VOID )
            {
            match(input,TYPE,FOLLOW_TYPE_in_type_void886); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,VOID,FOLLOW_VOID_in_type_void888); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, type_void_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_void"


    public static class variable_reference_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_reference"
    // CSharp4Tree.g:162:1: variable_reference : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_reference_return variable_reference() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_reference_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_reference_return();
        retval.start = input.LT(1);

        int variable_reference_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // CSharp4Tree.g:163:5: ( expression )
            // CSharp4Tree.g:163:10: expression
            {
            pushFollow(FOLLOW_expression_in_variable_reference914);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, variable_reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_reference"


    public static class argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_list"
    // CSharp4Tree.g:168:1: argument_list : ( argument )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.argument_list_return argument_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.argument_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.argument_list_return();
        retval.start = input.LT(1);

        int argument_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // CSharp4Tree.g:169:5: ( ( argument )+ )
            // CSharp4Tree.g:169:10: ( argument )+
            {
            // CSharp4Tree.g:169:10: ( argument )+
            int cnt14=0;
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==ARGUMENT) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // CSharp4Tree.g:169:10: argument
            	    {
            	    pushFollow(FOLLOW_argument_in_argument_list937);
            	    argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt14 >= 1 ) break loop14;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(14, input);
                        throw eee;
                }
                cnt14++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_list"


    public static class argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument"
    // CSharp4Tree.g:172:1: argument : ^( ARGUMENT ( argument_name )? argument_value ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.argument_return argument() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.argument_return retval = new IntegrityVariablesParserC_CSharp4Tree.argument_return();
        retval.start = input.LT(1);

        int argument_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // CSharp4Tree.g:173:5: ( ^( ARGUMENT ( argument_name )? argument_value ) )
            // CSharp4Tree.g:173:10: ^( ARGUMENT ( argument_name )? argument_value )
            {
            match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument959); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:173:21: ( argument_name )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IDENTIFIER) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // CSharp4Tree.g:173:21: argument_name
                    {
                    pushFollow(FOLLOW_argument_name_in_argument961);
                    argument_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_argument_value_in_argument964);
            argument_value();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class argument_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_name"
    // CSharp4Tree.g:176:1: argument_name : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.argument_name_return argument_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.argument_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.argument_name_return();
        retval.start = input.LT(1);

        int argument_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // CSharp4Tree.g:177:5: ( IDENTIFIER )
            // CSharp4Tree.g:177:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_argument_name985); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, argument_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_name"


    public static class argument_value_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_value"
    // CSharp4Tree.g:180:1: argument_value : ^( ARGUMENT_VALUE argument_value2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.argument_value_return argument_value() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.argument_value_return retval = new IntegrityVariablesParserC_CSharp4Tree.argument_value_return();
        retval.start = input.LT(1);

        int argument_value_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // CSharp4Tree.g:181:5: ( ^( ARGUMENT_VALUE argument_value2 ) )
            // CSharp4Tree.g:181:10: ^( ARGUMENT_VALUE argument_value2 )
            {
            match(input,ARGUMENT_VALUE,FOLLOW_ARGUMENT_VALUE_in_argument_value1007); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_argument_value2_in_argument_value1009);
            argument_value2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, argument_value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_value"


    public static class argument_value2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "argument_value2"
    // CSharp4Tree.g:184:1: argument_value2 : ( expression | REF variable_reference | OUT variable_reference );
    public final IntegrityVariablesParserC_CSharp4Tree.argument_value2_return argument_value2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.argument_value2_return retval = new IntegrityVariablesParserC_CSharp4Tree.argument_value2_return();
        retval.start = input.LT(1);

        int argument_value2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // CSharp4Tree.g:185:5: ( expression | REF variable_reference | OUT variable_reference )
            int alt16=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case OPEN_PARENS:
            case OP_COALESCING:
            case ASSIGNMENT_OPERATOR:
            case UNARY_EXPRESSION:
                {
                alt16=1;
                }
                break;
            case REF:
                {
                alt16=2;
                }
                break;
            case OUT:
                {
                alt16=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // CSharp4Tree.g:185:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_argument_value21030);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:186:10: REF variable_reference
                    {
                    match(input,REF,FOLLOW_REF_in_argument_value21041); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value21043);
                    variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:187:10: OUT variable_reference
                    {
                    match(input,OUT,FOLLOW_OUT_in_argument_value21054); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_reference_in_argument_value21056);
                    variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, argument_value2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "argument_value2"


    public static class primary_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression"
    // CSharp4Tree.g:191:1: primary_expression : primary_expression_start ( ^( bracket_expression primary_expression ) )* ( ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) ) ( ^( bracket_expression primary_expression ) )* )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.primary_expression_return primary_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.primary_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.primary_expression_return();
        retval.start = input.LT(1);

        int primary_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // CSharp4Tree.g:192:5: ( primary_expression_start ( ^( bracket_expression primary_expression ) )* ( ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) ) ( ^( bracket_expression primary_expression ) )* )* )
            // CSharp4Tree.g:192:10: primary_expression_start ( ^( bracket_expression primary_expression ) )* ( ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) ) ( ^( bracket_expression primary_expression ) )* )*
            {
            pushFollow(FOLLOW_primary_expression_start_in_primary_expression1078);
            primary_expression_start();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:193:10: ( ^( bracket_expression primary_expression ) )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ARRAY_ACCESS) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // CSharp4Tree.g:193:12: ^( bracket_expression primary_expression )
            	    {
            	    pushFollow(FOLLOW_bracket_expression_in_primary_expression1092);
            	    bracket_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_primary_expression_in_primary_expression1094);
            	    primary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            // CSharp4Tree.g:194:10: ( ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) ) ( ^( bracket_expression primary_expression ) )* )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==IDENTIFIER) ) {
                    int LA21_2 = input.LA(2);

                    if ( (LA21_2==ASSIGNMENT||LA21_2==IDENTIFIER||LA21_2==TYPE) ) {
                        alt21=1;
                    }


                }
                else if ( (LA21_0==BASE||LA21_0==BOOL||LA21_0==BYTE||(LA21_0 >= CHAR && LA21_0 <= CHECKED)||LA21_0==DECIMAL||(LA21_0 >= DEFAULT && LA21_0 <= DELEGATE)||LA21_0==DOUBLE||LA21_0==FALSE||LA21_0==FLOAT||(LA21_0 >= INT && LA21_0 <= INTEGER_LITERAL)||LA21_0==LONG||LA21_0==NEW||LA21_0==NULL||LA21_0==OBJECT||LA21_0==OPEN_PARENS||LA21_0==OP_COALESCING||LA21_0==REAL_LITERAL||LA21_0==SBYTE||LA21_0==SHORT||(LA21_0 >= STRING && LA21_0 <= STRING_LITERAL)||LA21_0==THIS||LA21_0==TRUE||LA21_0==TYPEOF||(LA21_0 >= UINT && LA21_0 <= UNCHECKED)||LA21_0==USHORT||LA21_0==ASSIGNMENT_OPERATOR||LA21_0==MEMBER_ACCESS||LA21_0==METHOD_INVOCATION||LA21_0==OBJECT_CREATION_EXPRESSION||(LA21_0 >= POST_DEC && LA21_0 <= POST_INC)||LA21_0==QUALIFIED_ALIAS_MEMBER||LA21_0==SIMPLE_NAME||LA21_0==UNARY_EXPRESSION) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // CSharp4Tree.g:195:14: ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) ) ( ^( bracket_expression primary_expression ) )*
            	    {
            	    // CSharp4Tree.g:195:14: ( ^( MEMBER_ACCESS primary_expression member_access2 ) | ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? ) | ^( POST_INC primary_expression ) | ^( POST_DEC primary_expression ) | primary_expression ^( OP_PTR IDENTIFIER ) )
            	    int alt19=5;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_ACCESS:
            	        {
            	        alt19=1;
            	        }
            	        break;
            	    case METHOD_INVOCATION:
            	        {
            	        alt19=2;
            	        }
            	        break;
            	    case POST_INC:
            	        {
            	        alt19=3;
            	        }
            	        break;
            	    case POST_DEC:
            	        {
            	        alt19=4;
            	        }
            	        break;
            	    case BASE:
            	    case BOOL:
            	    case BYTE:
            	    case CHAR:
            	    case CHARACTER_LITERAL:
            	    case CHECKED:
            	    case DECIMAL:
            	    case DEFAULT:
            	    case DELEGATE:
            	    case DOUBLE:
            	    case FALSE:
            	    case FLOAT:
            	    case IDENTIFIER:
            	    case INT:
            	    case INTEGER_LITERAL:
            	    case LONG:
            	    case NEW:
            	    case NULL:
            	    case OBJECT:
            	    case OPEN_PARENS:
            	    case OP_COALESCING:
            	    case REAL_LITERAL:
            	    case SBYTE:
            	    case SHORT:
            	    case STRING:
            	    case STRING_LITERAL:
            	    case THIS:
            	    case TRUE:
            	    case TYPEOF:
            	    case UINT:
            	    case ULONG:
            	    case UNCHECKED:
            	    case USHORT:
            	    case ASSIGNMENT_OPERATOR:
            	    case OBJECT_CREATION_EXPRESSION:
            	    case QUALIFIED_ALIAS_MEMBER:
            	    case SIMPLE_NAME:
            	    case UNARY_EXPRESSION:
            	        {
            	        alt19=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 19, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt19) {
            	        case 1 :
            	            // CSharp4Tree.g:195:16: ^( MEMBER_ACCESS primary_expression member_access2 )
            	            {
            	            match(input,MEMBER_ACCESS,FOLLOW_MEMBER_ACCESS_in_primary_expression1128); if (state.failed) return retval;

            	            match(input, Token.DOWN, null); if (state.failed) return retval;
            	            pushFollow(FOLLOW_primary_expression_in_primary_expression1130);
            	            primary_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            pushFollow(FOLLOW_member_access2_in_primary_expression1132);
            	            member_access2();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            match(input, Token.UP, null); if (state.failed) return retval;


            	            }
            	            break;
            	        case 2 :
            	            // CSharp4Tree.g:196:16: ^( METHOD_INVOCATION primary_expression ( method_invocation2 )? )
            	            {
            	            match(input,METHOD_INVOCATION,FOLLOW_METHOD_INVOCATION_in_primary_expression1151); if (state.failed) return retval;

            	            match(input, Token.DOWN, null); if (state.failed) return retval;
            	            pushFollow(FOLLOW_primary_expression_in_primary_expression1153);
            	            primary_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            // CSharp4Tree.g:196:55: ( method_invocation2 )?
            	            int alt18=2;
            	            int LA18_0 = input.LA(1);

            	            if ( (LA18_0==ARGUMENT) ) {
            	                alt18=1;
            	            }
            	            else if ( (LA18_0==UP) ) {
            	                int LA18_2 = input.LA(2);

            	                if ( (synpred38_CSharp4Tree()) ) {
            	                    alt18=1;
            	                }
            	            }
            	            switch (alt18) {
            	                case 1 :
            	                    // CSharp4Tree.g:196:55: method_invocation2
            	                    {
            	                    pushFollow(FOLLOW_method_invocation2_in_primary_expression1155);
            	                    method_invocation2();

            	                    state._fsp--;
            	                    if (state.failed) return retval;

            	                    }
            	                    break;

            	            }


            	            match(input, Token.UP, null); if (state.failed) return retval;


            	            }
            	            break;
            	        case 3 :
            	            // CSharp4Tree.g:197:16: ^( POST_INC primary_expression )
            	            {
            	            match(input,POST_INC,FOLLOW_POST_INC_in_primary_expression1175); if (state.failed) return retval;

            	            match(input, Token.DOWN, null); if (state.failed) return retval;
            	            pushFollow(FOLLOW_primary_expression_in_primary_expression1177);
            	            primary_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            match(input, Token.UP, null); if (state.failed) return retval;


            	            }
            	            break;
            	        case 4 :
            	            // CSharp4Tree.g:198:16: ^( POST_DEC primary_expression )
            	            {
            	            match(input,POST_DEC,FOLLOW_POST_DEC_in_primary_expression1196); if (state.failed) return retval;

            	            match(input, Token.DOWN, null); if (state.failed) return retval;
            	            pushFollow(FOLLOW_primary_expression_in_primary_expression1198);
            	            primary_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            match(input, Token.UP, null); if (state.failed) return retval;


            	            }
            	            break;
            	        case 5 :
            	            // CSharp4Tree.g:199:16: primary_expression ^( OP_PTR IDENTIFIER )
            	            {
            	            pushFollow(FOLLOW_primary_expression_in_primary_expression1216);
            	            primary_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            match(input,OP_PTR,FOLLOW_OP_PTR_in_primary_expression1219); if (state.failed) return retval;

            	            match(input, Token.DOWN, null); if (state.failed) return retval;
            	            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary_expression1222); if (state.failed) return retval;

            	            match(input, Token.UP, null); if (state.failed) return retval;


            	            }
            	            break;

            	    }


            	    // CSharp4Tree.g:202:6: ( ^( bracket_expression primary_expression ) )*
            	    loop20:
            	    do {
            	        int alt20=2;
            	        int LA20_0 = input.LA(1);

            	        if ( (LA20_0==ARRAY_ACCESS) ) {
            	            alt20=1;
            	        }


            	        switch (alt20) {
            	    	case 1 :
            	    	    // CSharp4Tree.g:202:8: ^( bracket_expression primary_expression )
            	    	    {
            	    	    pushFollow(FOLLOW_bracket_expression_in_primary_expression1249);
            	    	    bracket_expression();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;

            	    	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    	    pushFollow(FOLLOW_primary_expression_in_primary_expression1252);
            	    	    primary_expression();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;

            	    	    match(input, Token.UP, null); if (state.failed) return retval;


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop20;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, primary_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression"


    public static class primary_expression_start_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_expression_start"
    // CSharp4Tree.g:207:1: primary_expression_start : ( literal | simple_name | parenthesized_expression | predefined_type | qualified_alias_member | this_access | base_access | ^( object_creation_expression2 NEW type ) | NEW ( type ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer ) | anonymous_object_initializer | rank_specifier array_initializer ) | typeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    public final IntegrityVariablesParserC_CSharp4Tree.primary_expression_start_return primary_expression_start() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.primary_expression_start_return retval = new IntegrityVariablesParserC_CSharp4Tree.primary_expression_start_return();
        retval.start = input.LT(1);

        int primary_expression_start_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // CSharp4Tree.g:208:5: ( literal | simple_name | parenthesized_expression | predefined_type | qualified_alias_member | this_access | base_access | ^( object_creation_expression2 NEW type ) | NEW ( type ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer ) | anonymous_object_initializer | rank_specifier array_initializer ) | typeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
            int alt26=14;
            switch ( input.LA(1) ) {
            case CHARACTER_LITERAL:
            case FALSE:
            case INTEGER_LITERAL:
            case NULL:
            case REAL_LITERAL:
            case STRING_LITERAL:
            case TRUE:
                {
                alt26=1;
                }
                break;
            case SIMPLE_NAME:
                {
                alt26=2;
                }
                break;
            case IDENTIFIER:
            case OPEN_PARENS:
            case OP_COALESCING:
            case ASSIGNMENT_OPERATOR:
            case UNARY_EXPRESSION:
                {
                alt26=3;
                }
                break;
            case BOOL:
            case BYTE:
            case CHAR:
            case DECIMAL:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case OBJECT:
            case SBYTE:
            case SHORT:
            case STRING:
            case UINT:
            case ULONG:
            case USHORT:
                {
                alt26=4;
                }
                break;
            case QUALIFIED_ALIAS_MEMBER:
                {
                alt26=5;
                }
                break;
            case THIS:
                {
                alt26=6;
                }
                break;
            case BASE:
                {
                alt26=7;
                }
                break;
            case OBJECT_CREATION_EXPRESSION:
                {
                alt26=8;
                }
                break;
            case NEW:
                {
                alt26=9;
                }
                break;
            case TYPEOF:
                {
                alt26=10;
                }
                break;
            case CHECKED:
                {
                alt26=11;
                }
                break;
            case UNCHECKED:
                {
                alt26=12;
                }
                break;
            case DEFAULT:
                {
                alt26=13;
                }
                break;
            case DELEGATE:
                {
                alt26=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // CSharp4Tree.g:208:10: literal
                    {
                    pushFollow(FOLLOW_literal_in_primary_expression_start1289);
                    literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:209:10: simple_name
                    {
                    pushFollow(FOLLOW_simple_name_in_primary_expression_start1300);
                    simple_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:210:10: parenthesized_expression
                    {
                    pushFollow(FOLLOW_parenthesized_expression_in_primary_expression_start1311);
                    parenthesized_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:211:10: predefined_type
                    {
                    pushFollow(FOLLOW_predefined_type_in_primary_expression_start1322);
                    predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:212:10: qualified_alias_member
                    {
                    pushFollow(FOLLOW_qualified_alias_member_in_primary_expression_start1334);
                    qualified_alias_member();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:213:10: this_access
                    {
                    pushFollow(FOLLOW_this_access_in_primary_expression_start1347);
                    this_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:214:10: base_access
                    {
                    pushFollow(FOLLOW_base_access_in_primary_expression_start1358);
                    base_access();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:215:10: ^( object_creation_expression2 NEW type )
                    {
                    pushFollow(FOLLOW_object_creation_expression2_in_primary_expression_start1370);
                    object_creation_expression2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start1372); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_primary_expression_start1374);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:216:10: NEW ( type ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer ) | anonymous_object_initializer | rank_specifier array_initializer )
                    {
                    match(input,NEW,FOLLOW_NEW_in_primary_expression_start1386); if (state.failed) return retval;

                    // CSharp4Tree.g:216:14: ( type ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer ) | anonymous_object_initializer | rank_specifier array_initializer )
                    int alt25=3;
                    switch ( input.LA(1) ) {
                    case TYPE:
                        {
                        alt25=1;
                        }
                        break;
                    case OPEN_BRACE:
                        {
                        alt25=2;
                        }
                        break;
                    case RANK_SPECIFIER:
                        {
                        alt25=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 25, 0, input);

                        throw nvae;

                    }

                    switch (alt25) {
                        case 1 :
                            // CSharp4Tree.g:216:16: type ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer )
                            {
                            pushFollow(FOLLOW_type_in_primary_expression_start1390);
                            type();

                            state._fsp--;
                            if (state.failed) return retval;

                            // CSharp4Tree.g:216:21: ( object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifiers array_initializer )
                            int alt24=3;
                            switch ( input.LA(1) ) {
                            case OPEN_BRACE:
                                {
                                alt24=1;
                                }
                                break;
                            case OPEN_BRACKET:
                                {
                                alt24=2;
                                }
                                break;
                            case RANK_SPECIFIER:
                                {
                                alt24=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 24, 0, input);

                                throw nvae;

                            }

                            switch (alt24) {
                                case 1 :
                                    // CSharp4Tree.g:216:23: object_or_collection_initializer
                                    {
                                    pushFollow(FOLLOW_object_or_collection_initializer_in_primary_expression_start1394);
                                    object_or_collection_initializer();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // CSharp4Tree.g:217:23: OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )?
                                    {
                                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_primary_expression_start1418); if (state.failed) return retval;

                                    pushFollow(FOLLOW_expression_list_in_primary_expression_start1420);
                                    expression_list();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_primary_expression_start1422); if (state.failed) return retval;

                                    // CSharp4Tree.g:218:23: ( rank_specifiers )?
                                    int alt22=2;
                                    int LA22_0 = input.LA(1);

                                    if ( (LA22_0==RANK_SPECIFIER) ) {
                                        alt22=1;
                                    }
                                    switch (alt22) {
                                        case 1 :
                                            // CSharp4Tree.g:218:23: rank_specifiers
                                            {
                                            pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start1446);
                                            rank_specifiers();

                                            state._fsp--;
                                            if (state.failed) return retval;

                                            }
                                            break;

                                    }


                                    // CSharp4Tree.g:218:40: ( array_initializer )?
                                    int alt23=2;
                                    int LA23_0 = input.LA(1);

                                    if ( (LA23_0==OPEN_BRACE) ) {
                                        alt23=1;
                                    }
                                    switch (alt23) {
                                        case 1 :
                                            // CSharp4Tree.g:218:40: array_initializer
                                            {
                                            pushFollow(FOLLOW_array_initializer_in_primary_expression_start1449);
                                            array_initializer();

                                            state._fsp--;
                                            if (state.failed) return retval;

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 3 :
                                    // CSharp4Tree.g:219:23: rank_specifiers array_initializer
                                    {
                                    pushFollow(FOLLOW_rank_specifiers_in_primary_expression_start1474);
                                    rank_specifiers();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    pushFollow(FOLLOW_array_initializer_in_primary_expression_start1476);
                                    array_initializer();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // CSharp4Tree.g:221:17: anonymous_object_initializer
                            {
                            pushFollow(FOLLOW_anonymous_object_initializer_in_primary_expression_start1516);
                            anonymous_object_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;
                        case 3 :
                            // CSharp4Tree.g:222:17: rank_specifier array_initializer
                            {
                            pushFollow(FOLLOW_rank_specifier_in_primary_expression_start1534);
                            rank_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            pushFollow(FOLLOW_array_initializer_in_primary_expression_start1536);
                            array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:224:10: typeof_expression
                    {
                    pushFollow(FOLLOW_typeof_expression_in_primary_expression_start1563);
                    typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:225:10: checked_expression
                    {
                    pushFollow(FOLLOW_checked_expression_in_primary_expression_start1574);
                    checked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:226:10: unchecked_expression
                    {
                    pushFollow(FOLLOW_unchecked_expression_in_primary_expression_start1585);
                    unchecked_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // CSharp4Tree.g:227:10: default_value_expression
                    {
                    pushFollow(FOLLOW_default_value_expression_in_primary_expression_start1596);
                    default_value_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // CSharp4Tree.g:228:10: anonymous_method_expression
                    {
                    pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression_start1607);
                    anonymous_method_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, primary_expression_start_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"


    public static class bracket_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "bracket_expression"
    // CSharp4Tree.g:232:1: bracket_expression : ^( ARRAY_ACCESS expression_list ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.bracket_expression_return bracket_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.bracket_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.bracket_expression_return();
        retval.start = input.LT(1);

        int bracket_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // CSharp4Tree.g:233:5: ( ^( ARRAY_ACCESS expression_list ) )
            // CSharp4Tree.g:233:10: ^( ARRAY_ACCESS expression_list )
            {
            match(input,ARRAY_ACCESS,FOLLOW_ARRAY_ACCESS_in_bracket_expression1629); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_list_in_bracket_expression1631);
            expression_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, bracket_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracket_expression"


    public static class simple_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "simple_name"
    // CSharp4Tree.g:240:1: simple_name : ^( SIMPLE_NAME IDENTIFIER ( type_argument_list_opt )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.simple_name_return simple_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.simple_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.simple_name_return();
        retval.start = input.LT(1);

        int simple_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // CSharp4Tree.g:241:5: ( ^( SIMPLE_NAME IDENTIFIER ( type_argument_list_opt )? ) )
            // CSharp4Tree.g:241:10: ^( SIMPLE_NAME IDENTIFIER ( type_argument_list_opt )? )
            {
            match(input,SIMPLE_NAME,FOLLOW_SIMPLE_NAME_in_simple_name1657); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_simple_name1659); if (state.failed) return retval;

            // CSharp4Tree.g:241:35: ( type_argument_list_opt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==TYPE_ARGUMENT_LIST) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // CSharp4Tree.g:241:35: type_argument_list_opt
                    {
                    pushFollow(FOLLOW_type_argument_list_opt_in_simple_name1661);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, simple_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simple_name"


    public static class parenthesized_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parenthesized_expression"
    // CSharp4Tree.g:245:1: parenthesized_expression : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.parenthesized_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.parenthesized_expression_return();
        retval.start = input.LT(1);

        int parenthesized_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // CSharp4Tree.g:246:5: ( expression )
            // CSharp4Tree.g:246:10: expression
            {
            pushFollow(FOLLOW_expression_in_parenthesized_expression1686);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, parenthesized_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"


    public static class member_access_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access"
    // CSharp4Tree.g:250:1: member_access : primary_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_access_return member_access() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_access_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_access_return();
        retval.start = input.LT(1);

        int member_access_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // CSharp4Tree.g:251:5: ( primary_expression )
            // CSharp4Tree.g:251:10: primary_expression
            {
            pushFollow(FOLLOW_primary_expression_in_member_access1709);
            primary_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, member_access_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_access"


    public static class predefined_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "predefined_type"
    // CSharp4Tree.g:254:1: predefined_type : ( BOOL | BYTE | CHAR | DECIMAL | DOUBLE | FLOAT | INT | LONG | OBJECT | SBYTE | SHORT | STRING | UINT | ULONG | USHORT );
    public final IntegrityVariablesParserC_CSharp4Tree.predefined_type_return predefined_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.predefined_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.predefined_type_return();
        retval.start = input.LT(1);

        int predefined_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // CSharp4Tree.g:255:5: ( BOOL | BYTE | CHAR | DECIMAL | DOUBLE | FLOAT | INT | LONG | OBJECT | SBYTE | SHORT | STRING | UINT | ULONG | USHORT )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==BOOL||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DECIMAL||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==OBJECT||input.LA(1)==SBYTE||input.LA(1)==SHORT||input.LA(1)==STRING||(input.LA(1) >= UINT && input.LA(1) <= ULONG)||input.LA(1)==USHORT ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, predefined_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "predefined_type"


    public static class expression_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_list"
    // CSharp4Tree.g:272:1: expression_list : expression ( COMMA expression )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.expression_list_return expression_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.expression_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.expression_list_return();
        retval.start = input.LT(1);

        int expression_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // CSharp4Tree.g:273:5: ( expression ( COMMA expression )* )
            // CSharp4Tree.g:273:10: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_expression_list1905);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:273:21: ( COMMA expression )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // CSharp4Tree.g:273:22: COMMA expression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_expression_list1908); if (state.failed) return retval;

            	    pushFollow(FOLLOW_expression_in_expression_list1910);
            	    expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class this_access_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "this_access"
    // CSharp4Tree.g:276:1: this_access : THIS ;
    public final IntegrityVariablesParserC_CSharp4Tree.this_access_return this_access() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.this_access_return retval = new IntegrityVariablesParserC_CSharp4Tree.this_access_return();
        retval.start = input.LT(1);

        int this_access_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // CSharp4Tree.g:277:5: ( THIS )
            // CSharp4Tree.g:277:10: THIS
            {
            match(input,THIS,FOLLOW_THIS_in_this_access1933); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, this_access_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "this_access"


    public static class base_access_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "base_access"
    // CSharp4Tree.g:281:1: base_access : ( BASE IDENTIFIER type_argument_list_opt | BASE OPEN_BRACKET expression_list CLOSE_BRACKET );
    public final IntegrityVariablesParserC_CSharp4Tree.base_access_return base_access() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.base_access_return retval = new IntegrityVariablesParserC_CSharp4Tree.base_access_return();
        retval.start = input.LT(1);

        int base_access_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // CSharp4Tree.g:282:5: ( BASE IDENTIFIER type_argument_list_opt | BASE OPEN_BRACKET expression_list CLOSE_BRACKET )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==BASE) ) {
                int LA29_1 = input.LA(2);

                if ( (LA29_1==IDENTIFIER) ) {
                    alt29=1;
                }
                else if ( (LA29_1==OPEN_BRACKET) ) {
                    alt29=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // CSharp4Tree.g:282:10: BASE IDENTIFIER type_argument_list_opt
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access1955); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_access1957); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_argument_list_opt_in_base_access1959);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:283:10: BASE OPEN_BRACKET expression_list CLOSE_BRACKET
                    {
                    match(input,BASE,FOLLOW_BASE_in_base_access1970); if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_base_access1972); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_base_access1974);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_base_access1976); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, base_access_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "base_access"


    public static class object_creation_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression"
    // CSharp4Tree.g:287:1: object_creation_expression : NEW type ( OPEN_PARENS ( argument_list )? CLOSE_PARENS ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.object_creation_expression_return object_creation_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.object_creation_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.object_creation_expression_return();
        retval.start = input.LT(1);

        int object_creation_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // CSharp4Tree.g:288:5: ( NEW type ( OPEN_PARENS ( argument_list )? CLOSE_PARENS ( object_or_collection_initializer )? | object_or_collection_initializer ) )
            // CSharp4Tree.g:288:10: NEW type ( OPEN_PARENS ( argument_list )? CLOSE_PARENS ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
            match(input,NEW,FOLLOW_NEW_in_object_creation_expression1999); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_object_creation_expression2001);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:288:19: ( OPEN_PARENS ( argument_list )? CLOSE_PARENS ( object_or_collection_initializer )? | object_or_collection_initializer )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==OPEN_PARENS) ) {
                alt32=1;
            }
            else if ( (LA32_0==OPEN_BRACE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // CSharp4Tree.g:288:21: OPEN_PARENS ( argument_list )? CLOSE_PARENS ( object_or_collection_initializer )?
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_object_creation_expression2005); if (state.failed) return retval;

                    // CSharp4Tree.g:288:33: ( argument_list )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==ARGUMENT) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // CSharp4Tree.g:288:33: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_object_creation_expression2007);
                            argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_object_creation_expression2010); if (state.failed) return retval;

                    // CSharp4Tree.g:289:21: ( object_or_collection_initializer )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==OPEN_BRACE) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // CSharp4Tree.g:289:21: object_or_collection_initializer
                            {
                            pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2032);
                            object_or_collection_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:290:21: object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2055);
                    object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, object_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"


    public static class object_or_collection_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_or_collection_initializer"
    // CSharp4Tree.g:295:1: object_or_collection_initializer : ( object_initializer | collection_initializer );
    public final IntegrityVariablesParserC_CSharp4Tree.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.object_or_collection_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.object_or_collection_initializer_return();
        retval.start = input.LT(1);

        int object_or_collection_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // CSharp4Tree.g:296:5: ( object_initializer | collection_initializer )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==OPEN_BRACE) ) {
                switch ( input.LA(2) ) {
                case CLOSE_BRACE:
                    {
                    alt33=1;
                    }
                    break;
                case IDENTIFIER:
                    {
                    int LA33_3 = input.LA(3);

                    if ( (LA33_3==ASSIGNMENT) ) {
                        int LA33_5 = input.LA(4);

                        if ( (LA33_5==GT) ) {
                            alt33=2;
                        }
                        else if ( (LA33_5==IDENTIFIER||LA33_5==OPEN_BRACE||LA33_5==OPEN_PARENS||LA33_5==OP_COALESCING||LA33_5==ASSIGNMENT_OPERATOR||LA33_5==UNARY_EXPRESSION) ) {
                            alt33=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 33, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA33_3==IDENTIFIER||LA33_3==TYPE) ) {
                        alt33=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 33, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case OPEN_BRACE:
                case OPEN_PARENS:
                case OP_COALESCING:
                case UNARY_EXPRESSION:
                    {
                    alt33=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // CSharp4Tree.g:296:10: object_initializer
                    {
                    pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer2098);
                    object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:297:10: collection_initializer
                    {
                    pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer2109);
                    collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, object_or_collection_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"


    public static class object_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_initializer"
    // CSharp4Tree.g:301:1: object_initializer : ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE member_initializer_list ( COMMA )? CLOSE_BRACE );
    public final IntegrityVariablesParserC_CSharp4Tree.object_initializer_return object_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.object_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.object_initializer_return();
        retval.start = input.LT(1);

        int object_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // CSharp4Tree.g:302:5: ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE member_initializer_list ( COMMA )? CLOSE_BRACE )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==OPEN_BRACE) ) {
                int LA35_1 = input.LA(2);

                if ( (LA35_1==CLOSE_BRACE) ) {
                    alt35=1;
                }
                else if ( (LA35_1==IDENTIFIER) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // CSharp4Tree.g:302:10: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer2132); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer2134); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:303:10: OPEN_BRACE member_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_object_initializer2145); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_initializer_list_in_object_initializer2147);
                    member_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:303:45: ( COMMA )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==COMMA) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // CSharp4Tree.g:303:45: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_object_initializer2149); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_object_initializer2152); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, object_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_initializer"


    public static class member_initializer_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer_list"
    // CSharp4Tree.g:306:1: member_initializer_list : member_initializer ( COMMA member_initializer )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_initializer_list_return member_initializer_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_initializer_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_initializer_list_return();
        retval.start = input.LT(1);

        int member_initializer_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // CSharp4Tree.g:307:5: ( member_initializer ( COMMA member_initializer )* )
            // CSharp4Tree.g:307:10: member_initializer ( COMMA member_initializer )*
            {
            pushFollow(FOLLOW_member_initializer_in_member_initializer_list2173);
            member_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:307:29: ( COMMA member_initializer )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==COMMA) ) {
                    int LA36_1 = input.LA(2);

                    if ( (LA36_1==IDENTIFIER) ) {
                        alt36=1;
                    }


                }


                switch (alt36) {
            	case 1 :
            	    // CSharp4Tree.g:307:30: COMMA member_initializer
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_member_initializer_list2176); if (state.failed) return retval;

            	    pushFollow(FOLLOW_member_initializer_in_member_initializer_list2178);
            	    member_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, member_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"


    public static class member_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_initializer"
    // CSharp4Tree.g:310:1: member_initializer : IDENTIFIER ASSIGNMENT initializer_value ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_initializer_return member_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_initializer_return();
        retval.start = input.LT(1);

        int member_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // CSharp4Tree.g:311:5: ( IDENTIFIER ASSIGNMENT initializer_value )
            // CSharp4Tree.g:311:10: IDENTIFIER ASSIGNMENT initializer_value
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_initializer2201); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_initializer2203); if (state.failed) return retval;

            pushFollow(FOLLOW_initializer_value_in_member_initializer2205);
            initializer_value();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, member_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_initializer"


    public static class initializer_value_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "initializer_value"
    // CSharp4Tree.g:314:1: initializer_value : ( expression | object_or_collection_initializer );
    public final IntegrityVariablesParserC_CSharp4Tree.initializer_value_return initializer_value() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.initializer_value_return retval = new IntegrityVariablesParserC_CSharp4Tree.initializer_value_return();
        retval.start = input.LT(1);

        int initializer_value_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // CSharp4Tree.g:315:5: ( expression | object_or_collection_initializer )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==IDENTIFIER||LA37_0==OPEN_PARENS||LA37_0==OP_COALESCING||LA37_0==ASSIGNMENT_OPERATOR||LA37_0==UNARY_EXPRESSION) ) {
                alt37=1;
            }
            else if ( (LA37_0==OPEN_BRACE) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // CSharp4Tree.g:315:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_initializer_value2226);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:316:10: object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value2237);
                    object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, initializer_value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_value"


    public static class collection_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "collection_initializer"
    // CSharp4Tree.g:320:1: collection_initializer : OPEN_BRACE element_initializer_list ( COMMA )? CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.collection_initializer_return collection_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.collection_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.collection_initializer_return();
        retval.start = input.LT(1);

        int collection_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // CSharp4Tree.g:321:5: ( OPEN_BRACE element_initializer_list ( COMMA )? CLOSE_BRACE )
            // CSharp4Tree.g:321:10: OPEN_BRACE element_initializer_list ( COMMA )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection_initializer2260); if (state.failed) return retval;

            pushFollow(FOLLOW_element_initializer_list_in_collection_initializer2262);
            element_initializer_list();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:321:46: ( COMMA )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==COMMA) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // CSharp4Tree.g:321:46: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_collection_initializer2264); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection_initializer2267); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, collection_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "collection_initializer"


    public static class element_initializer_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer_list"
    // CSharp4Tree.g:324:1: element_initializer_list : element_initializer ( COMMA element_initializer )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.element_initializer_list_return element_initializer_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.element_initializer_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.element_initializer_list_return();
        retval.start = input.LT(1);

        int element_initializer_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // CSharp4Tree.g:325:5: ( element_initializer ( COMMA element_initializer )* )
            // CSharp4Tree.g:325:10: element_initializer ( COMMA element_initializer )*
            {
            pushFollow(FOLLOW_element_initializer_in_element_initializer_list2288);
            element_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:325:30: ( COMMA element_initializer )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==COMMA) ) {
                    int LA39_1 = input.LA(2);

                    if ( (LA39_1==IDENTIFIER||LA39_1==OPEN_BRACE||LA39_1==OPEN_PARENS||LA39_1==OP_COALESCING||LA39_1==UNARY_EXPRESSION) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // CSharp4Tree.g:325:31: COMMA element_initializer
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_element_initializer_list2291); if (state.failed) return retval;

            	    pushFollow(FOLLOW_element_initializer_in_element_initializer_list2293);
            	    element_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, element_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"


    public static class element_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "element_initializer"
    // CSharp4Tree.g:328:1: element_initializer : ( non_assignment_expression | OPEN_BRACE expression_list CLOSE_BRACE );
    public final IntegrityVariablesParserC_CSharp4Tree.element_initializer_return element_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.element_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.element_initializer_return();
        retval.start = input.LT(1);

        int element_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // CSharp4Tree.g:329:5: ( non_assignment_expression | OPEN_BRACE expression_list CLOSE_BRACE )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==IDENTIFIER||LA40_0==OPEN_PARENS||LA40_0==OP_COALESCING||LA40_0==UNARY_EXPRESSION) ) {
                alt40=1;
            }
            else if ( (LA40_0==OPEN_BRACE) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // CSharp4Tree.g:329:10: non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_element_initializer2316);
                    non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:330:10: OPEN_BRACE expression_list CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_element_initializer2327); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_element_initializer2329);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_element_initializer2331); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, element_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "element_initializer"


    public static class array_creation_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_creation_expression"
    // CSharp4Tree.g:333:1: array_creation_expression : NEW ( array_type array_initializer | non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifier array_initializer ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.array_creation_expression_return array_creation_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.array_creation_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.array_creation_expression_return();
        retval.start = input.LT(1);

        int array_creation_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // CSharp4Tree.g:334:5: ( NEW ( array_type array_initializer | non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifier array_initializer ) )
            // CSharp4Tree.g:334:10: NEW ( array_type array_initializer | non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifier array_initializer )
            {
            match(input,NEW,FOLLOW_NEW_in_array_creation_expression2352); if (state.failed) return retval;

            // CSharp4Tree.g:334:14: ( array_type array_initializer | non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? | rank_specifier array_initializer )
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==TYPE) ) {
                int LA43_1 = input.LA(2);

                if ( (synpred91_CSharp4Tree()) ) {
                    alt43=1;
                }
                else if ( (synpred94_CSharp4Tree()) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA43_0==RANK_SPECIFIER) ) {
                alt43=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // CSharp4Tree.g:334:16: array_type array_initializer
                    {
                    pushFollow(FOLLOW_array_type_in_array_creation_expression2356);
                    array_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_array_creation_expression2358);
                    array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:335:16: non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )?
                    {
                    pushFollow(FOLLOW_non_array_type_in_array_creation_expression2375);
                    non_array_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_array_creation_expression2377); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_array_creation_expression2379);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_array_creation_expression2381); if (state.failed) return retval;

                    // CSharp4Tree.g:336:16: ( rank_specifiers )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==RANK_SPECIFIER) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // CSharp4Tree.g:336:16: rank_specifiers
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression2398);
                            rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:336:33: ( array_initializer )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==OPEN_BRACE) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // CSharp4Tree.g:336:33: array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression2401);
                            array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:337:16: rank_specifier array_initializer
                    {
                    pushFollow(FOLLOW_rank_specifier_in_array_creation_expression2419);
                    rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_array_initializer_in_array_creation_expression2421);
                    array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, array_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"


    public static class delegate_creation_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_creation_expression"
    // CSharp4Tree.g:342:1: delegate_creation_expression : NEW delegate_type OPEN_PARENS expression CLOSE_PARENS ;
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_creation_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_creation_expression_return();
        retval.start = input.LT(1);

        int delegate_creation_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // CSharp4Tree.g:343:5: ( NEW delegate_type OPEN_PARENS expression CLOSE_PARENS )
            // CSharp4Tree.g:343:10: NEW delegate_type OPEN_PARENS expression CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_delegate_creation_expression2459); if (state.failed) return retval;

            pushFollow(FOLLOW_delegate_type_in_delegate_creation_expression2461);
            delegate_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_creation_expression2463); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_delegate_creation_expression2465);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_creation_expression2467); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, delegate_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"


    public static class anonymous_object_creation_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_creation_expression"
    // CSharp4Tree.g:347:1: anonymous_object_creation_expression : NEW anonymous_object_initializer ;
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_object_creation_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);

        int anonymous_object_creation_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // CSharp4Tree.g:348:5: ( NEW anonymous_object_initializer )
            // CSharp4Tree.g:348:10: NEW anonymous_object_initializer
            {
            match(input,NEW,FOLLOW_NEW_in_anonymous_object_creation_expression2490); if (state.failed) return retval;

            pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2492);
            anonymous_object_initializer();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, anonymous_object_creation_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"


    public static class anonymous_object_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_object_initializer"
    // CSharp4Tree.g:352:1: anonymous_object_initializer : ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE member_declarator_list ( COMMA )? CLOSE_BRACE );
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_object_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_object_initializer_return();
        retval.start = input.LT(1);

        int anonymous_object_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // CSharp4Tree.g:353:5: ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE member_declarator_list ( COMMA )? CLOSE_BRACE )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==OPEN_BRACE) ) {
                int LA45_1 = input.LA(2);

                if ( (LA45_1==CLOSE_BRACE) ) {
                    alt45=1;
                }
                else if ( (LA45_1==BASE||LA45_1==BOOL||LA45_1==BYTE||(LA45_1 >= CHAR && LA45_1 <= CHECKED)||LA45_1==DECIMAL||(LA45_1 >= DEFAULT && LA45_1 <= DELEGATE)||LA45_1==DOUBLE||LA45_1==FALSE||LA45_1==FLOAT||LA45_1==IDENTIFIER||(LA45_1 >= INT && LA45_1 <= INTEGER_LITERAL)||LA45_1==LONG||LA45_1==NEW||LA45_1==NULL||LA45_1==OBJECT||LA45_1==OPEN_PARENS||LA45_1==OP_COALESCING||LA45_1==REAL_LITERAL||LA45_1==SBYTE||LA45_1==SHORT||(LA45_1 >= STRING && LA45_1 <= STRING_LITERAL)||LA45_1==THIS||LA45_1==TRUE||LA45_1==TYPEOF||(LA45_1 >= UINT && LA45_1 <= UNCHECKED)||LA45_1==USHORT||LA45_1==ASSIGNMENT_OPERATOR||LA45_1==OBJECT_CREATION_EXPRESSION||LA45_1==QUALIFIED_ALIAS_MEMBER||LA45_1==SIMPLE_NAME||LA45_1==UNARY_EXPRESSION) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // CSharp4Tree.g:353:10: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2515); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2517); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:354:10: OPEN_BRACE member_declarator_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2528); if (state.failed) return retval;

                    pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer2530);
                    member_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:354:44: ( COMMA )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==COMMA) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // CSharp4Tree.g:354:44: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_anonymous_object_initializer2532); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2535); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, anonymous_object_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"


    public static class member_declarator_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator_list"
    // CSharp4Tree.g:357:1: member_declarator_list : member_declarator ( COMMA member_declarator )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_declarator_list_return member_declarator_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_declarator_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_declarator_list_return();
        retval.start = input.LT(1);

        int member_declarator_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // CSharp4Tree.g:358:5: ( member_declarator ( COMMA member_declarator )* )
            // CSharp4Tree.g:358:10: member_declarator ( COMMA member_declarator )*
            {
            pushFollow(FOLLOW_member_declarator_in_member_declarator_list2556);
            member_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:358:28: ( COMMA member_declarator )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==COMMA) ) {
                    int LA46_1 = input.LA(2);

                    if ( (LA46_1==BASE||LA46_1==BOOL||LA46_1==BYTE||(LA46_1 >= CHAR && LA46_1 <= CHECKED)||LA46_1==DECIMAL||(LA46_1 >= DEFAULT && LA46_1 <= DELEGATE)||LA46_1==DOUBLE||LA46_1==FALSE||LA46_1==FLOAT||LA46_1==IDENTIFIER||(LA46_1 >= INT && LA46_1 <= INTEGER_LITERAL)||LA46_1==LONG||LA46_1==NEW||LA46_1==NULL||LA46_1==OBJECT||LA46_1==OPEN_PARENS||LA46_1==OP_COALESCING||LA46_1==REAL_LITERAL||LA46_1==SBYTE||LA46_1==SHORT||(LA46_1 >= STRING && LA46_1 <= STRING_LITERAL)||LA46_1==THIS||LA46_1==TRUE||LA46_1==TYPEOF||(LA46_1 >= UINT && LA46_1 <= UNCHECKED)||LA46_1==USHORT||LA46_1==ASSIGNMENT_OPERATOR||LA46_1==OBJECT_CREATION_EXPRESSION||LA46_1==QUALIFIED_ALIAS_MEMBER||LA46_1==SIMPLE_NAME||LA46_1==UNARY_EXPRESSION) ) {
                        alt46=1;
                    }


                }


                switch (alt46) {
            	case 1 :
            	    // CSharp4Tree.g:358:29: COMMA member_declarator
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_member_declarator_list2559); if (state.failed) return retval;

            	    pushFollow(FOLLOW_member_declarator_in_member_declarator_list2561);
            	    member_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, member_declarator_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"


    public static class member_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_declarator"
    // CSharp4Tree.g:361:1: member_declarator : ( primary_expression | IDENTIFIER ASSIGNMENT expression );
    public final IntegrityVariablesParserC_CSharp4Tree.member_declarator_return member_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_declarator_return();
        retval.start = input.LT(1);

        int member_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // CSharp4Tree.g:362:5: ( primary_expression | IDENTIFIER ASSIGNMENT expression )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==BASE||LA47_0==BOOL||LA47_0==BYTE||(LA47_0 >= CHAR && LA47_0 <= CHECKED)||LA47_0==DECIMAL||(LA47_0 >= DEFAULT && LA47_0 <= DELEGATE)||LA47_0==DOUBLE||LA47_0==FALSE||LA47_0==FLOAT||(LA47_0 >= INT && LA47_0 <= INTEGER_LITERAL)||LA47_0==LONG||LA47_0==NEW||LA47_0==NULL||LA47_0==OBJECT||LA47_0==OPEN_PARENS||LA47_0==OP_COALESCING||LA47_0==REAL_LITERAL||LA47_0==SBYTE||LA47_0==SHORT||(LA47_0 >= STRING && LA47_0 <= STRING_LITERAL)||LA47_0==THIS||LA47_0==TRUE||LA47_0==TYPEOF||(LA47_0 >= UINT && LA47_0 <= UNCHECKED)||LA47_0==USHORT||LA47_0==ASSIGNMENT_OPERATOR||LA47_0==OBJECT_CREATION_EXPRESSION||LA47_0==QUALIFIED_ALIAS_MEMBER||LA47_0==SIMPLE_NAME||LA47_0==UNARY_EXPRESSION) ) {
                alt47=1;
            }
            else if ( (LA47_0==IDENTIFIER) ) {
                int LA47_2 = input.LA(2);

                if ( (LA47_2==ASSIGNMENT) ) {
                    int LA47_3 = input.LA(3);

                    if ( (LA47_3==GT) ) {
                        alt47=1;
                    }
                    else if ( (LA47_3==IDENTIFIER||LA47_3==OPEN_PARENS||LA47_3==OP_COALESCING||LA47_3==ASSIGNMENT_OPERATOR||LA47_3==UNARY_EXPRESSION) ) {
                        alt47=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 47, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA47_2==IDENTIFIER||LA47_2==TYPE) ) {
                    alt47=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // CSharp4Tree.g:362:10: primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_member_declarator2584);
                    primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:363:10: IDENTIFIER ASSIGNMENT expression
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_declarator2595); if (state.failed) return retval;

                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_member_declarator2597); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_member_declarator2599);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, member_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_declarator"


    public static class typeof_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typeof_expression"
    // CSharp4Tree.g:366:1: typeof_expression : TYPEOF OPEN_PARENS ( unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.typeof_expression_return typeof_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.typeof_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.typeof_expression_return();
        retval.start = input.LT(1);

        int typeof_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // CSharp4Tree.g:367:5: ( TYPEOF OPEN_PARENS ( unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS ) )
            // CSharp4Tree.g:367:10: TYPEOF OPEN_PARENS ( unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS )
            {
            match(input,TYPEOF,FOLLOW_TYPEOF_in_typeof_expression2620); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_typeof_expression2622); if (state.failed) return retval;

            // CSharp4Tree.g:368:3: ( unbound_type_name CLOSE_PARENS | type CLOSE_PARENS | VOID CLOSE_PARENS )
            int alt48=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt48=1;
                }
                break;
            case TYPE:
                {
                alt48=2;
                }
                break;
            case VOID:
                {
                alt48=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // CSharp4Tree.g:368:5: unbound_type_name CLOSE_PARENS
                    {
                    pushFollow(FOLLOW_unbound_type_name_in_typeof_expression2628);
                    unbound_type_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression2630); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:369:5: type CLOSE_PARENS
                    {
                    pushFollow(FOLLOW_type_in_typeof_expression2636);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression2638); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:370:5: VOID CLOSE_PARENS
                    {
                    match(input,VOID,FOLLOW_VOID_in_typeof_expression2644); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_typeof_expression2646); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, typeof_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeof_expression"


    public static class unbound_type_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unbound_type_name"
    // CSharp4Tree.g:374:1: unbound_type_name : IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.unbound_type_name_return unbound_type_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unbound_type_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.unbound_type_name_return();
        retval.start = input.LT(1);

        int unbound_type_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // CSharp4Tree.g:375:5: ( IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )* )
            // CSharp4Tree.g:375:10: IDENTIFIER ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? ) ( DOT IDENTIFIER ( generic_dimension_specifier )? )*
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name2671); if (state.failed) return retval;

            // CSharp4Tree.g:375:21: ( ( generic_dimension_specifier )? | DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )? )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==CLOSE_PARENS||LA51_0==DOT||LA51_0==LT) ) {
                alt51=1;
            }
            else if ( (LA51_0==DOUBLE_COLON) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // CSharp4Tree.g:375:23: ( generic_dimension_specifier )?
                    {
                    // CSharp4Tree.g:375:23: ( generic_dimension_specifier )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==LT) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // CSharp4Tree.g:375:23: generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2675);
                            generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:376:23: DOUBLE_COLON IDENTIFIER ( generic_dimension_specifier )?
                    {
                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_unbound_type_name2700); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name2702); if (state.failed) return retval;

                    // CSharp4Tree.g:376:47: ( generic_dimension_specifier )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==LT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // CSharp4Tree.g:376:47: generic_dimension_specifier
                            {
                            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2704);
                            generic_dimension_specifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            // CSharp4Tree.g:378:10: ( DOT IDENTIFIER ( generic_dimension_specifier )? )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==DOT) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // CSharp4Tree.g:378:11: DOT IDENTIFIER ( generic_dimension_specifier )?
            	    {
            	    match(input,DOT,FOLLOW_DOT_in_unbound_type_name2739); if (state.failed) return retval;

            	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unbound_type_name2741); if (state.failed) return retval;

            	    // CSharp4Tree.g:378:26: ( generic_dimension_specifier )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==LT) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // CSharp4Tree.g:378:26: generic_dimension_specifier
            	            {
            	            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2743);
            	            generic_dimension_specifier();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, unbound_type_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"


    public static class generic_dimension_specifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "generic_dimension_specifier"
    // CSharp4Tree.g:381:1: generic_dimension_specifier : LT ( commas )? GT ;
    public final IntegrityVariablesParserC_CSharp4Tree.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.generic_dimension_specifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.generic_dimension_specifier_return();
        retval.start = input.LT(1);

        int generic_dimension_specifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // CSharp4Tree.g:382:5: ( LT ( commas )? GT )
            // CSharp4Tree.g:382:10: LT ( commas )? GT
            {
            match(input,LT,FOLLOW_LT_in_generic_dimension_specifier2767); if (state.failed) return retval;

            // CSharp4Tree.g:382:13: ( commas )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COMMA) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // CSharp4Tree.g:382:13: commas
                    {
                    pushFollow(FOLLOW_commas_in_generic_dimension_specifier2769);
                    commas();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,GT,FOLLOW_GT_in_generic_dimension_specifier2772); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, generic_dimension_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"


    public static class commas_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "commas"
    // CSharp4Tree.g:385:1: commas : ( COMMA )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.commas_return commas() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.commas_return retval = new IntegrityVariablesParserC_CSharp4Tree.commas_return();
        retval.start = input.LT(1);

        int commas_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // CSharp4Tree.g:386:5: ( ( COMMA )+ )
            // CSharp4Tree.g:386:10: ( COMMA )+
            {
            // CSharp4Tree.g:386:10: ( COMMA )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // CSharp4Tree.g:386:10: COMMA
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_commas2793); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, commas_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "commas"


    public static class checked_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_expression"
    // CSharp4Tree.g:389:1: checked_expression : ^( CHECKED expression ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.checked_expression_return checked_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.checked_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.checked_expression_return();
        retval.start = input.LT(1);

        int checked_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // CSharp4Tree.g:390:5: ( ^( CHECKED expression ) )
            // CSharp4Tree.g:390:10: ^( CHECKED expression )
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_expression2816); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_checked_expression2818);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, checked_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "checked_expression"


    public static class unchecked_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_expression"
    // CSharp4Tree.g:393:1: unchecked_expression : ^( UNCHECKED expression ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.unchecked_expression_return unchecked_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unchecked_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.unchecked_expression_return();
        retval.start = input.LT(1);

        int unchecked_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // CSharp4Tree.g:394:5: ( ^( UNCHECKED expression ) )
            // CSharp4Tree.g:394:10: ^( UNCHECKED expression )
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_expression2841); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_unchecked_expression2843);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, unchecked_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"


    public static class default_value_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_value_expression"
    // CSharp4Tree.g:397:1: default_value_expression : ^( DEFAULT type ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.default_value_expression_return default_value_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.default_value_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.default_value_expression_return();
        retval.start = input.LT(1);

        int default_value_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // CSharp4Tree.g:398:5: ( ^( DEFAULT type ) )
            // CSharp4Tree.g:398:10: ^( DEFAULT type )
            {
            match(input,DEFAULT,FOLLOW_DEFAULT_in_default_value_expression2866); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_default_value_expression2868);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, default_value_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "default_value_expression"


    public static class unary_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression"
    // CSharp4Tree.g:401:1: unary_expression : ^( UNARY_EXPRESSION unary_expression2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.unary_expression_return unary_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unary_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.unary_expression_return();
        retval.start = input.LT(1);

        int unary_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // CSharp4Tree.g:402:5: ( ^( UNARY_EXPRESSION unary_expression2 ) )
            // CSharp4Tree.g:402:10: ^( UNARY_EXPRESSION unary_expression2 )
            {
            match(input,UNARY_EXPRESSION,FOLLOW_UNARY_EXPRESSION_in_unary_expression2891); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_unary_expression2_in_unary_expression2893);
            unary_expression2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, unary_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_expression"


    public static class unary_expression2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_expression2"
    // CSharp4Tree.g:405:1: unary_expression2 : ( cast_expression | primary_expression | PLUS unary_expression | MINUS unary_expression | ^( BOOL_NOT unary_expression ) | TILDE unary_expression | pre_increment_expression | pre_decrement_expression );
    public final IntegrityVariablesParserC_CSharp4Tree.unary_expression2_return unary_expression2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unary_expression2_return retval = new IntegrityVariablesParserC_CSharp4Tree.unary_expression2_return();
        retval.start = input.LT(1);

        int unary_expression2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // CSharp4Tree.g:406:5: ( cast_expression | primary_expression | PLUS unary_expression | MINUS unary_expression | ^( BOOL_NOT unary_expression ) | TILDE unary_expression | pre_increment_expression | pre_decrement_expression )
            int alt56=8;
            switch ( input.LA(1) ) {
            case CAST_EXPRESSION:
                {
                alt56=1;
                }
                break;
            case BASE:
            case BOOL:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case CHECKED:
            case DECIMAL:
            case DEFAULT:
            case DELEGATE:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case IDENTIFIER:
            case INT:
            case INTEGER_LITERAL:
            case LONG:
            case NEW:
            case NULL:
            case OBJECT:
            case OPEN_PARENS:
            case OP_COALESCING:
            case REAL_LITERAL:
            case SBYTE:
            case SHORT:
            case STRING:
            case STRING_LITERAL:
            case THIS:
            case TRUE:
            case TYPEOF:
            case UINT:
            case ULONG:
            case UNCHECKED:
            case USHORT:
            case ASSIGNMENT_OPERATOR:
            case OBJECT_CREATION_EXPRESSION:
            case QUALIFIED_ALIAS_MEMBER:
            case SIMPLE_NAME:
            case UNARY_EXPRESSION:
                {
                alt56=2;
                }
                break;
            case PLUS:
                {
                alt56=3;
                }
                break;
            case MINUS:
                {
                alt56=4;
                }
                break;
            case BOOL_NOT:
                {
                alt56=5;
                }
                break;
            case TILDE:
                {
                alt56=6;
                }
                break;
            case OP_INC:
                {
                alt56=7;
                }
                break;
            case OP_DEC:
                {
                alt56=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }

            switch (alt56) {
                case 1 :
                    // CSharp4Tree.g:406:10: cast_expression
                    {
                    pushFollow(FOLLOW_cast_expression_in_unary_expression22914);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:407:10: primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_unary_expression22925);
                    primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:408:10: PLUS unary_expression
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_unary_expression22936); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression22938);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:409:10: MINUS unary_expression
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_unary_expression22949); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression22951);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:410:10: ^( BOOL_NOT unary_expression )
                    {
                    match(input,BOOL_NOT,FOLLOW_BOOL_NOT_in_unary_expression22963); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_unary_expression_in_unary_expression22965);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:411:10: TILDE unary_expression
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unary_expression22977); if (state.failed) return retval;

                    pushFollow(FOLLOW_unary_expression_in_unary_expression22979);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:412:10: pre_increment_expression
                    {
                    pushFollow(FOLLOW_pre_increment_expression_in_unary_expression22990);
                    pre_increment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:413:10: pre_decrement_expression
                    {
                    pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression23001);
                    pre_decrement_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, unary_expression2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_expression2"


    public static class scan_for_cast_generic_precedence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "scan_for_cast_generic_precedence"
    // CSharp4Tree.g:420:1: scan_for_cast_generic_precedence : OPEN_PARENS type CLOSE_PARENS cast_disambiguation_token ;
    public final IntegrityVariablesParserC_CSharp4Tree.scan_for_cast_generic_precedence_return scan_for_cast_generic_precedence() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.scan_for_cast_generic_precedence_return retval = new IntegrityVariablesParserC_CSharp4Tree.scan_for_cast_generic_precedence_return();
        retval.start = input.LT(1);

        int scan_for_cast_generic_precedence_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // CSharp4Tree.g:421:5: ( OPEN_PARENS type CLOSE_PARENS cast_disambiguation_token )
            // CSharp4Tree.g:421:10: OPEN_PARENS type CLOSE_PARENS cast_disambiguation_token
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence3025); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_scan_for_cast_generic_precedence3027);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence3029); if (state.failed) return retval;

            pushFollow(FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence3031);
            cast_disambiguation_token();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, scan_for_cast_generic_precedence_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "scan_for_cast_generic_precedence"


    public static class cast_disambiguation_token_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_disambiguation_token"
    // CSharp4Tree.g:426:1: cast_disambiguation_token : ( TILDE | BANG | OPEN_PARENS | IDENTIFIER | literal | ABSTRACT | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | LOCK | LONG | NAMESPACE | NEW | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.cast_disambiguation_token_return cast_disambiguation_token() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.cast_disambiguation_token_return retval = new IntegrityVariablesParserC_CSharp4Tree.cast_disambiguation_token_return();
        retval.start = input.LT(1);

        int cast_disambiguation_token_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // CSharp4Tree.g:427:5: ( ( TILDE | BANG | OPEN_PARENS | IDENTIFIER | literal | ABSTRACT | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | LOCK | LONG | NAMESPACE | NEW | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE ) )
            // CSharp4Tree.g:427:7: ( TILDE | BANG | OPEN_PARENS | IDENTIFIER | literal | ABSTRACT | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | LOCK | LONG | NAMESPACE | NEW | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE )
            {
            // CSharp4Tree.g:427:7: ( TILDE | BANG | OPEN_PARENS | IDENTIFIER | literal | ABSTRACT | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | LOCK | LONG | NAMESPACE | NEW | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE )
            int alt57=76;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // CSharp4Tree.g:427:8: TILDE
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_cast_disambiguation_token3051); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:427:16: BANG
                    {
                    match(input,BANG,FOLLOW_BANG_in_cast_disambiguation_token3055); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:427:23: OPEN_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_cast_disambiguation_token3059); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:427:37: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_cast_disambiguation_token3063); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:427:50: literal
                    {
                    pushFollow(FOLLOW_literal_in_cast_disambiguation_token3067);
                    literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:427:60: ABSTRACT
                    {
                    match(input,ABSTRACT,FOLLOW_ABSTRACT_in_cast_disambiguation_token3071); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:427:71: BASE
                    {
                    match(input,BASE,FOLLOW_BASE_in_cast_disambiguation_token3075); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:427:78: BOOL
                    {
                    match(input,BOOL,FOLLOW_BOOL_in_cast_disambiguation_token3079); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:427:85: BREAK
                    {
                    match(input,BREAK,FOLLOW_BREAK_in_cast_disambiguation_token3083); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:427:93: BYTE
                    {
                    match(input,BYTE,FOLLOW_BYTE_in_cast_disambiguation_token3087); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:427:100: CASE
                    {
                    match(input,CASE,FOLLOW_CASE_in_cast_disambiguation_token3091); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:427:107: CATCH
                    {
                    match(input,CATCH,FOLLOW_CATCH_in_cast_disambiguation_token3095); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // CSharp4Tree.g:428:7: CHAR
                    {
                    match(input,CHAR,FOLLOW_CHAR_in_cast_disambiguation_token3103); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // CSharp4Tree.g:428:14: CHECKED
                    {
                    match(input,CHECKED,FOLLOW_CHECKED_in_cast_disambiguation_token3107); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // CSharp4Tree.g:428:24: CLASS
                    {
                    match(input,CLASS,FOLLOW_CLASS_in_cast_disambiguation_token3111); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // CSharp4Tree.g:428:32: CONST
                    {
                    match(input,CONST,FOLLOW_CONST_in_cast_disambiguation_token3115); if (state.failed) return retval;

                    }
                    break;
                case 17 :
                    // CSharp4Tree.g:428:40: CONTINUE
                    {
                    match(input,CONTINUE,FOLLOW_CONTINUE_in_cast_disambiguation_token3119); if (state.failed) return retval;

                    }
                    break;
                case 18 :
                    // CSharp4Tree.g:428:51: DECIMAL
                    {
                    match(input,DECIMAL,FOLLOW_DECIMAL_in_cast_disambiguation_token3123); if (state.failed) return retval;

                    }
                    break;
                case 19 :
                    // CSharp4Tree.g:428:61: DEFAULT
                    {
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_cast_disambiguation_token3127); if (state.failed) return retval;

                    }
                    break;
                case 20 :
                    // CSharp4Tree.g:428:71: DELEGATE
                    {
                    match(input,DELEGATE,FOLLOW_DELEGATE_in_cast_disambiguation_token3131); if (state.failed) return retval;

                    }
                    break;
                case 21 :
                    // CSharp4Tree.g:428:82: DO
                    {
                    match(input,DO,FOLLOW_DO_in_cast_disambiguation_token3135); if (state.failed) return retval;

                    }
                    break;
                case 22 :
                    // CSharp4Tree.g:428:87: DOUBLE
                    {
                    match(input,DOUBLE,FOLLOW_DOUBLE_in_cast_disambiguation_token3139); if (state.failed) return retval;

                    }
                    break;
                case 23 :
                    // CSharp4Tree.g:428:96: ELSE
                    {
                    match(input,ELSE,FOLLOW_ELSE_in_cast_disambiguation_token3143); if (state.failed) return retval;

                    }
                    break;
                case 24 :
                    // CSharp4Tree.g:428:103: ENUM
                    {
                    match(input,ENUM,FOLLOW_ENUM_in_cast_disambiguation_token3147); if (state.failed) return retval;

                    }
                    break;
                case 25 :
                    // CSharp4Tree.g:429:7: EVENT
                    {
                    match(input,EVENT,FOLLOW_EVENT_in_cast_disambiguation_token3155); if (state.failed) return retval;

                    }
                    break;
                case 26 :
                    // CSharp4Tree.g:429:15: EXPLICIT
                    {
                    match(input,EXPLICIT,FOLLOW_EXPLICIT_in_cast_disambiguation_token3159); if (state.failed) return retval;

                    }
                    break;
                case 27 :
                    // CSharp4Tree.g:429:26: EXTERN
                    {
                    match(input,EXTERN,FOLLOW_EXTERN_in_cast_disambiguation_token3163); if (state.failed) return retval;

                    }
                    break;
                case 28 :
                    // CSharp4Tree.g:429:35: FINALLY
                    {
                    match(input,FINALLY,FOLLOW_FINALLY_in_cast_disambiguation_token3167); if (state.failed) return retval;

                    }
                    break;
                case 29 :
                    // CSharp4Tree.g:429:57: FLOAT
                    {
                    match(input,FLOAT,FOLLOW_FLOAT_in_cast_disambiguation_token3173); if (state.failed) return retval;

                    }
                    break;
                case 30 :
                    // CSharp4Tree.g:429:65: FOR
                    {
                    match(input,FOR,FOLLOW_FOR_in_cast_disambiguation_token3177); if (state.failed) return retval;

                    }
                    break;
                case 31 :
                    // CSharp4Tree.g:429:71: FOREACH
                    {
                    match(input,FOREACH,FOLLOW_FOREACH_in_cast_disambiguation_token3181); if (state.failed) return retval;

                    }
                    break;
                case 32 :
                    // CSharp4Tree.g:429:81: GOTO
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_cast_disambiguation_token3185); if (state.failed) return retval;

                    }
                    break;
                case 33 :
                    // CSharp4Tree.g:429:88: IF
                    {
                    match(input,IF,FOLLOW_IF_in_cast_disambiguation_token3189); if (state.failed) return retval;

                    }
                    break;
                case 34 :
                    // CSharp4Tree.g:429:93: IMPLICIT
                    {
                    match(input,IMPLICIT,FOLLOW_IMPLICIT_in_cast_disambiguation_token3193); if (state.failed) return retval;

                    }
                    break;
                case 35 :
                    // CSharp4Tree.g:429:104: IN
                    {
                    match(input,IN,FOLLOW_IN_in_cast_disambiguation_token3197); if (state.failed) return retval;

                    }
                    break;
                case 36 :
                    // CSharp4Tree.g:429:109: INT
                    {
                    match(input,INT,FOLLOW_INT_in_cast_disambiguation_token3201); if (state.failed) return retval;

                    }
                    break;
                case 37 :
                    // CSharp4Tree.g:430:7: INTERFACE
                    {
                    match(input,INTERFACE,FOLLOW_INTERFACE_in_cast_disambiguation_token3209); if (state.failed) return retval;

                    }
                    break;
                case 38 :
                    // CSharp4Tree.g:430:19: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_cast_disambiguation_token3213); if (state.failed) return retval;

                    }
                    break;
                case 39 :
                    // CSharp4Tree.g:430:30: LOCK
                    {
                    match(input,LOCK,FOLLOW_LOCK_in_cast_disambiguation_token3217); if (state.failed) return retval;

                    }
                    break;
                case 40 :
                    // CSharp4Tree.g:430:37: LONG
                    {
                    match(input,LONG,FOLLOW_LONG_in_cast_disambiguation_token3221); if (state.failed) return retval;

                    }
                    break;
                case 41 :
                    // CSharp4Tree.g:430:44: NAMESPACE
                    {
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_cast_disambiguation_token3225); if (state.failed) return retval;

                    }
                    break;
                case 42 :
                    // CSharp4Tree.g:430:56: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_cast_disambiguation_token3229); if (state.failed) return retval;

                    }
                    break;
                case 43 :
                    // CSharp4Tree.g:430:62: OBJECT
                    {
                    match(input,OBJECT,FOLLOW_OBJECT_in_cast_disambiguation_token3233); if (state.failed) return retval;

                    }
                    break;
                case 44 :
                    // CSharp4Tree.g:430:71: OPERATOR
                    {
                    match(input,OPERATOR,FOLLOW_OPERATOR_in_cast_disambiguation_token3237); if (state.failed) return retval;

                    }
                    break;
                case 45 :
                    // CSharp4Tree.g:430:82: OUT
                    {
                    match(input,OUT,FOLLOW_OUT_in_cast_disambiguation_token3241); if (state.failed) return retval;

                    }
                    break;
                case 46 :
                    // CSharp4Tree.g:430:88: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_cast_disambiguation_token3245); if (state.failed) return retval;

                    }
                    break;
                case 47 :
                    // CSharp4Tree.g:430:99: PARAMS
                    {
                    match(input,PARAMS,FOLLOW_PARAMS_in_cast_disambiguation_token3249); if (state.failed) return retval;

                    }
                    break;
                case 48 :
                    // CSharp4Tree.g:431:7: PRIVATE
                    {
                    match(input,PRIVATE,FOLLOW_PRIVATE_in_cast_disambiguation_token3257); if (state.failed) return retval;

                    }
                    break;
                case 49 :
                    // CSharp4Tree.g:431:17: PROTECTED
                    {
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_cast_disambiguation_token3261); if (state.failed) return retval;

                    }
                    break;
                case 50 :
                    // CSharp4Tree.g:431:29: PUBLIC
                    {
                    match(input,PUBLIC,FOLLOW_PUBLIC_in_cast_disambiguation_token3265); if (state.failed) return retval;

                    }
                    break;
                case 51 :
                    // CSharp4Tree.g:431:38: READONLY
                    {
                    match(input,READONLY,FOLLOW_READONLY_in_cast_disambiguation_token3269); if (state.failed) return retval;

                    }
                    break;
                case 52 :
                    // CSharp4Tree.g:431:49: REF
                    {
                    match(input,REF,FOLLOW_REF_in_cast_disambiguation_token3273); if (state.failed) return retval;

                    }
                    break;
                case 53 :
                    // CSharp4Tree.g:431:55: RETURN
                    {
                    match(input,RETURN,FOLLOW_RETURN_in_cast_disambiguation_token3277); if (state.failed) return retval;

                    }
                    break;
                case 54 :
                    // CSharp4Tree.g:431:64: SBYTE
                    {
                    match(input,SBYTE,FOLLOW_SBYTE_in_cast_disambiguation_token3281); if (state.failed) return retval;

                    }
                    break;
                case 55 :
                    // CSharp4Tree.g:431:72: SEALED
                    {
                    match(input,SEALED,FOLLOW_SEALED_in_cast_disambiguation_token3285); if (state.failed) return retval;

                    }
                    break;
                case 56 :
                    // CSharp4Tree.g:431:81: SHORT
                    {
                    match(input,SHORT,FOLLOW_SHORT_in_cast_disambiguation_token3289); if (state.failed) return retval;

                    }
                    break;
                case 57 :
                    // CSharp4Tree.g:431:89: SIZEOF
                    {
                    match(input,SIZEOF,FOLLOW_SIZEOF_in_cast_disambiguation_token3293); if (state.failed) return retval;

                    }
                    break;
                case 58 :
                    // CSharp4Tree.g:431:98: STACKALLOC
                    {
                    match(input,STACKALLOC,FOLLOW_STACKALLOC_in_cast_disambiguation_token3297); if (state.failed) return retval;

                    }
                    break;
                case 59 :
                    // CSharp4Tree.g:432:7: STATIC
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_cast_disambiguation_token3305); if (state.failed) return retval;

                    }
                    break;
                case 60 :
                    // CSharp4Tree.g:432:16: STRING
                    {
                    match(input,STRING,FOLLOW_STRING_in_cast_disambiguation_token3309); if (state.failed) return retval;

                    }
                    break;
                case 61 :
                    // CSharp4Tree.g:432:25: STRUCT
                    {
                    match(input,STRUCT,FOLLOW_STRUCT_in_cast_disambiguation_token3313); if (state.failed) return retval;

                    }
                    break;
                case 62 :
                    // CSharp4Tree.g:432:34: SWITCH
                    {
                    match(input,SWITCH,FOLLOW_SWITCH_in_cast_disambiguation_token3317); if (state.failed) return retval;

                    }
                    break;
                case 63 :
                    // CSharp4Tree.g:432:43: THIS
                    {
                    match(input,THIS,FOLLOW_THIS_in_cast_disambiguation_token3321); if (state.failed) return retval;

                    }
                    break;
                case 64 :
                    // CSharp4Tree.g:432:50: THROW
                    {
                    match(input,THROW,FOLLOW_THROW_in_cast_disambiguation_token3325); if (state.failed) return retval;

                    }
                    break;
                case 65 :
                    // CSharp4Tree.g:432:58: TRY
                    {
                    match(input,TRY,FOLLOW_TRY_in_cast_disambiguation_token3329); if (state.failed) return retval;

                    }
                    break;
                case 66 :
                    // CSharp4Tree.g:432:64: TYPEOF
                    {
                    match(input,TYPEOF,FOLLOW_TYPEOF_in_cast_disambiguation_token3333); if (state.failed) return retval;

                    }
                    break;
                case 67 :
                    // CSharp4Tree.g:432:73: UINT
                    {
                    match(input,UINT,FOLLOW_UINT_in_cast_disambiguation_token3337); if (state.failed) return retval;

                    }
                    break;
                case 68 :
                    // CSharp4Tree.g:432:80: ULONG
                    {
                    match(input,ULONG,FOLLOW_ULONG_in_cast_disambiguation_token3341); if (state.failed) return retval;

                    }
                    break;
                case 69 :
                    // CSharp4Tree.g:432:88: UNCHECKED
                    {
                    match(input,UNCHECKED,FOLLOW_UNCHECKED_in_cast_disambiguation_token3345); if (state.failed) return retval;

                    }
                    break;
                case 70 :
                    // CSharp4Tree.g:432:100: UNSAFE
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_cast_disambiguation_token3349); if (state.failed) return retval;

                    }
                    break;
                case 71 :
                    // CSharp4Tree.g:433:7: USHORT
                    {
                    match(input,USHORT,FOLLOW_USHORT_in_cast_disambiguation_token3357); if (state.failed) return retval;

                    }
                    break;
                case 72 :
                    // CSharp4Tree.g:433:16: USING
                    {
                    match(input,USING,FOLLOW_USING_in_cast_disambiguation_token3361); if (state.failed) return retval;

                    }
                    break;
                case 73 :
                    // CSharp4Tree.g:433:24: VIRTUAL
                    {
                    match(input,VIRTUAL,FOLLOW_VIRTUAL_in_cast_disambiguation_token3365); if (state.failed) return retval;

                    }
                    break;
                case 74 :
                    // CSharp4Tree.g:433:34: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_cast_disambiguation_token3369); if (state.failed) return retval;

                    }
                    break;
                case 75 :
                    // CSharp4Tree.g:433:41: VOLATILE
                    {
                    match(input,VOLATILE,FOLLOW_VOLATILE_in_cast_disambiguation_token3373); if (state.failed) return retval;

                    }
                    break;
                case 76 :
                    // CSharp4Tree.g:433:52: WHILE
                    {
                    match(input,WHILE,FOLLOW_WHILE_in_cast_disambiguation_token3377); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, cast_disambiguation_token_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cast_disambiguation_token"


    public static class pre_increment_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_increment_expression"
    // CSharp4Tree.g:437:1: pre_increment_expression : OP_INC unary_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.pre_increment_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.pre_increment_expression_return();
        retval.start = input.LT(1);

        int pre_increment_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // CSharp4Tree.g:438:5: ( OP_INC unary_expression )
            // CSharp4Tree.g:438:10: OP_INC unary_expression
            {
            match(input,OP_INC,FOLLOW_OP_INC_in_pre_increment_expression3404); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_increment_expression3406);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, pre_increment_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"


    public static class pre_decrement_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "pre_decrement_expression"
    // CSharp4Tree.g:441:1: pre_decrement_expression : OP_DEC unary_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.pre_decrement_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.pre_decrement_expression_return();
        retval.start = input.LT(1);

        int pre_decrement_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // CSharp4Tree.g:442:5: ( OP_DEC unary_expression )
            // CSharp4Tree.g:442:10: OP_DEC unary_expression
            {
            match(input,OP_DEC,FOLLOW_OP_DEC_in_pre_decrement_expression3427); if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression3429);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, pre_decrement_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"


    public static class cast_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "cast_expression"
    // CSharp4Tree.g:445:1: cast_expression : ^( CAST_EXPRESSION type unary_expression ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.cast_expression_return cast_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.cast_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.cast_expression_return();
        retval.start = input.LT(1);

        int cast_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // CSharp4Tree.g:446:5: ( ^( CAST_EXPRESSION type unary_expression ) )
            // CSharp4Tree.g:446:10: ^( CAST_EXPRESSION type unary_expression )
            {
            match(input,CAST_EXPRESSION,FOLLOW_CAST_EXPRESSION_in_cast_expression3451); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_cast_expression3453);
            type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_unary_expression_in_cast_expression3455);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, cast_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class multiplicative_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "multiplicative_expression"
    // CSharp4Tree.g:450:1: multiplicative_expression : unary_expression ( ^( STAR multiplicative_expression unary_expression ) | ^( DIV multiplicative_expression unary_expression ) | ^( PERCENT multiplicative_expression unary_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.multiplicative_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.multiplicative_expression_return();
        retval.start = input.LT(1);

        int multiplicative_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // CSharp4Tree.g:451:5: ( unary_expression ( ^( STAR multiplicative_expression unary_expression ) | ^( DIV multiplicative_expression unary_expression ) | ^( PERCENT multiplicative_expression unary_expression ) )* )
            // CSharp4Tree.g:451:10: unary_expression ( ^( STAR multiplicative_expression unary_expression ) | ^( DIV multiplicative_expression unary_expression ) | ^( PERCENT multiplicative_expression unary_expression ) )*
            {
            pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3478);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:452:10: ( ^( STAR multiplicative_expression unary_expression ) | ^( DIV multiplicative_expression unary_expression ) | ^( PERCENT multiplicative_expression unary_expression ) )*
            loop58:
            do {
                int alt58=4;
                switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt58=1;
                    }
                    break;
                case DIV:
                    {
                    alt58=2;
                    }
                    break;
                case PERCENT:
                    {
                    alt58=3;
                    }
                    break;

                }

                switch (alt58) {
            	case 1 :
            	    // CSharp4Tree.g:452:12: ^( STAR multiplicative_expression unary_expression )
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_multiplicative_expression3492); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_multiplicative_expression_in_multiplicative_expression3494);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3496);
            	    unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:453:12: ^( DIV multiplicative_expression unary_expression )
            	    {
            	    match(input,DIV,FOLLOW_DIV_in_multiplicative_expression3511); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_multiplicative_expression_in_multiplicative_expression3513);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3515);
            	    unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 3 :
            	    // CSharp4Tree.g:454:12: ^( PERCENT multiplicative_expression unary_expression )
            	    {
            	    match(input,PERCENT,FOLLOW_PERCENT_in_multiplicative_expression3530); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_multiplicative_expression_in_multiplicative_expression3532);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3534);
            	    unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, multiplicative_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"


    public static class additive_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "additive_expression"
    // CSharp4Tree.g:458:1: additive_expression : multiplicative_expression ( ^( PLUS additive_expression multiplicative_expression ) | ^( MINUS additive_expression multiplicative_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.additive_expression_return additive_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.additive_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.additive_expression_return();
        retval.start = input.LT(1);

        int additive_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // CSharp4Tree.g:459:5: ( multiplicative_expression ( ^( PLUS additive_expression multiplicative_expression ) | ^( MINUS additive_expression multiplicative_expression ) )* )
            // CSharp4Tree.g:459:10: multiplicative_expression ( ^( PLUS additive_expression multiplicative_expression ) | ^( MINUS additive_expression multiplicative_expression ) )*
            {
            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3568);
            multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:460:10: ( ^( PLUS additive_expression multiplicative_expression ) | ^( MINUS additive_expression multiplicative_expression ) )*
            loop59:
            do {
                int alt59=3;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==PLUS) ) {
                    alt59=1;
                }
                else if ( (LA59_0==MINUS) ) {
                    alt59=2;
                }


                switch (alt59) {
            	case 1 :
            	    // CSharp4Tree.g:460:12: ^( PLUS additive_expression multiplicative_expression )
            	    {
            	    match(input,PLUS,FOLLOW_PLUS_in_additive_expression3582); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_additive_expression_in_additive_expression3584);
            	    additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3586);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:461:12: ^( MINUS additive_expression multiplicative_expression )
            	    {
            	    match(input,MINUS,FOLLOW_MINUS_in_additive_expression3601); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_additive_expression_in_additive_expression3603);
            	    additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3605);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, additive_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "additive_expression"


    public static class shift_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "shift_expression"
    // CSharp4Tree.g:465:1: shift_expression : additive_expression ( ^( OP_LEFT_SHIFT shift_expression additive_expression ) | ^( right_shift shift_expression additive_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.shift_expression_return shift_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.shift_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.shift_expression_return();
        retval.start = input.LT(1);

        int shift_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // CSharp4Tree.g:466:5: ( additive_expression ( ^( OP_LEFT_SHIFT shift_expression additive_expression ) | ^( right_shift shift_expression additive_expression ) )* )
            // CSharp4Tree.g:466:10: additive_expression ( ^( OP_LEFT_SHIFT shift_expression additive_expression ) | ^( right_shift shift_expression additive_expression ) )*
            {
            pushFollow(FOLLOW_additive_expression_in_shift_expression3639);
            additive_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:467:10: ( ^( OP_LEFT_SHIFT shift_expression additive_expression ) | ^( right_shift shift_expression additive_expression ) )*
            loop60:
            do {
                int alt60=3;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==OP_LEFT_SHIFT) ) {
                    alt60=1;
                }
                else if ( (LA60_0==OP_RIGHT_SHIFT) ) {
                    alt60=2;
                }


                switch (alt60) {
            	case 1 :
            	    // CSharp4Tree.g:467:12: ^( OP_LEFT_SHIFT shift_expression additive_expression )
            	    {
            	    match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_shift_expression3653); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_shift_expression_in_shift_expression3655);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_additive_expression_in_shift_expression3657);
            	    additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:468:12: ^( right_shift shift_expression additive_expression )
            	    {
            	    pushFollow(FOLLOW_right_shift_in_shift_expression3672);
            	    right_shift();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_shift_expression_in_shift_expression3674);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_additive_expression_in_shift_expression3676);
            	    additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, shift_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shift_expression"


    public static class relational_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "relational_expression"
    // CSharp4Tree.g:472:1: relational_expression : shift_expression ( ^( LT relational_expression shift_expression ) | ^( GT relational_expression shift_expression ) | ^( OP_LE relational_expression shift_expression ) | ^( OP_GE relational_expression shift_expression ) | ^( IS relational_expression isType ) | ^( AS relational_expression type ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.relational_expression_return relational_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.relational_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.relational_expression_return();
        retval.start = input.LT(1);

        int relational_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // CSharp4Tree.g:473:5: ( shift_expression ( ^( LT relational_expression shift_expression ) | ^( GT relational_expression shift_expression ) | ^( OP_LE relational_expression shift_expression ) | ^( OP_GE relational_expression shift_expression ) | ^( IS relational_expression isType ) | ^( AS relational_expression type ) )* )
            // CSharp4Tree.g:473:10: shift_expression ( ^( LT relational_expression shift_expression ) | ^( GT relational_expression shift_expression ) | ^( OP_LE relational_expression shift_expression ) | ^( OP_GE relational_expression shift_expression ) | ^( IS relational_expression isType ) | ^( AS relational_expression type ) )*
            {
            pushFollow(FOLLOW_shift_expression_in_relational_expression3710);
            shift_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:474:10: ( ^( LT relational_expression shift_expression ) | ^( GT relational_expression shift_expression ) | ^( OP_LE relational_expression shift_expression ) | ^( OP_GE relational_expression shift_expression ) | ^( IS relational_expression isType ) | ^( AS relational_expression type ) )*
            loop61:
            do {
                int alt61=7;
                switch ( input.LA(1) ) {
                case LT:
                    {
                    alt61=1;
                    }
                    break;
                case GT:
                    {
                    alt61=2;
                    }
                    break;
                case OP_LE:
                    {
                    alt61=3;
                    }
                    break;
                case OP_GE:
                    {
                    alt61=4;
                    }
                    break;
                case IS:
                    {
                    alt61=5;
                    }
                    break;
                case AS:
                    {
                    alt61=6;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // CSharp4Tree.g:474:12: ^( LT relational_expression shift_expression )
            	    {
            	    match(input,LT,FOLLOW_LT_in_relational_expression3724); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3726);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3728);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:475:12: ^( GT relational_expression shift_expression )
            	    {
            	    match(input,GT,FOLLOW_GT_in_relational_expression3743); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3745);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3747);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 3 :
            	    // CSharp4Tree.g:476:12: ^( OP_LE relational_expression shift_expression )
            	    {
            	    match(input,OP_LE,FOLLOW_OP_LE_in_relational_expression3762); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3764);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3766);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 4 :
            	    // CSharp4Tree.g:477:12: ^( OP_GE relational_expression shift_expression )
            	    {
            	    match(input,OP_GE,FOLLOW_OP_GE_in_relational_expression3781); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3783);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3785);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 5 :
            	    // CSharp4Tree.g:478:12: ^( IS relational_expression isType )
            	    {
            	    match(input,IS,FOLLOW_IS_in_relational_expression3800); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3802);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_isType_in_relational_expression3804);
            	    isType();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 6 :
            	    // CSharp4Tree.g:479:12: ^( AS relational_expression type )
            	    {
            	    match(input,AS,FOLLOW_AS_in_relational_expression3819); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_relational_expression_in_relational_expression3821);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_type_in_relational_expression3823);
            	    type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, relational_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relational_expression"


    public static class isType_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "isType"
    // CSharp4Tree.g:484:1: isType : non_nullable_value_type ( INTERR )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.isType_return isType() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.isType_return retval = new IntegrityVariablesParserC_CSharp4Tree.isType_return();
        retval.start = input.LT(1);

        int isType_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // CSharp4Tree.g:485:5: ( non_nullable_value_type ( INTERR )? )
            // CSharp4Tree.g:485:10: non_nullable_value_type ( INTERR )?
            {
            pushFollow(FOLLOW_non_nullable_value_type_in_isType3857);
            non_nullable_value_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:485:34: ( INTERR )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==INTERR) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // CSharp4Tree.g:485:34: INTERR
                    {
                    match(input,INTERR,FOLLOW_INTERR_in_isType3859); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, isType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "isType"


    public static class is_disambiguation_token_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "is_disambiguation_token"
    // CSharp4Tree.g:488:1: is_disambiguation_token : ( CLOSE_PARENS | OP_AND | OP_OR | INTERR );
    public final IntegrityVariablesParserC_CSharp4Tree.is_disambiguation_token_return is_disambiguation_token() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.is_disambiguation_token_return retval = new IntegrityVariablesParserC_CSharp4Tree.is_disambiguation_token_return();
        retval.start = input.LT(1);

        int is_disambiguation_token_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // CSharp4Tree.g:489:5: ( CLOSE_PARENS | OP_AND | OP_OR | INTERR )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==CLOSE_PARENS||input.LA(1)==INTERR||input.LA(1)==OP_AND||input.LA(1)==OP_OR ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, is_disambiguation_token_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "is_disambiguation_token"


    public static class equality_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equality_expression"
    // CSharp4Tree.g:495:1: equality_expression : relational_expression ( ^( OP_EQ equality_expression relational_expression ) | ^( OP_NE equality_expression relational_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.equality_expression_return equality_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.equality_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.equality_expression_return();
        retval.start = input.LT(1);

        int equality_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // CSharp4Tree.g:496:5: ( relational_expression ( ^( OP_EQ equality_expression relational_expression ) | ^( OP_NE equality_expression relational_expression ) )* )
            // CSharp4Tree.g:496:10: relational_expression ( ^( OP_EQ equality_expression relational_expression ) | ^( OP_NE equality_expression relational_expression ) )*
            {
            pushFollow(FOLLOW_relational_expression_in_equality_expression3925);
            relational_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:497:10: ( ^( OP_EQ equality_expression relational_expression ) | ^( OP_NE equality_expression relational_expression ) )*
            loop63:
            do {
                int alt63=3;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==OP_EQ) ) {
                    alt63=1;
                }
                else if ( (LA63_0==OP_NE) ) {
                    alt63=2;
                }


                switch (alt63) {
            	case 1 :
            	    // CSharp4Tree.g:497:12: ^( OP_EQ equality_expression relational_expression )
            	    {
            	    match(input,OP_EQ,FOLLOW_OP_EQ_in_equality_expression3939); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_equality_expression_in_equality_expression3941);
            	    equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression3943);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:498:12: ^( OP_NE equality_expression relational_expression )
            	    {
            	    match(input,OP_NE,FOLLOW_OP_NE_in_equality_expression3958); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_equality_expression_in_equality_expression3960);
            	    equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression3962);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, equality_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equality_expression"


    public static class and_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "and_expression"
    // CSharp4Tree.g:502:1: and_expression : equality_expression ( ^( AMP and_expression equality_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.and_expression_return and_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.and_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.and_expression_return();
        retval.start = input.LT(1);

        int and_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // CSharp4Tree.g:503:5: ( equality_expression ( ^( AMP and_expression equality_expression ) )* )
            // CSharp4Tree.g:503:10: equality_expression ( ^( AMP and_expression equality_expression ) )*
            {
            pushFollow(FOLLOW_equality_expression_in_and_expression3996);
            equality_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:504:10: ( ^( AMP and_expression equality_expression ) )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==AMP) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // CSharp4Tree.g:504:12: ^( AMP and_expression equality_expression )
            	    {
            	    match(input,AMP,FOLLOW_AMP_in_and_expression4010); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_and_expression_in_and_expression4012);
            	    and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_equality_expression_in_and_expression4014);
            	    equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, and_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "and_expression"


    public static class exclusive_or_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "exclusive_or_expression"
    // CSharp4Tree.g:508:1: exclusive_or_expression : and_expression ( ^( CARET exclusive_or_expression and_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.exclusive_or_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.exclusive_or_expression_return();
        retval.start = input.LT(1);

        int exclusive_or_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // CSharp4Tree.g:509:5: ( and_expression ( ^( CARET exclusive_or_expression and_expression ) )* )
            // CSharp4Tree.g:509:10: and_expression ( ^( CARET exclusive_or_expression and_expression ) )*
            {
            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression4048);
            and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:510:10: ( ^( CARET exclusive_or_expression and_expression ) )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==CARET) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // CSharp4Tree.g:510:12: ^( CARET exclusive_or_expression and_expression )
            	    {
            	    match(input,CARET,FOLLOW_CARET_in_exclusive_or_expression4062); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_exclusive_or_expression_in_exclusive_or_expression4064);
            	    exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression4066);
            	    and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, exclusive_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"


    public static class inclusive_or_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "inclusive_or_expression"
    // CSharp4Tree.g:514:1: inclusive_or_expression : exclusive_or_expression ( ^( BITWISE_OR inclusive_or_expression exclusive_or_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.inclusive_or_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.inclusive_or_expression_return();
        retval.start = input.LT(1);

        int inclusive_or_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // CSharp4Tree.g:515:5: ( exclusive_or_expression ( ^( BITWISE_OR inclusive_or_expression exclusive_or_expression ) )* )
            // CSharp4Tree.g:515:10: exclusive_or_expression ( ^( BITWISE_OR inclusive_or_expression exclusive_or_expression ) )*
            {
            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression4100);
            exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:516:10: ( ^( BITWISE_OR inclusive_or_expression exclusive_or_expression ) )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==BITWISE_OR) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // CSharp4Tree.g:516:12: ^( BITWISE_OR inclusive_or_expression exclusive_or_expression )
            	    {
            	    match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_inclusive_or_expression4114); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_inclusive_or_expression_in_inclusive_or_expression4116);
            	    inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression4118);
            	    exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, inclusive_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"


    public static class conditional_and_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_and_expression"
    // CSharp4Tree.g:520:1: conditional_and_expression : inclusive_or_expression ( ^( OP_AND conditional_and_expression inclusive_or_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.conditional_and_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.conditional_and_expression_return();
        retval.start = input.LT(1);

        int conditional_and_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // CSharp4Tree.g:521:5: ( inclusive_or_expression ( ^( OP_AND conditional_and_expression inclusive_or_expression ) )* )
            // CSharp4Tree.g:521:11: inclusive_or_expression ( ^( OP_AND conditional_and_expression inclusive_or_expression ) )*
            {
            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression4153);
            inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:522:11: ( ^( OP_AND conditional_and_expression inclusive_or_expression ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==OP_AND) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // CSharp4Tree.g:522:13: ^( OP_AND conditional_and_expression inclusive_or_expression )
            	    {
            	    match(input,OP_AND,FOLLOW_OP_AND_in_conditional_and_expression4168); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_conditional_and_expression_in_conditional_and_expression4170);
            	    conditional_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression4172);
            	    inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, conditional_and_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"


    public static class conditional_or_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_or_expression"
    // CSharp4Tree.g:526:1: conditional_or_expression : conditional_and_expression ( ^( OP_OR conditional_or_expression conditional_and_expression ) )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.conditional_or_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.conditional_or_expression_return();
        retval.start = input.LT(1);

        int conditional_or_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // CSharp4Tree.g:527:5: ( conditional_and_expression ( ^( OP_OR conditional_or_expression conditional_and_expression ) )* )
            // CSharp4Tree.g:527:10: conditional_and_expression ( ^( OP_OR conditional_or_expression conditional_and_expression ) )*
            {
            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression4207);
            conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:528:10: ( ^( OP_OR conditional_or_expression conditional_and_expression ) )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==OP_OR) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // CSharp4Tree.g:528:12: ^( OP_OR conditional_or_expression conditional_and_expression )
            	    {
            	    match(input,OP_OR,FOLLOW_OP_OR_in_conditional_or_expression4221); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_conditional_or_expression_in_conditional_or_expression4223);
            	    conditional_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression4225);
            	    conditional_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, conditional_or_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"


    public static class null_coalescing_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "null_coalescing_expression"
    // CSharp4Tree.g:532:1: null_coalescing_expression : ( conditional_or_expression | ^( OP_COALESCING conditional_or_expression null_coalescing_expression ) );
    public final IntegrityVariablesParserC_CSharp4Tree.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.null_coalescing_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.null_coalescing_expression_return();
        retval.start = input.LT(1);

        int null_coalescing_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // CSharp4Tree.g:533:5: ( conditional_or_expression | ^( OP_COALESCING conditional_or_expression null_coalescing_expression ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==UNARY_EXPRESSION) ) {
                alt69=1;
            }
            else if ( (LA69_0==OP_COALESCING) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // CSharp4Tree.g:533:10: conditional_or_expression
                    {
                    pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression4258);
                    conditional_or_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:534:10: ^( OP_COALESCING conditional_or_expression null_coalescing_expression )
                    {
                    match(input,OP_COALESCING,FOLLOW_OP_COALESCING_in_null_coalescing_expression4270); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression4272);
                    conditional_or_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_null_coalescing_expression_in_null_coalescing_expression4274);
                    null_coalescing_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, null_coalescing_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"


    public static class conditional_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conditional_expression"
    // CSharp4Tree.g:538:1: conditional_expression : null_coalescing_expression ( ^( CONDITIONAL_EXPRESSION ^( THEN expression ) ^( ELSE expression ) ) )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.conditional_expression_return conditional_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.conditional_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.conditional_expression_return();
        retval.start = input.LT(1);

        int conditional_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // CSharp4Tree.g:539:5: ( null_coalescing_expression ( ^( CONDITIONAL_EXPRESSION ^( THEN expression ) ^( ELSE expression ) ) )? )
            // CSharp4Tree.g:539:10: null_coalescing_expression ( ^( CONDITIONAL_EXPRESSION ^( THEN expression ) ^( ELSE expression ) ) )?
            {
            pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression4297);
            null_coalescing_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:540:10: ( ^( CONDITIONAL_EXPRESSION ^( THEN expression ) ^( ELSE expression ) ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==CONDITIONAL_EXPRESSION) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // CSharp4Tree.g:540:12: ^( CONDITIONAL_EXPRESSION ^( THEN expression ) ^( ELSE expression ) )
                    {
                    match(input,CONDITIONAL_EXPRESSION,FOLLOW_CONDITIONAL_EXPRESSION_in_conditional_expression4311); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,THEN,FOLLOW_THEN_in_conditional_expression4314); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditional_expression4316);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    match(input,ELSE,FOLLOW_ELSE_in_conditional_expression4320); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditional_expression4322);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, conditional_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional_expression"


    public static class lambda_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lambda_expression"
    // CSharp4Tree.g:544:1: lambda_expression : anonymous_function_signature right_arrow anonymous_function_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.lambda_expression_return lambda_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.lambda_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.lambda_expression_return();
        retval.start = input.LT(1);

        int lambda_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // CSharp4Tree.g:545:5: ( anonymous_function_signature right_arrow anonymous_function_body )
            // CSharp4Tree.g:545:10: anonymous_function_signature right_arrow anonymous_function_body
            {
            pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression4350);
            anonymous_function_signature();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_right_arrow_in_lambda_expression4352);
            right_arrow();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression4354);
            anonymous_function_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, lambda_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lambda_expression"


    public static class anonymous_method_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_method_expression"
    // CSharp4Tree.g:549:1: anonymous_method_expression : ^( DELEGATE ( explicit_anonymous_function_signature )? block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_method_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_method_expression_return();
        retval.start = input.LT(1);

        int anonymous_method_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // CSharp4Tree.g:550:5: ( ^( DELEGATE ( explicit_anonymous_function_signature )? block ) )
            // CSharp4Tree.g:550:10: ^( DELEGATE ( explicit_anonymous_function_signature )? block )
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_anonymous_method_expression4378); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:550:21: ( explicit_anonymous_function_signature )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==OPEN_PARENS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // CSharp4Tree.g:550:21: explicit_anonymous_function_signature
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4380);
                    explicit_anonymous_function_signature();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_block_in_anonymous_method_expression4383);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, anonymous_method_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"


    public static class anonymous_function_signature_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_signature"
    // CSharp4Tree.g:554:1: anonymous_function_signature : ( OPEN_PARENS CLOSE_PARENS | OPEN_PARENS explicit_anonymous_function_parameter_list CLOSE_PARENS | OPEN_PARENS implicit_anonymous_function_parameter_list CLOSE_PARENS | implicit_anonymous_function_parameter );
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_function_signature_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_function_signature_return();
        retval.start = input.LT(1);

        int anonymous_function_signature_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // CSharp4Tree.g:555:5: ( OPEN_PARENS CLOSE_PARENS | OPEN_PARENS explicit_anonymous_function_parameter_list CLOSE_PARENS | OPEN_PARENS implicit_anonymous_function_parameter_list CLOSE_PARENS | implicit_anonymous_function_parameter )
            int alt72=4;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==OPEN_PARENS) ) {
                switch ( input.LA(2) ) {
                case CLOSE_PARENS:
                    {
                    alt72=1;
                    }
                    break;
                case OUT:
                case REF:
                case TYPE:
                    {
                    alt72=2;
                    }
                    break;
                case IDENTIFIER:
                    {
                    alt72=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA72_0==IDENTIFIER) ) {
                alt72=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // CSharp4Tree.g:555:10: OPEN_PARENS CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature4407); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4409); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:556:10: OPEN_PARENS explicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature4420); if (state.failed) return retval;

                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature4422);
                    explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4424); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:557:10: OPEN_PARENS implicit_anonymous_function_parameter_list CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_anonymous_function_signature4435); if (state.failed) return retval;

                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature4437);
                    implicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4439); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:558:10: implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature4450);
                    implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, anonymous_function_signature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"


    public static class explicit_anonymous_function_signature_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_signature"
    // CSharp4Tree.g:561:1: explicit_anonymous_function_signature : OPEN_PARENS ( explicit_anonymous_function_parameter_list )? CLOSE_PARENS ;
    public final IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_signature_return retval = new IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_signature_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // CSharp4Tree.g:562:5: ( OPEN_PARENS ( explicit_anonymous_function_parameter_list )? CLOSE_PARENS )
            // CSharp4Tree.g:562:10: OPEN_PARENS ( explicit_anonymous_function_parameter_list )? CLOSE_PARENS
            {
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature4471); if (state.failed) return retval;

            // CSharp4Tree.g:562:22: ( explicit_anonymous_function_parameter_list )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==OUT||LA73_0==REF||LA73_0==TYPE) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // CSharp4Tree.g:562:22: explicit_anonymous_function_parameter_list
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4473);
                    explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature4476); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, explicit_anonymous_function_signature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"


    public static class explicit_anonymous_function_parameter_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // CSharp4Tree.g:565:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( COMMA explicit_anonymous_function_parameter )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_parameter_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // CSharp4Tree.g:566:5: ( explicit_anonymous_function_parameter ( COMMA explicit_anonymous_function_parameter )* )
            // CSharp4Tree.g:566:10: explicit_anonymous_function_parameter ( COMMA explicit_anonymous_function_parameter )*
            {
            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4497);
            explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:567:10: ( COMMA explicit_anonymous_function_parameter )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // CSharp4Tree.g:567:11: COMMA explicit_anonymous_function_parameter
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list4509); if (state.failed) return retval;

            	    pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4511);
            	    explicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, explicit_anonymous_function_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"


    public static class explicit_anonymous_function_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "explicit_anonymous_function_parameter"
    // CSharp4Tree.g:570:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);

        int explicit_anonymous_function_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // CSharp4Tree.g:571:5: ( ( anonymous_function_parameter_modifier )? type IDENTIFIER )
            // CSharp4Tree.g:571:10: ( anonymous_function_parameter_modifier )? type IDENTIFIER
            {
            // CSharp4Tree.g:571:10: ( anonymous_function_parameter_modifier )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==OUT||LA75_0==REF) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // CSharp4Tree.g:571:10: anonymous_function_parameter_modifier
                    {
                    pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4534);
                    anonymous_function_parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter4537);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter4539); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, explicit_anonymous_function_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"


    public static class anonymous_function_parameter_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_parameter_modifier"
    // CSharp4Tree.g:574:1: anonymous_function_parameter_modifier : ( REF | OUT );
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_function_parameter_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);

        int anonymous_function_parameter_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // CSharp4Tree.g:575:5: ( REF | OUT )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==OUT||input.LA(1)==REF ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, anonymous_function_parameter_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"


    public static class implicit_anonymous_function_signature_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_signature"
    // CSharp4Tree.g:579:1: implicit_anonymous_function_signature : ( OPEN_PARENS ( implicit_anonymous_function_parameter_list )? CLOSE_PARENS | implicit_anonymous_function_parameter );
    public final IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_signature_return implicit_anonymous_function_signature() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_signature_return retval = new IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_signature_return();
        retval.start = input.LT(1);

        int implicit_anonymous_function_signature_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // CSharp4Tree.g:580:5: ( OPEN_PARENS ( implicit_anonymous_function_parameter_list )? CLOSE_PARENS | implicit_anonymous_function_parameter )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==OPEN_PARENS) ) {
                alt77=1;
            }
            else if ( (LA77_0==IDENTIFIER) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // CSharp4Tree.g:580:10: OPEN_PARENS ( implicit_anonymous_function_parameter_list )? CLOSE_PARENS
                    {
                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature4592); if (state.failed) return retval;

                    // CSharp4Tree.g:580:22: ( implicit_anonymous_function_parameter_list )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==IDENTIFIER) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // CSharp4Tree.g:580:22: implicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature4594);
                            implicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature4597); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:581:10: implicit_anonymous_function_parameter
                    {
                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature4608);
                    implicit_anonymous_function_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, implicit_anonymous_function_signature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_signature"


    public static class implicit_anonymous_function_parameter_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // CSharp4Tree.g:584:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( COMMA implicit_anonymous_function_parameter )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);

        int implicit_anonymous_function_parameter_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // CSharp4Tree.g:585:5: ( implicit_anonymous_function_parameter ( COMMA implicit_anonymous_function_parameter )* )
            // CSharp4Tree.g:585:10: implicit_anonymous_function_parameter ( COMMA implicit_anonymous_function_parameter )*
            {
            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4629);
            implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:586:10: ( COMMA implicit_anonymous_function_parameter )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // CSharp4Tree.g:586:11: COMMA implicit_anonymous_function_parameter
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list4641); if (state.failed) return retval;

            	    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4643);
            	    implicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, implicit_anonymous_function_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"


    public static class implicit_anonymous_function_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "implicit_anonymous_function_parameter"
    // CSharp4Tree.g:590:1: implicit_anonymous_function_parameter : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);

        int implicit_anonymous_function_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // CSharp4Tree.g:591:5: ( IDENTIFIER )
            // CSharp4Tree.g:591:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter4668); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, implicit_anonymous_function_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"


    public static class anonymous_function_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "anonymous_function_body"
    // CSharp4Tree.g:594:1: anonymous_function_body : ( expression | block );
    public final IntegrityVariablesParserC_CSharp4Tree.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.anonymous_function_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.anonymous_function_body_return();
        retval.start = input.LT(1);

        int anonymous_function_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // CSharp4Tree.g:595:5: ( expression | block )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==IDENTIFIER||LA79_0==OPEN_PARENS||LA79_0==OP_COALESCING||LA79_0==ASSIGNMENT_OPERATOR||LA79_0==UNARY_EXPRESSION) ) {
                alt79=1;
            }
            else if ( (LA79_0==BLOCK) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // CSharp4Tree.g:595:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_anonymous_function_body4689);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:596:10: block
                    {
                    pushFollow(FOLLOW_block_in_anonymous_function_body4700);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, anonymous_function_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"


    public static class query_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_expression"
    // CSharp4Tree.g:600:1: query_expression : from_clause query_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.query_expression_return query_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.query_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.query_expression_return();
        retval.start = input.LT(1);

        int query_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // CSharp4Tree.g:601:5: ( from_clause query_body )
            // CSharp4Tree.g:601:10: from_clause query_body
            {
            pushFollow(FOLLOW_from_clause_in_query_expression4723);
            from_clause();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_expression4725);
            query_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, query_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_expression"


    public static class from_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_clause"
    // CSharp4Tree.g:604:1: from_clause : from_contextual_keyword ( type )? IDENTIFIER IN expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.from_clause_return from_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.from_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.from_clause_return();
        retval.start = input.LT(1);

        int from_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // CSharp4Tree.g:605:5: ( from_contextual_keyword ( type )? IDENTIFIER IN expression )
            // CSharp4Tree.g:605:10: from_contextual_keyword ( type )? IDENTIFIER IN expression
            {
            pushFollow(FOLLOW_from_contextual_keyword_in_from_clause4746);
            from_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:605:34: ( type )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==TYPE) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // CSharp4Tree.g:605:34: type
                    {
                    pushFollow(FOLLOW_type_in_from_clause4748);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_clause4751); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_from_clause4753); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_from_clause4755);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, from_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "from_clause"


    public static class query_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body"
    // CSharp4Tree.g:608:1: query_body : ( query_body_clauses )? select_or_group_clause ( query_continuation )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.query_body_return query_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.query_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.query_body_return();
        retval.start = input.LT(1);

        int query_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // CSharp4Tree.g:609:5: ( ( query_body_clauses )? select_or_group_clause ( query_continuation )? )
            // CSharp4Tree.g:609:10: ( query_body_clauses )? select_or_group_clause ( query_continuation )?
            {
            // CSharp4Tree.g:609:10: ( query_body_clauses )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENTIFIER) ) {
                int LA81_1 = input.LA(2);

                if ( (synpred229_CSharp4Tree()) ) {
                    alt81=1;
                }
            }
            switch (alt81) {
                case 1 :
                    // CSharp4Tree.g:609:10: query_body_clauses
                    {
                    pushFollow(FOLLOW_query_body_clauses_in_query_body4776);
                    query_body_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_select_or_group_clause_in_query_body4779);
            select_or_group_clause();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:609:53: ( query_continuation )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==IDENTIFIER) ) {
                int LA82_1 = input.LA(2);

                if ( (synpred230_CSharp4Tree()) ) {
                    alt82=1;
                }
            }
            switch (alt82) {
                case 1 :
                    // CSharp4Tree.g:609:53: query_continuation
                    {
                    pushFollow(FOLLOW_query_continuation_in_query_body4781);
                    query_continuation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, query_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body"


    public static class query_body_clauses_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clauses"
    // CSharp4Tree.g:612:1: query_body_clauses : query_body_clause ( query_body_clause )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.query_body_clauses_return query_body_clauses() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.query_body_clauses_return retval = new IntegrityVariablesParserC_CSharp4Tree.query_body_clauses_return();
        retval.start = input.LT(1);

        int query_body_clauses_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // CSharp4Tree.g:613:5: ( query_body_clause ( query_body_clause )* )
            // CSharp4Tree.g:613:10: query_body_clause ( query_body_clause )*
            {
            pushFollow(FOLLOW_query_body_clause_in_query_body_clauses4803);
            query_body_clause();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:613:28: ( query_body_clause )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==IDENTIFIER) ) {
                    int LA83_1 = input.LA(2);

                    if ( (synpred231_CSharp4Tree()) ) {
                        alt83=1;
                    }


                }


                switch (alt83) {
            	case 1 :
            	    // CSharp4Tree.g:613:28: query_body_clause
            	    {
            	    pushFollow(FOLLOW_query_body_clause_in_query_body_clauses4805);
            	    query_body_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, query_body_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"


    public static class query_body_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_body_clause"
    // CSharp4Tree.g:616:1: query_body_clause : ( from_clause | let_clause | where_clause | combined_join_clause | orderby_clause );
    public final IntegrityVariablesParserC_CSharp4Tree.query_body_clause_return query_body_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.query_body_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.query_body_clause_return();
        retval.start = input.LT(1);

        int query_body_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // CSharp4Tree.g:617:5: ( from_clause | let_clause | where_clause | combined_join_clause | orderby_clause )
            int alt84=5;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==IDENTIFIER) ) {
                int LA84_1 = input.LA(2);

                if ( (synpred232_CSharp4Tree()) ) {
                    alt84=1;
                }
                else if ( (synpred233_CSharp4Tree()) ) {
                    alt84=2;
                }
                else if ( (synpred234_CSharp4Tree()) ) {
                    alt84=3;
                }
                else if ( (synpred235_CSharp4Tree()) ) {
                    alt84=4;
                }
                else if ( (true) ) {
                    alt84=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // CSharp4Tree.g:617:10: from_clause
                    {
                    pushFollow(FOLLOW_from_clause_in_query_body_clause4827);
                    from_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:618:10: let_clause
                    {
                    pushFollow(FOLLOW_let_clause_in_query_body_clause4838);
                    let_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:619:10: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_body_clause4849);
                    where_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:620:10: combined_join_clause
                    {
                    pushFollow(FOLLOW_combined_join_clause_in_query_body_clause4860);
                    combined_join_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:621:10: orderby_clause
                    {
                    pushFollow(FOLLOW_orderby_clause_in_query_body_clause4871);
                    orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, query_body_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_body_clause"


    public static class let_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_clause"
    // CSharp4Tree.g:624:1: let_clause : let_contextual_keyword IDENTIFIER ASSIGNMENT expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.let_clause_return let_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.let_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.let_clause_return();
        retval.start = input.LT(1);

        int let_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // CSharp4Tree.g:625:5: ( let_contextual_keyword IDENTIFIER ASSIGNMENT expression )
            // CSharp4Tree.g:625:10: let_contextual_keyword IDENTIFIER ASSIGNMENT expression
            {
            pushFollow(FOLLOW_let_contextual_keyword_in_let_clause4892);
            let_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_clause4894); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_let_clause4896); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_let_clause4898);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, let_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "let_clause"


    public static class where_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_clause"
    // CSharp4Tree.g:628:1: where_clause : where_contextual_keyword boolean_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.where_clause_return where_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.where_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.where_clause_return();
        retval.start = input.LT(1);

        int where_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // CSharp4Tree.g:629:5: ( where_contextual_keyword boolean_expression )
            // CSharp4Tree.g:629:10: where_contextual_keyword boolean_expression
            {
            pushFollow(FOLLOW_where_contextual_keyword_in_where_clause4919);
            where_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_boolean_expression_in_where_clause4921);
            boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, where_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_clause"


    public static class join_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_clause"
    // CSharp4Tree.g:632:1: join_clause : join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.join_clause_return join_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.join_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.join_clause_return();
        retval.start = input.LT(1);

        int join_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // CSharp4Tree.g:633:5: ( join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression )
            // CSharp4Tree.g:633:10: join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_join_clause4942);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:633:34: ( type )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==TYPE) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // CSharp4Tree.g:633:34: type
                    {
                    pushFollow(FOLLOW_type_in_join_clause4944);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_clause4947); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_clause4949); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause4960);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_clause4962);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause4964);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_clause4966);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_clause4977);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_into_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_into_clause"
    // CSharp4Tree.g:638:1: join_into_clause : join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression into_contextual_keyword IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.join_into_clause_return join_into_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.join_into_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.join_into_clause_return();
        retval.start = input.LT(1);

        int join_into_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // CSharp4Tree.g:639:5: ( join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression into_contextual_keyword IDENTIFIER )
            // CSharp4Tree.g:639:10: join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression into_contextual_keyword IDENTIFIER
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_join_into_clause4998);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:639:34: ( type )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==TYPE) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // CSharp4Tree.g:639:34: type
                    {
                    pushFollow(FOLLOW_type_in_join_into_clause5000);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause5003); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_join_into_clause5005); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause5016);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_join_into_clause5018);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause5020);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_join_into_clause5022);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_join_into_clause5033);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_into_contextual_keyword_in_join_into_clause5035);
            into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_into_clause5037); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, join_into_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_into_clause"


    public static class combined_join_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "combined_join_clause"
    // CSharp4Tree.g:645:1: combined_join_clause : join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression ( into_contextual_keyword IDENTIFIER )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.combined_join_clause_return combined_join_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.combined_join_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.combined_join_clause_return();
        retval.start = input.LT(1);

        int combined_join_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // CSharp4Tree.g:646:5: ( join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression ( into_contextual_keyword IDENTIFIER )? )
            // CSharp4Tree.g:646:10: join_contextual_keyword ( type )? IDENTIFIER IN expression on_contextual_keyword expression equals_contextual_keyword expression ( into_contextual_keyword IDENTIFIER )?
            {
            pushFollow(FOLLOW_join_contextual_keyword_in_combined_join_clause5058);
            join_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:646:34: ( type )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==TYPE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // CSharp4Tree.g:646:34: type
                    {
                    pushFollow(FOLLOW_type_in_combined_join_clause5060);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_combined_join_clause5063); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_combined_join_clause5065); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause5067);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_on_contextual_keyword_in_combined_join_clause5078);
            on_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause5080);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_equals_contextual_keyword_in_combined_join_clause5082);
            equals_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_combined_join_clause5093);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:648:21: ( into_contextual_keyword IDENTIFIER )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==IDENTIFIER) ) {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==IDENTIFIER) ) {
                    int LA88_3 = input.LA(3);

                    if ( (LA88_3==IDENTIFIER) ) {
                        int LA88_4 = input.LA(4);

                        if ( (LA88_4==IDENTIFIER||LA88_4==OPEN_PARENS||LA88_4==OP_COALESCING||LA88_4==ASSIGNMENT_OPERATOR||LA88_4==TYPE||LA88_4==UNARY_EXPRESSION) ) {
                            alt88=1;
                        }
                    }
                    else if ( (LA88_3==EOF) ) {
                        alt88=1;
                    }
                }
            }
            switch (alt88) {
                case 1 :
                    // CSharp4Tree.g:648:22: into_contextual_keyword IDENTIFIER
                    {
                    pushFollow(FOLLOW_into_contextual_keyword_in_combined_join_clause5096);
                    into_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_combined_join_clause5098); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, combined_join_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "combined_join_clause"


    public static class orderby_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_clause"
    // CSharp4Tree.g:651:1: orderby_clause : orderby_contextual_keyword orderings ;
    public final IntegrityVariablesParserC_CSharp4Tree.orderby_clause_return orderby_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.orderby_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.orderby_clause_return();
        retval.start = input.LT(1);

        int orderby_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // CSharp4Tree.g:652:5: ( orderby_contextual_keyword orderings )
            // CSharp4Tree.g:652:10: orderby_contextual_keyword orderings
            {
            pushFollow(FOLLOW_orderby_contextual_keyword_in_orderby_clause5121);
            orderby_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_orderings_in_orderby_clause5123);
            orderings();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, orderby_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "orderby_clause"


    public static class orderings_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderings"
    // CSharp4Tree.g:655:1: orderings : ordering ( COMMA ordering )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.orderings_return orderings() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.orderings_return retval = new IntegrityVariablesParserC_CSharp4Tree.orderings_return();
        retval.start = input.LT(1);

        int orderings_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // CSharp4Tree.g:656:5: ( ordering ( COMMA ordering )* )
            // CSharp4Tree.g:656:10: ordering ( COMMA ordering )*
            {
            pushFollow(FOLLOW_ordering_in_orderings5144);
            ordering();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:656:19: ( COMMA ordering )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // CSharp4Tree.g:656:20: COMMA ordering
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_orderings5147); if (state.failed) return retval;

            	    pushFollow(FOLLOW_ordering_in_orderings5150);
            	    ordering();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, orderings_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "orderings"


    public static class ordering_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering"
    // CSharp4Tree.g:659:1: ordering : expression ( ordering_direction )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.ordering_return ordering() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.ordering_return retval = new IntegrityVariablesParserC_CSharp4Tree.ordering_return();
        retval.start = input.LT(1);

        int ordering_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // CSharp4Tree.g:660:5: ( expression ( ordering_direction )? )
            // CSharp4Tree.g:660:10: expression ( ordering_direction )?
            {
            pushFollow(FOLLOW_expression_in_ordering5173);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:660:21: ( ordering_direction )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==IDENTIFIER) ) {
                int LA90_1 = input.LA(2);

                if ( (synpred241_CSharp4Tree()) ) {
                    alt90=1;
                }
            }
            switch (alt90) {
                case 1 :
                    // CSharp4Tree.g:660:21: ordering_direction
                    {
                    pushFollow(FOLLOW_ordering_direction_in_ordering5175);
                    ordering_direction();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, ordering_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ordering"


    public static class ordering_direction_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ordering_direction"
    // CSharp4Tree.g:663:1: ordering_direction : ( ascending_contextual_keyword | descending_contextual_keyword );
    public final IntegrityVariablesParserC_CSharp4Tree.ordering_direction_return ordering_direction() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.ordering_direction_return retval = new IntegrityVariablesParserC_CSharp4Tree.ordering_direction_return();
        retval.start = input.LT(1);

        int ordering_direction_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // CSharp4Tree.g:664:5: ( ascending_contextual_keyword | descending_contextual_keyword )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==IDENTIFIER) ) {
                int LA91_1 = input.LA(2);

                if ( (synpred242_CSharp4Tree()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // CSharp4Tree.g:664:10: ascending_contextual_keyword
                    {
                    pushFollow(FOLLOW_ascending_contextual_keyword_in_ordering_direction5197);
                    ascending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:665:10: descending_contextual_keyword
                    {
                    pushFollow(FOLLOW_descending_contextual_keyword_in_ordering_direction5208);
                    descending_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, ordering_direction_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ordering_direction"


    public static class select_or_group_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_or_group_clause"
    // CSharp4Tree.g:668:1: select_or_group_clause : ( select_clause | group_clause );
    public final IntegrityVariablesParserC_CSharp4Tree.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.select_or_group_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.select_or_group_clause_return();
        retval.start = input.LT(1);

        int select_or_group_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // CSharp4Tree.g:669:5: ( select_clause | group_clause )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==IDENTIFIER) ) {
                int LA92_1 = input.LA(2);

                if ( (synpred243_CSharp4Tree()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // CSharp4Tree.g:669:10: select_clause
                    {
                    pushFollow(FOLLOW_select_clause_in_select_or_group_clause5229);
                    select_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:670:10: group_clause
                    {
                    pushFollow(FOLLOW_group_clause_in_select_or_group_clause5240);
                    group_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, select_or_group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"


    public static class select_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_clause"
    // CSharp4Tree.g:673:1: select_clause : select_contextual_keyword expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.select_clause_return select_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.select_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.select_clause_return();
        retval.start = input.LT(1);

        int select_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // CSharp4Tree.g:674:5: ( select_contextual_keyword expression )
            // CSharp4Tree.g:674:10: select_contextual_keyword expression
            {
            pushFollow(FOLLOW_select_contextual_keyword_in_select_clause5261);
            select_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_select_clause5263);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, select_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_clause"


    public static class group_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_clause"
    // CSharp4Tree.g:677:1: group_clause : group_contextual_keyword expression by_contextual_keyword expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.group_clause_return group_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.group_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.group_clause_return();
        retval.start = input.LT(1);

        int group_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // CSharp4Tree.g:678:5: ( group_contextual_keyword expression by_contextual_keyword expression )
            // CSharp4Tree.g:678:10: group_contextual_keyword expression by_contextual_keyword expression
            {
            pushFollow(FOLLOW_group_contextual_keyword_in_group_clause5284);
            group_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause5286);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_by_contextual_keyword_in_group_clause5288);
            by_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_group_clause5290);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, group_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class query_continuation_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "query_continuation"
    // CSharp4Tree.g:682:1: query_continuation : into_contextual_keyword IDENTIFIER query_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.query_continuation_return query_continuation() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.query_continuation_return retval = new IntegrityVariablesParserC_CSharp4Tree.query_continuation_return();
        retval.start = input.LT(1);

        int query_continuation_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // CSharp4Tree.g:683:5: ( into_contextual_keyword IDENTIFIER query_body )
            // CSharp4Tree.g:683:10: into_contextual_keyword IDENTIFIER query_body
            {
            pushFollow(FOLLOW_into_contextual_keyword_in_query_continuation5313);
            into_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_query_continuation5315); if (state.failed) return retval;

            pushFollow(FOLLOW_query_body_in_query_continuation5317);
            query_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, query_continuation_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "query_continuation"


    public static class assignment_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment"
    // CSharp4Tree.g:687:1: assignment : ^( assignment_operator unary_expression expression ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.assignment_return assignment() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.assignment_return retval = new IntegrityVariablesParserC_CSharp4Tree.assignment_return();
        retval.start = input.LT(1);

        int assignment_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // CSharp4Tree.g:688:5: ( ^( assignment_operator unary_expression expression ) )
            // CSharp4Tree.g:688:10: ^( assignment_operator unary_expression expression )
            {
            pushFollow(FOLLOW_assignment_operator_in_assignment5341);
            assignment_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_unary_expression_in_assignment5343);
            unary_expression();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_assignment5345);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment"


    public static class assignment_operator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment_operator"
    // CSharp4Tree.g:691:1: assignment_operator : ^( ASSIGNMENT_OPERATOR assignment_operator2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.assignment_operator_return assignment_operator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.assignment_operator_return retval = new IntegrityVariablesParserC_CSharp4Tree.assignment_operator_return();
        retval.start = input.LT(1);

        int assignment_operator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // CSharp4Tree.g:692:5: ( ^( ASSIGNMENT_OPERATOR assignment_operator2 ) )
            // CSharp4Tree.g:692:10: ^( ASSIGNMENT_OPERATOR assignment_operator2 )
            {
            match(input,ASSIGNMENT_OPERATOR,FOLLOW_ASSIGNMENT_OPERATOR_in_assignment_operator5367); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_assignment_operator2_in_assignment_operator5369);
            assignment_operator2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, assignment_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_operator"


    public static class assignment_operator2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "assignment_operator2"
    // CSharp4Tree.g:695:1: assignment_operator2 : ( ASSIGNMENT | OP_ADD_ASSIGNMENT | OP_SUB_ASSIGNMENT | OP_MULT_ASSIGNMENT | OP_DIV_ASSIGNMENT | OP_MOD_ASSIGNMENT | OP_AND_ASSIGNMENT | OP_OR_ASSIGNMENT | OP_XOR_ASSIGNMENT | OP_LEFT_SHIFT_ASSIGNMENT | right_shift_assignment );
    public final IntegrityVariablesParserC_CSharp4Tree.assignment_operator2_return assignment_operator2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.assignment_operator2_return retval = new IntegrityVariablesParserC_CSharp4Tree.assignment_operator2_return();
        retval.start = input.LT(1);

        int assignment_operator2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // CSharp4Tree.g:696:5: ( ASSIGNMENT | OP_ADD_ASSIGNMENT | OP_SUB_ASSIGNMENT | OP_MULT_ASSIGNMENT | OP_DIV_ASSIGNMENT | OP_MOD_ASSIGNMENT | OP_AND_ASSIGNMENT | OP_OR_ASSIGNMENT | OP_XOR_ASSIGNMENT | OP_LEFT_SHIFT_ASSIGNMENT | right_shift_assignment )
            int alt93=11;
            switch ( input.LA(1) ) {
            case ASSIGNMENT:
                {
                alt93=1;
                }
                break;
            case OP_ADD_ASSIGNMENT:
                {
                alt93=2;
                }
                break;
            case OP_SUB_ASSIGNMENT:
                {
                alt93=3;
                }
                break;
            case OP_MULT_ASSIGNMENT:
                {
                alt93=4;
                }
                break;
            case OP_DIV_ASSIGNMENT:
                {
                alt93=5;
                }
                break;
            case OP_MOD_ASSIGNMENT:
                {
                alt93=6;
                }
                break;
            case OP_AND_ASSIGNMENT:
                {
                alt93=7;
                }
                break;
            case OP_OR_ASSIGNMENT:
                {
                alt93=8;
                }
                break;
            case OP_XOR_ASSIGNMENT:
                {
                alt93=9;
                }
                break;
            case OP_LEFT_SHIFT_ASSIGNMENT:
                {
                alt93=10;
                }
                break;
            case OP_RIGHT_SHIFT_ASSIGNMENT:
                {
                alt93=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }

            switch (alt93) {
                case 1 :
                    // CSharp4Tree.g:696:10: ASSIGNMENT
                    {
                    match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_assignment_operator25390); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:697:10: OP_ADD_ASSIGNMENT
                    {
                    match(input,OP_ADD_ASSIGNMENT,FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator25401); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:698:10: OP_SUB_ASSIGNMENT
                    {
                    match(input,OP_SUB_ASSIGNMENT,FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator25412); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:699:10: OP_MULT_ASSIGNMENT
                    {
                    match(input,OP_MULT_ASSIGNMENT,FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator25423); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:700:10: OP_DIV_ASSIGNMENT
                    {
                    match(input,OP_DIV_ASSIGNMENT,FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator25434); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:701:10: OP_MOD_ASSIGNMENT
                    {
                    match(input,OP_MOD_ASSIGNMENT,FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator25445); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:702:10: OP_AND_ASSIGNMENT
                    {
                    match(input,OP_AND_ASSIGNMENT,FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator25456); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:703:10: OP_OR_ASSIGNMENT
                    {
                    match(input,OP_OR_ASSIGNMENT,FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator25467); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:704:10: OP_XOR_ASSIGNMENT
                    {
                    match(input,OP_XOR_ASSIGNMENT,FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator25478); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:705:10: OP_LEFT_SHIFT_ASSIGNMENT
                    {
                    match(input,OP_LEFT_SHIFT_ASSIGNMENT,FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator25489); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:706:10: right_shift_assignment
                    {
                    pushFollow(FOLLOW_right_shift_assignment_in_assignment_operator25500);
                    right_shift_assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, assignment_operator2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment_operator2"


    public static class expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression"
    // CSharp4Tree.g:709:1: expression : ( assignment | non_assignment_expression );
    public final IntegrityVariablesParserC_CSharp4Tree.expression_return expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.expression_return();
        retval.start = input.LT(1);

        int expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // CSharp4Tree.g:710:5: ( assignment | non_assignment_expression )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ASSIGNMENT_OPERATOR) ) {
                alt94=1;
            }
            else if ( (LA94_0==IDENTIFIER||LA94_0==OPEN_PARENS||LA94_0==OP_COALESCING||LA94_0==UNARY_EXPRESSION) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // CSharp4Tree.g:710:10: assignment
                    {
                    pushFollow(FOLLOW_assignment_in_expression5521);
                    assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:711:10: non_assignment_expression
                    {
                    pushFollow(FOLLOW_non_assignment_expression_in_expression5532);
                    non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class non_assignment_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_assignment_expression"
    // CSharp4Tree.g:714:1: non_assignment_expression : ( lambda_expression | query_expression | conditional_expression );
    public final IntegrityVariablesParserC_CSharp4Tree.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.non_assignment_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.non_assignment_expression_return();
        retval.start = input.LT(1);

        int non_assignment_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // CSharp4Tree.g:715:5: ( lambda_expression | query_expression | conditional_expression )
            int alt95=3;
            switch ( input.LA(1) ) {
            case OPEN_PARENS:
                {
                alt95=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA95_2 = input.LA(2);

                if ( (LA95_2==ASSIGNMENT) ) {
                    alt95=1;
                }
                else if ( (LA95_2==IDENTIFIER||LA95_2==TYPE) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);

                    throw nvae;

                }
                }
                break;
            case OP_COALESCING:
            case UNARY_EXPRESSION:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // CSharp4Tree.g:715:10: lambda_expression
                    {
                    pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression5552);
                    lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:716:10: query_expression
                    {
                    pushFollow(FOLLOW_query_expression_in_non_assignment_expression5563);
                    query_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:717:10: conditional_expression
                    {
                    pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression5574);
                    conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, non_assignment_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"


    public static class constant_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_expression"
    // CSharp4Tree.g:720:1: constant_expression : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.constant_expression_return constant_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constant_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.constant_expression_return();
        retval.start = input.LT(1);

        int constant_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // CSharp4Tree.g:721:5: ( expression )
            // CSharp4Tree.g:721:10: expression
            {
            pushFollow(FOLLOW_expression_in_constant_expression5595);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, constant_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_expression"


    public static class boolean_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_expression"
    // CSharp4Tree.g:724:1: boolean_expression : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.boolean_expression_return boolean_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.boolean_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.boolean_expression_return();
        retval.start = input.LT(1);

        int boolean_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // CSharp4Tree.g:725:5: ( expression )
            // CSharp4Tree.g:725:10: expression
            {
            pushFollow(FOLLOW_expression_in_boolean_expression5616);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, boolean_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolean_expression"


    public static class statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement"
    // CSharp4Tree.g:729:1: statement : ( labeled_statement | declaration_statement | embedded_statement );
    public final IntegrityVariablesParserC_CSharp4Tree.statement_return statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // CSharp4Tree.g:730:5: ( labeled_statement | declaration_statement | embedded_statement )
            int alt96=3;
            switch ( input.LA(1) ) {
            case LABELED_STATEMENT:
                {
                alt96=1;
                }
                break;
            case CONSTANT_DECLARATORS:
            case LOCAL_VARIABLE_DECLARATOR:
                {
                alt96=2;
                }
                break;
            case BREAK:
            case CHECKED:
            case CONTINUE:
            case DO:
            case FOR:
            case FOREACH:
            case GOTO:
            case IDENTIFIER:
            case IF:
            case LOCK:
            case RETURN:
            case SEMICOLON:
            case SWITCH:
            case THROW:
            case TRY:
            case UNCHECKED:
            case USING:
            case WHILE:
            case BLOCK:
            case EXPRESSION_STATEMENT:
                {
                alt96=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // CSharp4Tree.g:730:10: labeled_statement
                    {
                    pushFollow(FOLLOW_labeled_statement_in_statement5638);
                    labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:731:10: declaration_statement
                    {
                    pushFollow(FOLLOW_declaration_statement_in_statement5649);
                    declaration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:732:10: embedded_statement
                    {
                    pushFollow(FOLLOW_embedded_statement_in_statement5660);
                    embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class embedded_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "embedded_statement"
    // CSharp4Tree.g:735:1: embedded_statement : ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement );
    public final IntegrityVariablesParserC_CSharp4Tree.embedded_statement_return embedded_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.embedded_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.embedded_statement_return();
        retval.start = input.LT(1);

        int embedded_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // CSharp4Tree.g:736:5: ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement )
            int alt97=12;
            switch ( input.LA(1) ) {
            case BLOCK:
                {
                alt97=1;
                }
                break;
            case SEMICOLON:
                {
                alt97=2;
                }
                break;
            case EXPRESSION_STATEMENT:
                {
                alt97=3;
                }
                break;
            case IF:
            case SWITCH:
                {
                alt97=4;
                }
                break;
            case DO:
            case FOR:
            case FOREACH:
            case WHILE:
                {
                alt97=5;
                }
                break;
            case BREAK:
            case CONTINUE:
            case GOTO:
            case RETURN:
            case THROW:
                {
                alt97=6;
                }
                break;
            case TRY:
                {
                alt97=7;
                }
                break;
            case CHECKED:
                {
                alt97=8;
                }
                break;
            case UNCHECKED:
                {
                alt97=9;
                }
                break;
            case LOCK:
                {
                alt97=10;
                }
                break;
            case USING:
                {
                alt97=11;
                }
                break;
            case IDENTIFIER:
                {
                alt97=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // CSharp4Tree.g:736:10: block
                    {
                    pushFollow(FOLLOW_block_in_embedded_statement5681);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:737:10: empty_statement
                    {
                    pushFollow(FOLLOW_empty_statement_in_embedded_statement5692);
                    empty_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:738:10: expression_statement
                    {
                    pushFollow(FOLLOW_expression_statement_in_embedded_statement5703);
                    expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:739:10: selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_embedded_statement5714);
                    selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:740:10: iteration_statement
                    {
                    pushFollow(FOLLOW_iteration_statement_in_embedded_statement5725);
                    iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:741:10: jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_embedded_statement5736);
                    jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:742:10: try_statement
                    {
                    pushFollow(FOLLOW_try_statement_in_embedded_statement5747);
                    try_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:743:10: checked_statement
                    {
                    pushFollow(FOLLOW_checked_statement_in_embedded_statement5758);
                    checked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:744:10: unchecked_statement
                    {
                    pushFollow(FOLLOW_unchecked_statement_in_embedded_statement5769);
                    unchecked_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:745:10: lock_statement
                    {
                    pushFollow(FOLLOW_lock_statement_in_embedded_statement5780);
                    lock_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:746:10: using_statement
                    {
                    pushFollow(FOLLOW_using_statement_in_embedded_statement5791);
                    using_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:747:10: yield_statement
                    {
                    pushFollow(FOLLOW_yield_statement_in_embedded_statement5802);
                    yield_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, embedded_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "embedded_statement"


    public static class block_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "block"
    // CSharp4Tree.g:752:1: block : ^( BLOCK ( statement_list )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.block_return block() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.block_return retval = new IntegrityVariablesParserC_CSharp4Tree.block_return();
        retval.start = input.LT(1);

        int block_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // CSharp4Tree.g:753:5: ( ^( BLOCK ( statement_list )? ) )
            // CSharp4Tree.g:753:10: ^( BLOCK ( statement_list )? )
            {
            match(input,BLOCK,FOLLOW_BLOCK_in_block5828); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:753:18: ( statement_list )?
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==BREAK||LA98_0==CHECKED||LA98_0==CONTINUE||LA98_0==DO||(LA98_0 >= FOR && LA98_0 <= FOREACH)||LA98_0==GOTO||(LA98_0 >= IDENTIFIER && LA98_0 <= IF)||LA98_0==LOCK||LA98_0==RETURN||LA98_0==SEMICOLON||LA98_0==SWITCH||LA98_0==THROW||LA98_0==TRY||LA98_0==UNCHECKED||LA98_0==USING||LA98_0==WHILE||LA98_0==BLOCK||LA98_0==CONSTANT_DECLARATORS||LA98_0==EXPRESSION_STATEMENT||(LA98_0 >= LABELED_STATEMENT && LA98_0 <= LOCAL_VARIABLE_DECLARATOR)) ) {
                    alt98=1;
                }
                switch (alt98) {
                    case 1 :
                        // CSharp4Tree.g:753:18: statement_list
                        {
                        pushFollow(FOLLOW_statement_list_in_block5830);
                        statement_list();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "block"


    public static class statement_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_list"
    // CSharp4Tree.g:756:1: statement_list : ( statement )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.statement_list_return statement_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.statement_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.statement_list_return();
        retval.start = input.LT(1);

        int statement_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // CSharp4Tree.g:757:5: ( ( statement )+ )
            // CSharp4Tree.g:757:10: ( statement )+
            {
            // CSharp4Tree.g:757:10: ( statement )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==BREAK||LA99_0==CHECKED||LA99_0==CONTINUE||LA99_0==DO||(LA99_0 >= FOR && LA99_0 <= FOREACH)||LA99_0==GOTO||(LA99_0 >= IDENTIFIER && LA99_0 <= IF)||LA99_0==LOCK||LA99_0==RETURN||LA99_0==SEMICOLON||LA99_0==SWITCH||LA99_0==THROW||LA99_0==TRY||LA99_0==UNCHECKED||LA99_0==USING||LA99_0==WHILE||LA99_0==BLOCK||LA99_0==CONSTANT_DECLARATORS||LA99_0==EXPRESSION_STATEMENT||(LA99_0 >= LABELED_STATEMENT && LA99_0 <= LOCAL_VARIABLE_DECLARATOR)) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // CSharp4Tree.g:757:10: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list5853);
            	    statement();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, statement_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_list"


    public static class empty_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "empty_statement"
    // CSharp4Tree.g:760:1: empty_statement : SEMICOLON ;
    public final IntegrityVariablesParserC_CSharp4Tree.empty_statement_return empty_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.empty_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.empty_statement_return();
        retval.start = input.LT(1);

        int empty_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // CSharp4Tree.g:761:5: ( SEMICOLON )
            // CSharp4Tree.g:761:10: SEMICOLON
            {
            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_empty_statement5875); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, empty_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "empty_statement"


    public static class labeled_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "labeled_statement"
    // CSharp4Tree.g:765:1: labeled_statement : ^( LABELED_STATEMENT IDENTIFIER statement ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.labeled_statement_return labeled_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.labeled_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.labeled_statement_return();
        retval.start = input.LT(1);

        int labeled_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // CSharp4Tree.g:766:5: ( ^( LABELED_STATEMENT IDENTIFIER statement ) )
            // CSharp4Tree.g:766:10: ^( LABELED_STATEMENT IDENTIFIER statement )
            {
            match(input,LABELED_STATEMENT,FOLLOW_LABELED_STATEMENT_in_labeled_statement5899); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_labeled_statement5901); if (state.failed) return retval;

            pushFollow(FOLLOW_statement_in_labeled_statement5903);
            statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, labeled_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "labeled_statement"


    public static class declaration_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "declaration_statement"
    // CSharp4Tree.g:770:1: declaration_statement : ( local_variable_declaration | local_constant_declaration );
    public final IntegrityVariablesParserC_CSharp4Tree.declaration_statement_return declaration_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.declaration_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.declaration_statement_return();
        retval.start = input.LT(1);

        int declaration_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // CSharp4Tree.g:771:5: ( local_variable_declaration | local_constant_declaration )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==LOCAL_VARIABLE_DECLARATOR) ) {
                alt100=1;
            }
            else if ( (LA100_0==CONSTANT_DECLARATORS) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // CSharp4Tree.g:771:10: local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement5927);
                    local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:772:10: local_constant_declaration
                    {
                    pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement5938);
                    local_constant_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, declaration_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "declaration_statement"


    public static class local_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declaration"
    // CSharp4Tree.g:775:1: local_variable_declaration : local_variable_declarators ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_declaration_return();
        retval.start = input.LT(1);

        int local_variable_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // CSharp4Tree.g:776:5: ( local_variable_declarators )
            // CSharp4Tree.g:776:10: local_variable_declarators
            {
            pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration5959);
            local_variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, local_variable_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"


    public static class local_variable_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_type"
    // CSharp4Tree.g:779:1: local_variable_type : type ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_type_return local_variable_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_type_return();
        retval.start = input.LT(1);

        int local_variable_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // CSharp4Tree.g:780:5: ( type )
            // CSharp4Tree.g:780:10: type
            {
            pushFollow(FOLLOW_type_in_local_variable_type5980);
            type();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, local_variable_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_type"


    public static class local_variable_declarators_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarators"
    // CSharp4Tree.g:784:1: local_variable_declarators : ( ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator ) )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_declarators_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_declarators_return();
        retval.start = input.LT(1);

        int local_variable_declarators_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // CSharp4Tree.g:785:5: ( ( ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator ) )+ )
            // CSharp4Tree.g:785:10: ( ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator ) )+
            {
            // CSharp4Tree.g:785:10: ( ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator ) )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==LOCAL_VARIABLE_DECLARATOR) ) {
                    int LA101_2 = input.LA(2);

                    if ( (synpred273_CSharp4Tree()) ) {
                        alt101=1;
                    }


                }


                switch (alt101) {
            	case 1 :
            	    // CSharp4Tree.g:785:12: ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator )
            	    {
            	    match(input,LOCAL_VARIABLE_DECLARATOR,FOLLOW_LOCAL_VARIABLE_DECLARATOR_in_local_variable_declarators6007); if (state.failed) return retval;

            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators6009);
            	    local_variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input, Token.UP, null); if (state.failed) return retval;


            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, local_variable_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"


    public static class local_variable_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_declarator"
    // CSharp4Tree.g:788:1: local_variable_declarator : IDENTIFIER ( local_variable_initializer )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_declarator_return();
        retval.start = input.LT(1);

        int local_variable_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // CSharp4Tree.g:789:5: ( IDENTIFIER ( local_variable_initializer )? )
            // CSharp4Tree.g:789:10: IDENTIFIER ( local_variable_initializer )?
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_local_variable_declarator6034); if (state.failed) return retval;

            // CSharp4Tree.g:789:21: ( local_variable_initializer )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LOCAL_VARIABLE_INITIALIZER) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // CSharp4Tree.g:789:21: local_variable_initializer
                    {
                    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator6036);
                    local_variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, local_variable_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"


    public static class local_variable_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer"
    // CSharp4Tree.g:792:1: local_variable_initializer : ^( LOCAL_VARIABLE_INITIALIZER local_variable_initializer2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer_return();
        retval.start = input.LT(1);

        int local_variable_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // CSharp4Tree.g:793:5: ( ^( LOCAL_VARIABLE_INITIALIZER local_variable_initializer2 ) )
            // CSharp4Tree.g:793:10: ^( LOCAL_VARIABLE_INITIALIZER local_variable_initializer2 )
            {
            match(input,LOCAL_VARIABLE_INITIALIZER,FOLLOW_LOCAL_VARIABLE_INITIALIZER_in_local_variable_initializer6058); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_local_variable_initializer2_in_local_variable_initializer6060);
            local_variable_initializer2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, local_variable_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"


    public static class local_variable_initializer2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_variable_initializer2"
    // CSharp4Tree.g:796:1: local_variable_initializer2 : ( expression | array_initializer );
    public final IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer2_return local_variable_initializer2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer2_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_variable_initializer2_return();
        retval.start = input.LT(1);

        int local_variable_initializer2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // CSharp4Tree.g:797:5: ( expression | array_initializer )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==IDENTIFIER||LA103_0==OPEN_PARENS||LA103_0==OP_COALESCING||LA103_0==ASSIGNMENT_OPERATOR||LA103_0==UNARY_EXPRESSION) ) {
                alt103=1;
            }
            else if ( (LA103_0==OPEN_BRACE) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // CSharp4Tree.g:797:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_local_variable_initializer26081);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:798:10: array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_local_variable_initializer26092);
                    array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, local_variable_initializer2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer2"


    public static class local_constant_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "local_constant_declaration"
    // CSharp4Tree.g:803:1: local_constant_declaration : constant_declarators ;
    public final IntegrityVariablesParserC_CSharp4Tree.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.local_constant_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.local_constant_declaration_return();
        retval.start = input.LT(1);

        int local_constant_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // CSharp4Tree.g:804:5: ( constant_declarators )
            // CSharp4Tree.g:804:10: constant_declarators
            {
            pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration6115);
            constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, local_constant_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"


    public static class expression_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "expression_statement"
    // CSharp4Tree.g:807:1: expression_statement : ^( EXPRESSION_STATEMENT statement_expression ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.expression_statement_return expression_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.expression_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.expression_statement_return();
        retval.start = input.LT(1);

        int expression_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // CSharp4Tree.g:808:5: ( ^( EXPRESSION_STATEMENT statement_expression ) )
            // CSharp4Tree.g:808:10: ^( EXPRESSION_STATEMENT statement_expression )
            {
            match(input,EXPRESSION_STATEMENT,FOLLOW_EXPRESSION_STATEMENT_in_expression_statement6136); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_expression_in_expression_statement6138);
            statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, expression_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression_statement"


    public static class statement_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression"
    // CSharp4Tree.g:813:1: statement_expression : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.statement_expression_return statement_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.statement_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.statement_expression_return();
        retval.start = input.LT(1);

        int statement_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // CSharp4Tree.g:814:5: ( expression )
            // CSharp4Tree.g:814:10: expression
            {
            pushFollow(FOLLOW_expression_in_statement_expression6162);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, statement_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_expression"


    public static class selection_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "selection_statement"
    // CSharp4Tree.g:818:1: selection_statement : ( if_statement | switch_statement );
    public final IntegrityVariablesParserC_CSharp4Tree.selection_statement_return selection_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.selection_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.selection_statement_return();
        retval.start = input.LT(1);

        int selection_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // CSharp4Tree.g:819:5: ( if_statement | switch_statement )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==IF) ) {
                alt104=1;
            }
            else if ( (LA104_0==SWITCH) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // CSharp4Tree.g:819:10: if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_selection_statement6185);
                    if_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:820:10: switch_statement
                    {
                    pushFollow(FOLLOW_switch_statement_in_selection_statement6196);
                    switch_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, selection_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "selection_statement"


    public static class if_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "if_statement"
    // CSharp4Tree.g:824:1: if_statement : ^( IF ^( CONDITION boolean_expression ) ^( THEN embedded_statement ) ( ^( ELSE embedded_statement ) )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.if_statement_return if_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.if_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.if_statement_return();
        retval.start = input.LT(1);

        int if_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // CSharp4Tree.g:825:5: ( ^( IF ^( CONDITION boolean_expression ) ^( THEN embedded_statement ) ( ^( ELSE embedded_statement ) )? ) )
            // CSharp4Tree.g:825:10: ^( IF ^( CONDITION boolean_expression ) ^( THEN embedded_statement ) ( ^( ELSE embedded_statement ) )? )
            {
            match(input,IF,FOLLOW_IF_in_if_statement6219); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,CONDITION,FOLLOW_CONDITION_in_if_statement6222); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_boolean_expression_in_if_statement6224);
            boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input,THEN,FOLLOW_THEN_in_if_statement6242); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_embedded_statement_in_if_statement6244);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            // CSharp4Tree.g:827:15: ( ^( ELSE embedded_statement ) )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==ELSE) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // CSharp4Tree.g:827:17: ^( ELSE embedded_statement )
                    {
                    match(input,ELSE,FOLLOW_ELSE_in_if_statement6264); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_embedded_statement_in_if_statement6266);
                    embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, if_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class switch_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_statement"
    // CSharp4Tree.g:831:1: switch_statement : ^( SWITCH OPEN_PARENS expression CLOSE_PARENS switch_block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.switch_statement_return switch_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_statement_return();
        retval.start = input.LT(1);

        int switch_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // CSharp4Tree.g:832:5: ( ^( SWITCH OPEN_PARENS expression CLOSE_PARENS switch_block ) )
            // CSharp4Tree.g:832:10: ^( SWITCH OPEN_PARENS expression CLOSE_PARENS switch_block )
            {
            match(input,SWITCH,FOLLOW_SWITCH_in_switch_statement6304); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_switch_statement6306); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_switch_statement6308);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_switch_statement6310); if (state.failed) return retval;

            pushFollow(FOLLOW_switch_block_in_switch_statement6312);
            switch_block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, switch_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_statement"


    public static class switch_block_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_block"
    // CSharp4Tree.g:835:1: switch_block : OPEN_BRACE ( switch_sections )? CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.switch_block_return switch_block() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_block_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_block_return();
        retval.start = input.LT(1);

        int switch_block_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // CSharp4Tree.g:836:5: ( OPEN_BRACE ( switch_sections )? CLOSE_BRACE )
            // CSharp4Tree.g:836:10: OPEN_BRACE ( switch_sections )? CLOSE_BRACE
            {
            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_switch_block6334); if (state.failed) return retval;

            // CSharp4Tree.g:836:21: ( switch_sections )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==CASE||LA106_0==DEFAULT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // CSharp4Tree.g:836:21: switch_sections
                    {
                    pushFollow(FOLLOW_switch_sections_in_switch_block6336);
                    switch_sections();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_switch_block6339); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, switch_block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_block"


    public static class switch_sections_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_sections"
    // CSharp4Tree.g:839:1: switch_sections : ( switch_section )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.switch_sections_return switch_sections() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_sections_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_sections_return();
        retval.start = input.LT(1);

        int switch_sections_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // CSharp4Tree.g:840:5: ( ( switch_section )+ )
            // CSharp4Tree.g:840:10: ( switch_section )+
            {
            // CSharp4Tree.g:840:10: ( switch_section )+
            int cnt107=0;
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==CASE||LA107_0==DEFAULT) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // CSharp4Tree.g:840:10: switch_section
            	    {
            	    pushFollow(FOLLOW_switch_section_in_switch_sections6360);
            	    switch_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, switch_sections_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_sections"


    public static class switch_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_section"
    // CSharp4Tree.g:843:1: switch_section : switch_labels statement_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.switch_section_return switch_section() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_section_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_section_return();
        retval.start = input.LT(1);

        int switch_section_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // CSharp4Tree.g:844:5: ( switch_labels statement_list )
            // CSharp4Tree.g:844:10: switch_labels statement_list
            {
            pushFollow(FOLLOW_switch_labels_in_switch_section6382);
            switch_labels();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_statement_list_in_switch_section6384);
            statement_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, switch_section_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_section"


    public static class switch_labels_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_labels"
    // CSharp4Tree.g:847:1: switch_labels : ( switch_label )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.switch_labels_return switch_labels() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_labels_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_labels_return();
        retval.start = input.LT(1);

        int switch_labels_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // CSharp4Tree.g:848:5: ( ( switch_label )+ )
            // CSharp4Tree.g:848:10: ( switch_label )+
            {
            // CSharp4Tree.g:848:10: ( switch_label )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==CASE||LA108_0==DEFAULT) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // CSharp4Tree.g:848:10: switch_label
            	    {
            	    pushFollow(FOLLOW_switch_label_in_switch_labels6405);
            	    switch_label();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, switch_labels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_labels"


    public static class switch_label_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "switch_label"
    // CSharp4Tree.g:851:1: switch_label : ( CASE constant_expression COLON | DEFAULT COLON );
    public final IntegrityVariablesParserC_CSharp4Tree.switch_label_return switch_label() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.switch_label_return retval = new IntegrityVariablesParserC_CSharp4Tree.switch_label_return();
        retval.start = input.LT(1);

        int switch_label_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // CSharp4Tree.g:852:5: ( CASE constant_expression COLON | DEFAULT COLON )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==CASE) ) {
                alt109=1;
            }
            else if ( (LA109_0==DEFAULT) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // CSharp4Tree.g:852:10: CASE constant_expression COLON
                    {
                    match(input,CASE,FOLLOW_CASE_in_switch_label6427); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_switch_label6429);
                    constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label6431); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:853:10: DEFAULT COLON
                    {
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_switch_label6442); if (state.failed) return retval;

                    match(input,COLON,FOLLOW_COLON_in_switch_label6444); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 142, switch_label_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switch_label"


    public static class iteration_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "iteration_statement"
    // CSharp4Tree.g:857:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    public final IntegrityVariablesParserC_CSharp4Tree.iteration_statement_return iteration_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.iteration_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.iteration_statement_return();
        retval.start = input.LT(1);

        int iteration_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // CSharp4Tree.g:858:5: ( while_statement | do_statement | for_statement | foreach_statement )
            int alt110=4;
            switch ( input.LA(1) ) {
            case WHILE:
                {
                alt110=1;
                }
                break;
            case DO:
                {
                alt110=2;
                }
                break;
            case FOR:
                {
                alt110=3;
                }
                break;
            case FOREACH:
                {
                alt110=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
                case 1 :
                    // CSharp4Tree.g:858:10: while_statement
                    {
                    pushFollow(FOLLOW_while_statement_in_iteration_statement6467);
                    while_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:859:10: do_statement
                    {
                    pushFollow(FOLLOW_do_statement_in_iteration_statement6478);
                    do_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:860:10: for_statement
                    {
                    pushFollow(FOLLOW_for_statement_in_iteration_statement6489);
                    for_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:861:10: foreach_statement
                    {
                    pushFollow(FOLLOW_foreach_statement_in_iteration_statement6500);
                    foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 143, iteration_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "iteration_statement"


    public static class while_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "while_statement"
    // CSharp4Tree.g:864:1: while_statement : ^( WHILE ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.while_statement_return while_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.while_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.while_statement_return();
        retval.start = input.LT(1);

        int while_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // CSharp4Tree.g:865:5: ( ^( WHILE ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) ) )
            // CSharp4Tree.g:865:10: ^( WHILE ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) )
            {
            match(input,WHILE,FOLLOW_WHILE_in_while_statement6522); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,CONDITION,FOLLOW_CONDITION_in_while_statement6525); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_boolean_expression_in_while_statement6527);
            boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input,LOOP_BODY,FOLLOW_LOOP_BODY_in_while_statement6548); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_embedded_statement_in_while_statement6550);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 144, while_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "while_statement"


    public static class do_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "do_statement"
    // CSharp4Tree.g:870:1: do_statement : ^( DO ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.do_statement_return do_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.do_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.do_statement_return();
        retval.start = input.LT(1);

        int do_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // CSharp4Tree.g:871:5: ( ^( DO ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) ) )
            // CSharp4Tree.g:871:10: ^( DO ^( CONDITION boolean_expression ) ^( LOOP_BODY embedded_statement ) )
            {
            match(input,DO,FOLLOW_DO_in_do_statement6585); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,CONDITION,FOLLOW_CONDITION_in_do_statement6588); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_boolean_expression_in_do_statement6590);
            boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input,LOOP_BODY,FOLLOW_LOOP_BODY_in_do_statement6608); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_embedded_statement_in_do_statement6610);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 145, do_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "do_statement"


    public static class for_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_statement"
    // CSharp4Tree.g:876:1: for_statement : ^( FOR ( ^( FOR_INITIALIZER for_initializer ) )? ( ^( CONDITION for_condition ) )? ( ^( FOR_ITERATOR for_iterator ) )? ^( LOOP_BODY embedded_statement ) ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.for_statement_return for_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.for_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.for_statement_return();
        retval.start = input.LT(1);

        int for_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // CSharp4Tree.g:877:5: ( ^( FOR ( ^( FOR_INITIALIZER for_initializer ) )? ( ^( CONDITION for_condition ) )? ( ^( FOR_ITERATOR for_iterator ) )? ^( LOOP_BODY embedded_statement ) ) )
            // CSharp4Tree.g:877:10: ^( FOR ( ^( FOR_INITIALIZER for_initializer ) )? ( ^( CONDITION for_condition ) )? ( ^( FOR_ITERATOR for_iterator ) )? ^( LOOP_BODY embedded_statement ) )
            {
            match(input,FOR,FOLLOW_FOR_in_for_statement6645); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:877:16: ( ^( FOR_INITIALIZER for_initializer ) )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==FOR_INITIALIZER) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // CSharp4Tree.g:877:18: ^( FOR_INITIALIZER for_initializer )
                    {
                    match(input,FOR_INITIALIZER,FOLLOW_FOR_INITIALIZER_in_for_statement6650); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_for_initializer_in_for_statement6652);
                    for_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            // CSharp4Tree.g:878:16: ( ^( CONDITION for_condition ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==CONDITION) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // CSharp4Tree.g:878:18: ^( CONDITION for_condition )
                    {
                    match(input,CONDITION,FOLLOW_CONDITION_in_for_statement6676); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_for_condition_in_for_statement6678);
                    for_condition();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            // CSharp4Tree.g:879:16: ( ^( FOR_ITERATOR for_iterator ) )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==FOR_ITERATOR) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // CSharp4Tree.g:879:18: ^( FOR_ITERATOR for_iterator )
                    {
                    match(input,FOR_ITERATOR,FOLLOW_FOR_ITERATOR_in_for_statement6702); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_for_iterator_in_for_statement6705);
                    for_iterator();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            match(input,LOOP_BODY,FOLLOW_LOOP_BODY_in_for_statement6727); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_embedded_statement_in_for_statement6729);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 146, for_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_statement"


    public static class for_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_initializer"
    // CSharp4Tree.g:884:1: for_initializer : ( local_variable_declaration | statement_expression_list );
    public final IntegrityVariablesParserC_CSharp4Tree.for_initializer_return for_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.for_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.for_initializer_return();
        retval.start = input.LT(1);

        int for_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // CSharp4Tree.g:885:5: ( local_variable_declaration | statement_expression_list )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LOCAL_VARIABLE_DECLARATOR) ) {
                alt114=1;
            }
            else if ( (LA114_0==IDENTIFIER||LA114_0==OPEN_PARENS||LA114_0==OP_COALESCING||LA114_0==ASSIGNMENT_OPERATOR||LA114_0==UNARY_EXPRESSION) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // CSharp4Tree.g:885:10: local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_for_initializer6763);
                    local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:886:10: statement_expression_list
                    {
                    pushFollow(FOLLOW_statement_expression_list_in_for_initializer6774);
                    statement_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 147, for_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_initializer"


    public static class for_condition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_condition"
    // CSharp4Tree.g:889:1: for_condition : boolean_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.for_condition_return for_condition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.for_condition_return retval = new IntegrityVariablesParserC_CSharp4Tree.for_condition_return();
        retval.start = input.LT(1);

        int for_condition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // CSharp4Tree.g:890:5: ( boolean_expression )
            // CSharp4Tree.g:890:10: boolean_expression
            {
            pushFollow(FOLLOW_boolean_expression_in_for_condition6795);
            boolean_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 148, for_condition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_condition"


    public static class for_iterator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "for_iterator"
    // CSharp4Tree.g:893:1: for_iterator : statement_expression_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.for_iterator_return for_iterator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.for_iterator_return retval = new IntegrityVariablesParserC_CSharp4Tree.for_iterator_return();
        retval.start = input.LT(1);

        int for_iterator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // CSharp4Tree.g:894:5: ( statement_expression_list )
            // CSharp4Tree.g:894:10: statement_expression_list
            {
            pushFollow(FOLLOW_statement_expression_list_in_for_iterator6816);
            statement_expression_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 149, for_iterator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "for_iterator"


    public static class statement_expression_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "statement_expression_list"
    // CSharp4Tree.g:897:1: statement_expression_list : statement_expression ( COMMA statement_expression )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.statement_expression_list_return statement_expression_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.statement_expression_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.statement_expression_list_return();
        retval.start = input.LT(1);

        int statement_expression_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // CSharp4Tree.g:898:5: ( statement_expression ( COMMA statement_expression )* )
            // CSharp4Tree.g:898:10: statement_expression ( COMMA statement_expression )*
            {
            pushFollow(FOLLOW_statement_expression_in_statement_expression_list6837);
            statement_expression();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:898:31: ( COMMA statement_expression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // CSharp4Tree.g:898:32: COMMA statement_expression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_statement_expression_list6840); if (state.failed) return retval;

            	    pushFollow(FOLLOW_statement_expression_in_statement_expression_list6843);
            	    statement_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 150, statement_expression_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"


    public static class foreach_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "foreach_statement"
    // CSharp4Tree.g:901:1: foreach_statement : ^( FOREACH local_variable_type IDENTIFIER ^( IN expression ) embedded_statement ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.foreach_statement_return foreach_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.foreach_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.foreach_statement_return();
        retval.start = input.LT(1);

        int foreach_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // CSharp4Tree.g:902:5: ( ^( FOREACH local_variable_type IDENTIFIER ^( IN expression ) embedded_statement ) )
            // CSharp4Tree.g:902:10: ^( FOREACH local_variable_type IDENTIFIER ^( IN expression ) embedded_statement )
            {
            match(input,FOREACH,FOLLOW_FOREACH_in_foreach_statement6867); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_local_variable_type_in_foreach_statement6869);
            local_variable_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_foreach_statement6871); if (state.failed) return retval;

            match(input,IN,FOLLOW_IN_in_foreach_statement6874); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_foreach_statement6876);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            pushFollow(FOLLOW_embedded_statement_in_foreach_statement6879);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 151, foreach_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class jump_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "jump_statement"
    // CSharp4Tree.g:905:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    public final IntegrityVariablesParserC_CSharp4Tree.jump_statement_return jump_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.jump_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.jump_statement_return();
        retval.start = input.LT(1);

        int jump_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // CSharp4Tree.g:906:5: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
            int alt116=5;
            switch ( input.LA(1) ) {
            case BREAK:
                {
                alt116=1;
                }
                break;
            case CONTINUE:
                {
                alt116=2;
                }
                break;
            case GOTO:
                {
                alt116=3;
                }
                break;
            case RETURN:
                {
                alt116=4;
                }
                break;
            case THROW:
                {
                alt116=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // CSharp4Tree.g:906:10: break_statement
                    {
                    pushFollow(FOLLOW_break_statement_in_jump_statement6901);
                    break_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:907:10: continue_statement
                    {
                    pushFollow(FOLLOW_continue_statement_in_jump_statement6912);
                    continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:908:10: goto_statement
                    {
                    pushFollow(FOLLOW_goto_statement_in_jump_statement6923);
                    goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:909:10: return_statement
                    {
                    pushFollow(FOLLOW_return_statement_in_jump_statement6934);
                    return_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:910:10: throw_statement
                    {
                    pushFollow(FOLLOW_throw_statement_in_jump_statement6945);
                    throw_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 152, jump_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "jump_statement"


    public static class break_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "break_statement"
    // CSharp4Tree.g:913:1: break_statement : BREAK ;
    public final IntegrityVariablesParserC_CSharp4Tree.break_statement_return break_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.break_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.break_statement_return();
        retval.start = input.LT(1);

        int break_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // CSharp4Tree.g:915:5: ( BREAK )
            // CSharp4Tree.g:915:10: BREAK
            {
            match(input,BREAK,FOLLOW_BREAK_in_break_statement6967); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 153, break_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "break_statement"


    public static class continue_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "continue_statement"
    // CSharp4Tree.g:918:1: continue_statement : CONTINUE ;
    public final IntegrityVariablesParserC_CSharp4Tree.continue_statement_return continue_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.continue_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.continue_statement_return();
        retval.start = input.LT(1);

        int continue_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // CSharp4Tree.g:920:5: ( CONTINUE )
            // CSharp4Tree.g:920:10: CONTINUE
            {
            match(input,CONTINUE,FOLLOW_CONTINUE_in_continue_statement6989); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 154, continue_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "continue_statement"


    public static class goto_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "goto_statement"
    // CSharp4Tree.g:923:1: goto_statement : ( ^( GOTO IDENTIFIER SEMICOLON ) | ^( GOTO CASE constant_expression SEMICOLON ) | ^( GOTO DEFAULT SEMICOLON ) );
    public final IntegrityVariablesParserC_CSharp4Tree.goto_statement_return goto_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.goto_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.goto_statement_return();
        retval.start = input.LT(1);

        int goto_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // CSharp4Tree.g:924:5: ( ^( GOTO IDENTIFIER SEMICOLON ) | ^( GOTO CASE constant_expression SEMICOLON ) | ^( GOTO DEFAULT SEMICOLON ) )
            int alt117=3;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==GOTO) ) {
                int LA117_1 = input.LA(2);

                if ( (LA117_1==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case IDENTIFIER:
                        {
                        alt117=1;
                        }
                        break;
                    case CASE:
                        {
                        alt117=2;
                        }
                        break;
                    case DEFAULT:
                        {
                        alt117=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 2, input);

                        throw nvae;

                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // CSharp4Tree.g:924:10: ^( GOTO IDENTIFIER SEMICOLON )
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement7011); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_goto_statement7013); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement7015); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:925:10: ^( GOTO CASE constant_expression SEMICOLON )
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement7028); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,CASE,FOLLOW_CASE_in_goto_statement7030); if (state.failed) return retval;

                    pushFollow(FOLLOW_constant_expression_in_goto_statement7032);
                    constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement7034); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:926:10: ^( GOTO DEFAULT SEMICOLON )
                    {
                    match(input,GOTO,FOLLOW_GOTO_in_goto_statement7047); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_goto_statement7049); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_statement7051); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 155, goto_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class return_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_statement"
    // CSharp4Tree.g:929:1: return_statement : ^( RETURN ( expression )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.return_statement_return return_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.return_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.return_statement_return();
        retval.start = input.LT(1);

        int return_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // CSharp4Tree.g:930:5: ( ^( RETURN ( expression )? ) )
            // CSharp4Tree.g:930:10: ^( RETURN ( expression )? )
            {
            match(input,RETURN,FOLLOW_RETURN_in_return_statement7074); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:930:19: ( expression )?
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==IDENTIFIER||LA118_0==OPEN_PARENS||LA118_0==OP_COALESCING||LA118_0==ASSIGNMENT_OPERATOR||LA118_0==UNARY_EXPRESSION) ) {
                    alt118=1;
                }
                switch (alt118) {
                    case 1 :
                        // CSharp4Tree.g:930:19: expression
                        {
                        pushFollow(FOLLOW_expression_in_return_statement7076);
                        expression();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 156, return_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class throw_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "throw_statement"
    // CSharp4Tree.g:933:1: throw_statement : ^( THROW ( expression )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.throw_statement_return throw_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.throw_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.throw_statement_return();
        retval.start = input.LT(1);

        int throw_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // CSharp4Tree.g:934:5: ( ^( THROW ( expression )? ) )
            // CSharp4Tree.g:934:10: ^( THROW ( expression )? )
            {
            match(input,THROW,FOLLOW_THROW_in_throw_statement7100); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:934:18: ( expression )?
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==IDENTIFIER||LA119_0==OPEN_PARENS||LA119_0==OP_COALESCING||LA119_0==ASSIGNMENT_OPERATOR||LA119_0==UNARY_EXPRESSION) ) {
                    alt119=1;
                }
                switch (alt119) {
                    case 1 :
                        // CSharp4Tree.g:934:18: expression
                        {
                        pushFollow(FOLLOW_expression_in_throw_statement7102);
                        expression();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 157, throw_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "throw_statement"


    public static class try_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "try_statement"
    // CSharp4Tree.g:937:1: try_statement : ^( TRY block ( catch_clauses )? ( finally_clause )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.try_statement_return try_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.try_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.try_statement_return();
        retval.start = input.LT(1);

        int try_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // CSharp4Tree.g:938:5: ( ^( TRY block ( catch_clauses )? ( finally_clause )? ) )
            // CSharp4Tree.g:938:10: ^( TRY block ( catch_clauses )? ( finally_clause )? )
            {
            match(input,TRY,FOLLOW_TRY_in_try_statement7126); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_try_statement7128);
            block();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:938:22: ( catch_clauses )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==CATCH) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // CSharp4Tree.g:938:22: catch_clauses
                    {
                    pushFollow(FOLLOW_catch_clauses_in_try_statement7130);
                    catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:938:37: ( finally_clause )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==FINALLY) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // CSharp4Tree.g:938:37: finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_statement7133);
                    finally_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 158, try_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "try_statement"


    public static class catch_clauses_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "catch_clauses"
    // CSharp4Tree.g:941:1: catch_clauses : ( specific_catch_clauses ( general_catch_clause )? | general_catch_clause );
    public final IntegrityVariablesParserC_CSharp4Tree.catch_clauses_return catch_clauses() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.catch_clauses_return retval = new IntegrityVariablesParserC_CSharp4Tree.catch_clauses_return();
        retval.start = input.LT(1);

        int catch_clauses_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // CSharp4Tree.g:942:5: ( specific_catch_clauses ( general_catch_clause )? | general_catch_clause )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==CATCH) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==DOWN) ) {
                    int LA123_2 = input.LA(3);

                    if ( (LA123_2==OPEN_PARENS) ) {
                        alt123=1;
                    }
                    else if ( (LA123_2==BLOCK) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // CSharp4Tree.g:942:10: specific_catch_clauses ( general_catch_clause )?
                    {
                    pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses7156);
                    specific_catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:942:33: ( general_catch_clause )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==CATCH) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // CSharp4Tree.g:942:33: general_catch_clause
                            {
                            pushFollow(FOLLOW_general_catch_clause_in_catch_clauses7158);
                            general_catch_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:943:10: general_catch_clause
                    {
                    pushFollow(FOLLOW_general_catch_clause_in_catch_clauses7170);
                    general_catch_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 159, catch_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "catch_clauses"


    public static class specific_catch_clauses_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clauses"
    // CSharp4Tree.g:946:1: specific_catch_clauses : ( specific_catch_clause )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.specific_catch_clauses_return retval = new IntegrityVariablesParserC_CSharp4Tree.specific_catch_clauses_return();
        retval.start = input.LT(1);

        int specific_catch_clauses_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // CSharp4Tree.g:947:5: ( ( specific_catch_clause )+ )
            // CSharp4Tree.g:947:10: ( specific_catch_clause )+
            {
            // CSharp4Tree.g:947:10: ( specific_catch_clause )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==CATCH) ) {
                    int LA124_1 = input.LA(2);

                    if ( (LA124_1==DOWN) ) {
                        int LA124_3 = input.LA(3);

                        if ( (LA124_3==OPEN_PARENS) ) {
                            alt124=1;
                        }


                    }


                }


                switch (alt124) {
            	case 1 :
            	    // CSharp4Tree.g:947:10: specific_catch_clause
            	    {
            	    pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses7191);
            	    specific_catch_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 160, specific_catch_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"


    public static class specific_catch_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "specific_catch_clause"
    // CSharp4Tree.g:950:1: specific_catch_clause : ^( CATCH OPEN_PARENS class_type ( IDENTIFIER )? CLOSE_PARENS block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.specific_catch_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.specific_catch_clause_return();
        retval.start = input.LT(1);

        int specific_catch_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // CSharp4Tree.g:951:5: ( ^( CATCH OPEN_PARENS class_type ( IDENTIFIER )? CLOSE_PARENS block ) )
            // CSharp4Tree.g:951:10: ^( CATCH OPEN_PARENS class_type ( IDENTIFIER )? CLOSE_PARENS block )
            {
            match(input,CATCH,FOLLOW_CATCH_in_specific_catch_clause7214); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_specific_catch_clause7216); if (state.failed) return retval;

            pushFollow(FOLLOW_class_type_in_specific_catch_clause7218);
            class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:951:41: ( IDENTIFIER )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IDENTIFIER) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // CSharp4Tree.g:951:41: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_specific_catch_clause7220); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_specific_catch_clause7223); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_specific_catch_clause7225);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 161, specific_catch_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"


    public static class general_catch_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "general_catch_clause"
    // CSharp4Tree.g:954:1: general_catch_clause : ^( CATCH block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.general_catch_clause_return general_catch_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.general_catch_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.general_catch_clause_return();
        retval.start = input.LT(1);

        int general_catch_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // CSharp4Tree.g:955:5: ( ^( CATCH block ) )
            // CSharp4Tree.g:955:10: ^( CATCH block )
            {
            match(input,CATCH,FOLLOW_CATCH_in_general_catch_clause7248); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_general_catch_clause7250);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 162, general_catch_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"


    public static class finally_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "finally_clause"
    // CSharp4Tree.g:958:1: finally_clause : ^( FINALLY block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.finally_clause_return finally_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.finally_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.finally_clause_return();
        retval.start = input.LT(1);

        int finally_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // CSharp4Tree.g:959:5: ( ^( FINALLY block ) )
            // CSharp4Tree.g:959:10: ^( FINALLY block )
            {
            match(input,FINALLY,FOLLOW_FINALLY_in_finally_clause7273); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_finally_clause7275);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 163, finally_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class checked_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "checked_statement"
    // CSharp4Tree.g:962:1: checked_statement : ^( CHECKED block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.checked_statement_return checked_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.checked_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.checked_statement_return();
        retval.start = input.LT(1);

        int checked_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // CSharp4Tree.g:963:5: ( ^( CHECKED block ) )
            // CSharp4Tree.g:963:10: ^( CHECKED block )
            {
            match(input,CHECKED,FOLLOW_CHECKED_in_checked_statement7298); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_checked_statement7300);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 164, checked_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "checked_statement"


    public static class unchecked_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unchecked_statement"
    // CSharp4Tree.g:966:1: unchecked_statement : ^( UNCHECKED block ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.unchecked_statement_return unchecked_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unchecked_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.unchecked_statement_return();
        retval.start = input.LT(1);

        int unchecked_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

            // CSharp4Tree.g:967:5: ( ^( UNCHECKED block ) )
            // CSharp4Tree.g:967:10: ^( UNCHECKED block )
            {
            match(input,UNCHECKED,FOLLOW_UNCHECKED_in_unchecked_statement7323); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_unchecked_statement7325);
            block();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 165, unchecked_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"


    public static class lock_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "lock_statement"
    // CSharp4Tree.g:970:1: lock_statement : ^( LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.lock_statement_return lock_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.lock_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.lock_statement_return();
        retval.start = input.LT(1);

        int lock_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

            // CSharp4Tree.g:971:5: ( ^( LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement ) )
            // CSharp4Tree.g:971:10: ^( LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement )
            {
            match(input,LOCK,FOLLOW_LOCK_in_lock_statement7348); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_lock_statement7350); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_in_lock_statement7352);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_lock_statement7354); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_lock_statement7356);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 166, lock_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "lock_statement"


    public static class using_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_statement"
    // CSharp4Tree.g:974:1: using_statement : ^( USING OPEN_PARENS resource_acquisition CLOSE_PARENS embedded_statement ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.using_statement_return using_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.using_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.using_statement_return();
        retval.start = input.LT(1);

        int using_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

            // CSharp4Tree.g:975:5: ( ^( USING OPEN_PARENS resource_acquisition CLOSE_PARENS embedded_statement ) )
            // CSharp4Tree.g:975:10: ^( USING OPEN_PARENS resource_acquisition CLOSE_PARENS embedded_statement )
            {
            match(input,USING,FOLLOW_USING_in_using_statement7379); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_using_statement7381); if (state.failed) return retval;

            pushFollow(FOLLOW_resource_acquisition_in_using_statement7383);
            resource_acquisition();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_using_statement7385); if (state.failed) return retval;

            pushFollow(FOLLOW_embedded_statement_in_using_statement7387);
            embedded_statement();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 167, using_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_statement"


    public static class resource_acquisition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "resource_acquisition"
    // CSharp4Tree.g:978:1: resource_acquisition : ( local_variable_declaration | expression );
    public final IntegrityVariablesParserC_CSharp4Tree.resource_acquisition_return resource_acquisition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.resource_acquisition_return retval = new IntegrityVariablesParserC_CSharp4Tree.resource_acquisition_return();
        retval.start = input.LT(1);

        int resource_acquisition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

            // CSharp4Tree.g:979:5: ( local_variable_declaration | expression )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==LOCAL_VARIABLE_DECLARATOR) ) {
                alt126=1;
            }
            else if ( (LA126_0==IDENTIFIER||LA126_0==OPEN_PARENS||LA126_0==OP_COALESCING||LA126_0==ASSIGNMENT_OPERATOR||LA126_0==UNARY_EXPRESSION) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // CSharp4Tree.g:979:10: local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition7409);
                    local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:980:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_resource_acquisition7420);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 168, resource_acquisition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"


    public static class yield_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_statement"
    // CSharp4Tree.g:983:1: yield_statement : ( yield_contextual_keyword RETURN expression SEMICOLON | yield_contextual_keyword BREAK SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.yield_statement_return yield_statement() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.yield_statement_return retval = new IntegrityVariablesParserC_CSharp4Tree.yield_statement_return();
        retval.start = input.LT(1);

        int yield_statement_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

            // CSharp4Tree.g:984:5: ( yield_contextual_keyword RETURN expression SEMICOLON | yield_contextual_keyword BREAK SEMICOLON )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==IDENTIFIER) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==RETURN) ) {
                    alt127=1;
                }
                else if ( (LA127_1==BREAK) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }
            switch (alt127) {
                case 1 :
                    // CSharp4Tree.g:984:10: yield_contextual_keyword RETURN expression SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement7441);
                    yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,RETURN,FOLLOW_RETURN_in_yield_statement7443); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_yield_statement7445);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement7447); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:985:10: yield_contextual_keyword BREAK SEMICOLON
                    {
                    pushFollow(FOLLOW_yield_contextual_keyword_in_yield_statement7458);
                    yield_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,BREAK,FOLLOW_BREAK_in_yield_statement7460); if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_yield_statement7462); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 169, yield_statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "yield_statement"


    public static class namespace_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_declaration"
    // CSharp4Tree.g:997:1: namespace_declaration : ^( NAMESPACE qualified_identifier namespace_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_declaration_return namespace_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_declaration_return();
        retval.start = input.LT(1);

        int namespace_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

            // CSharp4Tree.g:998:5: ( ^( NAMESPACE qualified_identifier namespace_body ) )
            // CSharp4Tree.g:998:10: ^( NAMESPACE qualified_identifier namespace_body )
            {
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespace_declaration7528); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration7530);
            qualified_identifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_body_in_namespace_declaration7532);
            namespace_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 171, namespace_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"


    public static class qualified_identifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_identifier"
    // CSharp4Tree.g:1001:1: qualified_identifier : ^( QUALIFIED_IDENTIFIER ( IDENTIFIER )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.qualified_identifier_return qualified_identifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.qualified_identifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.qualified_identifier_return();
        retval.start = input.LT(1);

        int qualified_identifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

            // CSharp4Tree.g:1002:5: ( ^( QUALIFIED_IDENTIFIER ( IDENTIFIER )+ ) )
            // CSharp4Tree.g:1002:10: ^( QUALIFIED_IDENTIFIER ( IDENTIFIER )+ )
            {
            match(input,QUALIFIED_IDENTIFIER,FOLLOW_QUALIFIED_IDENTIFIER_in_qualified_identifier7555); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1002:33: ( IDENTIFIER )+
            int cnt132=0;
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==IDENTIFIER) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // CSharp4Tree.g:1002:33: IDENTIFIER
            	    {
            	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_identifier7557); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt132 >= 1 ) break loop132;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(132, input);
                        throw eee;
                }
                cnt132++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 172, qualified_identifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"


    public static class namespace_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_body"
    // CSharp4Tree.g:1005:1: namespace_body : ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_body_return namespace_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_body_return();
        retval.start = input.LT(1);

        int namespace_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

            // CSharp4Tree.g:1006:5: ( ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? )
            // CSharp4Tree.g:1006:10: ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )?
            {
            // CSharp4Tree.g:1006:10: ( extern_alias_directives )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EXTERN_ALIAS_DIRECTIVES) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // CSharp4Tree.g:1006:10: extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_namespace_body7580);
                    extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1006:35: ( using_directives )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==USING_DIRECTIVES) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // CSharp4Tree.g:1006:35: using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_namespace_body7583);
                    using_directives();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1006:53: ( namespace_member_declarations )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==NAMESPACE_MEMBER_DECLARATIONS) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // CSharp4Tree.g:1006:53: namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body7586);
                    namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 173, namespace_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_body"


    public static class extern_alias_directives_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directives"
    // CSharp4Tree.g:1009:1: extern_alias_directives : ^( EXTERN_ALIAS_DIRECTIVES ( extern_alias_directive )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.extern_alias_directives_return retval = new IntegrityVariablesParserC_CSharp4Tree.extern_alias_directives_return();
        retval.start = input.LT(1);

        int extern_alias_directives_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

            // CSharp4Tree.g:1010:5: ( ^( EXTERN_ALIAS_DIRECTIVES ( extern_alias_directive )+ ) )
            // CSharp4Tree.g:1010:10: ^( EXTERN_ALIAS_DIRECTIVES ( extern_alias_directive )+ )
            {
            match(input,EXTERN_ALIAS_DIRECTIVES,FOLLOW_EXTERN_ALIAS_DIRECTIVES_in_extern_alias_directives7608); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1010:36: ( extern_alias_directive )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==EXTERN) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // CSharp4Tree.g:1010:36: extern_alias_directive
            	    {
            	    pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives7610);
            	    extern_alias_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 174, extern_alias_directives_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"


    public static class extern_alias_directive_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "extern_alias_directive"
    // CSharp4Tree.g:1013:1: extern_alias_directive : ^( EXTERN IDENTIFIER ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.extern_alias_directive_return retval = new IntegrityVariablesParserC_CSharp4Tree.extern_alias_directive_return();
        retval.start = input.LT(1);

        int extern_alias_directive_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

            // CSharp4Tree.g:1014:5: ( ^( EXTERN IDENTIFIER ) )
            // CSharp4Tree.g:1014:10: ^( EXTERN IDENTIFIER )
            {
            match(input,EXTERN,FOLLOW_EXTERN_in_extern_alias_directive7633); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_extern_alias_directive7635); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 175, extern_alias_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"


    public static class using_directives_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directives"
    // CSharp4Tree.g:1017:1: using_directives : ^( USING_DIRECTIVES ( using_directive )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.using_directives_return using_directives() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.using_directives_return retval = new IntegrityVariablesParserC_CSharp4Tree.using_directives_return();
        retval.start = input.LT(1);

        int using_directives_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

            // CSharp4Tree.g:1018:5: ( ^( USING_DIRECTIVES ( using_directive )+ ) )
            // CSharp4Tree.g:1018:10: ^( USING_DIRECTIVES ( using_directive )+ )
            {
            match(input,USING_DIRECTIVES,FOLLOW_USING_DIRECTIVES_in_using_directives7658); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1018:29: ( using_directive )+
            int cnt137=0;
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==USING_ALIAS_DIRECTIVE||LA137_0==USING_NAMESPACE_DIRECTIVE) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // CSharp4Tree.g:1018:29: using_directive
            	    {
            	    pushFollow(FOLLOW_using_directive_in_using_directives7660);
            	    using_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt137 >= 1 ) break loop137;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(137, input);
                        throw eee;
                }
                cnt137++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 176, using_directives_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_directives"


    public static class using_directive_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_directive"
    // CSharp4Tree.g:1021:1: using_directive : ( using_alias_directive | using_namespace_directive );
    public final IntegrityVariablesParserC_CSharp4Tree.using_directive_return using_directive() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.using_directive_return retval = new IntegrityVariablesParserC_CSharp4Tree.using_directive_return();
        retval.start = input.LT(1);

        int using_directive_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

            // CSharp4Tree.g:1022:5: ( using_alias_directive | using_namespace_directive )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==USING_ALIAS_DIRECTIVE) ) {
                alt138=1;
            }
            else if ( (LA138_0==USING_NAMESPACE_DIRECTIVE) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // CSharp4Tree.g:1022:10: using_alias_directive
                    {
                    pushFollow(FOLLOW_using_alias_directive_in_using_directive7683);
                    using_alias_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1023:10: using_namespace_directive
                    {
                    pushFollow(FOLLOW_using_namespace_directive_in_using_directive7694);
                    using_namespace_directive();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 177, using_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_directive"


    public static class using_alias_directive_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_alias_directive"
    // CSharp4Tree.g:1026:1: using_alias_directive : ^( USING_ALIAS_DIRECTIVE IDENTIFIER namespace_or_type_name ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.using_alias_directive_return using_alias_directive() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.using_alias_directive_return retval = new IntegrityVariablesParserC_CSharp4Tree.using_alias_directive_return();
        retval.start = input.LT(1);

        int using_alias_directive_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

            // CSharp4Tree.g:1027:5: ( ^( USING_ALIAS_DIRECTIVE IDENTIFIER namespace_or_type_name ) )
            // CSharp4Tree.g:1027:10: ^( USING_ALIAS_DIRECTIVE IDENTIFIER namespace_or_type_name )
            {
            match(input,USING_ALIAS_DIRECTIVE,FOLLOW_USING_ALIAS_DIRECTIVE_in_using_alias_directive7716); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_using_alias_directive7718); if (state.failed) return retval;

            pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive7720);
            namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 178, using_alias_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"


    public static class using_namespace_directive_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "using_namespace_directive"
    // CSharp4Tree.g:1030:1: using_namespace_directive : ^( USING_NAMESPACE_DIRECTIVE namespace_name ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.using_namespace_directive_return retval = new IntegrityVariablesParserC_CSharp4Tree.using_namespace_directive_return();
        retval.start = input.LT(1);

        int using_namespace_directive_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

            // CSharp4Tree.g:1031:5: ( ^( USING_NAMESPACE_DIRECTIVE namespace_name ) )
            // CSharp4Tree.g:1031:10: ^( USING_NAMESPACE_DIRECTIVE namespace_name )
            {
            match(input,USING_NAMESPACE_DIRECTIVE,FOLLOW_USING_NAMESPACE_DIRECTIVE_in_using_namespace_directive7743); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_namespace_name_in_using_namespace_directive7745);
            namespace_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 179, using_namespace_directive_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"


    public static class namespace_member_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declarations"
    // CSharp4Tree.g:1034:1: namespace_member_declarations : ^( NAMESPACE_MEMBER_DECLARATIONS ( namespace_member_declaration )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_member_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_member_declarations_return();
        retval.start = input.LT(1);

        int namespace_member_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

            // CSharp4Tree.g:1035:5: ( ^( NAMESPACE_MEMBER_DECLARATIONS ( namespace_member_declaration )+ ) )
            // CSharp4Tree.g:1035:10: ^( NAMESPACE_MEMBER_DECLARATIONS ( namespace_member_declaration )+ )
            {
            match(input,NAMESPACE_MEMBER_DECLARATIONS,FOLLOW_NAMESPACE_MEMBER_DECLARATIONS_in_namespace_member_declarations7768); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1035:42: ( namespace_member_declaration )+
            int cnt139=0;
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==CLASS||LA139_0==DELEGATE||LA139_0==ENUM||LA139_0==INTERFACE||LA139_0==NAMESPACE||LA139_0==STRUCT) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // CSharp4Tree.g:1035:42: namespace_member_declaration
            	    {
            	    pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations7770);
            	    namespace_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 180, namespace_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"


    public static class namespace_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "namespace_member_declaration"
    // CSharp4Tree.g:1038:1: namespace_member_declaration : ( namespace_declaration | type_declaration );
    public final IntegrityVariablesParserC_CSharp4Tree.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.namespace_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.namespace_member_declaration_return();
        retval.start = input.LT(1);

        int namespace_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

            // CSharp4Tree.g:1039:5: ( namespace_declaration | type_declaration )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==NAMESPACE) ) {
                alt140=1;
            }
            else if ( (LA140_0==CLASS||LA140_0==DELEGATE||LA140_0==ENUM||LA140_0==INTERFACE||LA140_0==STRUCT) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // CSharp4Tree.g:1039:10: namespace_declaration
                    {
                    pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration7793);
                    namespace_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1040:10: type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration7804);
                    type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 181, namespace_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"


    public static class type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_declaration"
    // CSharp4Tree.g:1043:1: type_declaration : ( ^( class_definition ( attributes )? ( all_member_modifiers )? ) | ^( struct_definition ( attributes )? ( all_member_modifiers )? ) | ^( interface_definition ( attributes )? ( all_member_modifiers )? ) | ^( enum_definition ( attributes )? ( all_member_modifiers )? ) | ^( delegate_definition ( attributes )? ( all_member_modifiers )? ) );
    public final IntegrityVariablesParserC_CSharp4Tree.type_declaration_return type_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_declaration_return();
        retval.start = input.LT(1);

        int type_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

            // CSharp4Tree.g:1044:5: ( ^( class_definition ( attributes )? ( all_member_modifiers )? ) | ^( struct_definition ( attributes )? ( all_member_modifiers )? ) | ^( interface_definition ( attributes )? ( all_member_modifiers )? ) | ^( enum_definition ( attributes )? ( all_member_modifiers )? ) | ^( delegate_definition ( attributes )? ( all_member_modifiers )? ) )
            int alt151=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt151=1;
                }
                break;
            case STRUCT:
                {
                alt151=2;
                }
                break;
            case INTERFACE:
                {
                alt151=3;
                }
                break;
            case ENUM:
                {
                alt151=4;
                }
                break;
            case DELEGATE:
                {
                alt151=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }

            switch (alt151) {
                case 1 :
                    // CSharp4Tree.g:1044:10: ^( class_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_class_definition_in_type_declaration7826);
                    class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1044:29: ( attributes )?
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==ATTRIBUTES) ) {
                            alt141=1;
                        }
                        switch (alt141) {
                            case 1 :
                                // CSharp4Tree.g:1044:29: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_type_declaration7828);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1044:41: ( all_member_modifiers )?
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==MODIFIERS) ) {
                            alt142=1;
                        }
                        switch (alt142) {
                            case 1 :
                                // CSharp4Tree.g:1044:41: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_type_declaration7831);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1045:10: ^( struct_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_struct_definition_in_type_declaration7845);
                    struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1045:30: ( attributes )?
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==ATTRIBUTES) ) {
                            alt143=1;
                        }
                        switch (alt143) {
                            case 1 :
                                // CSharp4Tree.g:1045:30: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_type_declaration7847);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1045:42: ( all_member_modifiers )?
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==MODIFIERS) ) {
                            alt144=1;
                        }
                        switch (alt144) {
                            case 1 :
                                // CSharp4Tree.g:1045:42: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_type_declaration7850);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1046:10: ^( interface_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_interface_definition_in_type_declaration7864);
                    interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1046:33: ( attributes )?
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==ATTRIBUTES) ) {
                            alt145=1;
                        }
                        switch (alt145) {
                            case 1 :
                                // CSharp4Tree.g:1046:33: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_type_declaration7866);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1046:45: ( all_member_modifiers )?
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==MODIFIERS) ) {
                            alt146=1;
                        }
                        switch (alt146) {
                            case 1 :
                                // CSharp4Tree.g:1046:45: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_type_declaration7869);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1047:10: ^( enum_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_enum_definition_in_type_declaration7883);
                    enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1047:28: ( attributes )?
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==ATTRIBUTES) ) {
                            alt147=1;
                        }
                        switch (alt147) {
                            case 1 :
                                // CSharp4Tree.g:1047:28: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_type_declaration7885);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1047:40: ( all_member_modifiers )?
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==MODIFIERS) ) {
                            alt148=1;
                        }
                        switch (alt148) {
                            case 1 :
                                // CSharp4Tree.g:1047:40: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_type_declaration7888);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1048:10: ^( delegate_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_delegate_definition_in_type_declaration7902);
                    delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1048:32: ( attributes )?
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==ATTRIBUTES) ) {
                            alt149=1;
                        }
                        switch (alt149) {
                            case 1 :
                                // CSharp4Tree.g:1048:32: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_type_declaration7904);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1048:44: ( all_member_modifiers )?
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==MODIFIERS) ) {
                            alt150=1;
                        }
                        switch (alt150) {
                            case 1 :
                                // CSharp4Tree.g:1048:44: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_type_declaration7907);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 182, type_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class qualified_alias_member_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "qualified_alias_member"
    // CSharp4Tree.g:1052:1: qualified_alias_member : ^( QUALIFIED_ALIAS_MEMBER IDENTIFIER IDENTIFIER ( type_argument_list_opt )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.qualified_alias_member_return qualified_alias_member() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.qualified_alias_member_return retval = new IntegrityVariablesParserC_CSharp4Tree.qualified_alias_member_return();
        retval.start = input.LT(1);

        int qualified_alias_member_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

            // CSharp4Tree.g:1053:5: ( ^( QUALIFIED_ALIAS_MEMBER IDENTIFIER IDENTIFIER ( type_argument_list_opt )? ) )
            // CSharp4Tree.g:1053:10: ^( QUALIFIED_ALIAS_MEMBER IDENTIFIER IDENTIFIER ( type_argument_list_opt )? )
            {
            match(input,QUALIFIED_ALIAS_MEMBER,FOLLOW_QUALIFIED_ALIAS_MEMBER_in_qualified_alias_member7933); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member7935); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_alias_member7937); if (state.failed) return retval;

            // CSharp4Tree.g:1053:57: ( type_argument_list_opt )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==TYPE_ARGUMENT_LIST) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // CSharp4Tree.g:1053:57: type_argument_list_opt
                    {
                    pushFollow(FOLLOW_type_argument_list_opt_in_qualified_alias_member7939);
                    type_argument_list_opt();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 183, qualified_alias_member_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualified_alias_member"


    public static class class_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_declaration"
    // CSharp4Tree.g:1058:1: class_declaration : ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_declaration_return class_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_declaration_return();
        retval.start = input.LT(1);

        int class_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

            // CSharp4Tree.g:1059:5: ( ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )? )
            // CSharp4Tree.g:1059:10: ( attributes )? ( class_modifiers )? ( partial_contextual_keyword )? CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( SEMICOLON )?
            {
            // CSharp4Tree.g:1059:10: ( attributes )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==ATTRIBUTES) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // CSharp4Tree.g:1059:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_class_declaration7964);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1059:22: ( class_modifiers )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==ABSTRACT||LA154_0==INTERNAL||LA154_0==NEW||(LA154_0 >= PRIVATE && LA154_0 <= PUBLIC)||LA154_0==STATIC||LA154_0==EALED) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // CSharp4Tree.g:1059:22: class_modifiers
                    {
                    pushFollow(FOLLOW_class_modifiers_in_class_declaration7967);
                    class_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1059:39: ( partial_contextual_keyword )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==IDENTIFIER) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // CSharp4Tree.g:1059:39: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_class_declaration7970);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLASS,FOLLOW_CLASS_in_class_declaration7973); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_declaration7984); if (state.failed) return retval;

            // CSharp4Tree.g:1060:21: ( type_parameter_list )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==TYPE_PARAMETERS) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // CSharp4Tree.g:1060:21: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_declaration7986);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1060:42: ( class_base )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==EXTENDS_OR_IMPLEMENTS) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // CSharp4Tree.g:1060:42: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_declaration7989);
                    class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1061:10: ( type_parameter_constraints_clauses )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // CSharp4Tree.g:1061:10: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration8001);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_declaration8004);
            class_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1061:57: ( SEMICOLON )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==SEMICOLON) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // CSharp4Tree.g:1061:57: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_class_declaration8006); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 184, class_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_declaration"


    public static class class_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifiers"
    // CSharp4Tree.g:1064:1: class_modifiers : class_modifier ( class_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_modifiers_return class_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_modifiers_return();
        retval.start = input.LT(1);

        int class_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

            // CSharp4Tree.g:1065:5: ( class_modifier ( class_modifier )* )
            // CSharp4Tree.g:1065:10: class_modifier ( class_modifier )*
            {
            pushFollow(FOLLOW_class_modifier_in_class_modifiers8028);
            class_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1065:25: ( class_modifier )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==ABSTRACT||LA160_0==INTERNAL||LA160_0==NEW||(LA160_0 >= PRIVATE && LA160_0 <= PUBLIC)||LA160_0==STATIC||LA160_0==EALED) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // CSharp4Tree.g:1065:27: class_modifier
            	    {
            	    pushFollow(FOLLOW_class_modifier_in_class_modifiers8032);
            	    class_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 185, class_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_modifiers"


    public static class class_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_modifier"
    // CSharp4Tree.g:1068:1: class_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | ABSTRACT | EALED | STATIC );
    public final IntegrityVariablesParserC_CSharp4Tree.class_modifier_return class_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_modifier_return();
        retval.start = input.LT(1);

        int class_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }

            // CSharp4Tree.g:1069:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | ABSTRACT | EALED | STATIC )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==INTERNAL||input.LA(1)==NEW||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==STATIC||input.LA(1)==EALED ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 186, class_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_modifier"


    public static class type_parameter_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_list"
    // CSharp4Tree.g:1080:1: type_parameter_list : type_parameters ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameter_list_return type_parameter_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameter_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameter_list_return();
        retval.start = input.LT(1);

        int type_parameter_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }

            // CSharp4Tree.g:1081:5: ( type_parameters )
            // CSharp4Tree.g:1081:10: type_parameters
            {
            pushFollow(FOLLOW_type_parameters_in_type_parameter_list8155);
            type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 187, type_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_list"


    public static class type_parameters_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameters"
    // CSharp4Tree.g:1084:1: type_parameters : ^( TYPE_PARAMETERS ( attributed_type_parameter )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameters_return type_parameters() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameters_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameters_return();
        retval.start = input.LT(1);

        int type_parameters_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }

            // CSharp4Tree.g:1085:5: ( ^( TYPE_PARAMETERS ( attributed_type_parameter )+ ) )
            // CSharp4Tree.g:1085:10: ^( TYPE_PARAMETERS ( attributed_type_parameter )+ )
            {
            match(input,TYPE_PARAMETERS,FOLLOW_TYPE_PARAMETERS_in_type_parameters8177); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1085:28: ( attributed_type_parameter )+
            int cnt161=0;
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==TYPE_PARAM) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // CSharp4Tree.g:1085:28: attributed_type_parameter
            	    {
            	    pushFollow(FOLLOW_attributed_type_parameter_in_type_parameters8179);
            	    attributed_type_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt161 >= 1 ) break loop161;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(161, input);
                        throw eee;
                }
                cnt161++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 188, type_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameters"


    public static class attributed_type_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attributed_type_parameter"
    // CSharp4Tree.g:1088:1: attributed_type_parameter : ^( TYPE_PARAM ( attributes )? type_parameter ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attributed_type_parameter_return attributed_type_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attributed_type_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.attributed_type_parameter_return();
        retval.start = input.LT(1);

        int attributed_type_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }

            // CSharp4Tree.g:1089:5: ( ^( TYPE_PARAM ( attributes )? type_parameter ) )
            // CSharp4Tree.g:1089:9: ^( TYPE_PARAM ( attributes )? type_parameter )
            {
            match(input,TYPE_PARAM,FOLLOW_TYPE_PARAM_in_attributed_type_parameter8201); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1089:22: ( attributes )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==ATTRIBUTES) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // CSharp4Tree.g:1089:22: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_attributed_type_parameter8203);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_attributed_type_parameter8206);
            type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 189, attributed_type_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attributed_type_parameter"


    public static class type_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter"
    // CSharp4Tree.g:1092:1: type_parameter : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameter_return type_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameter_return();
        retval.start = input.LT(1);

        int type_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }

            // CSharp4Tree.g:1093:5: ( IDENTIFIER )
            // CSharp4Tree.g:1093:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_type_parameter8228); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 190, type_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter"


    public static class class_base_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_base"
    // CSharp4Tree.g:1097:1: class_base : ^( EXTENDS_OR_IMPLEMENTS class_type ( interface_type )* ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_base_return class_base() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_base_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_base_return();
        retval.start = input.LT(1);

        int class_base_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }

            // CSharp4Tree.g:1098:5: ( ^( EXTENDS_OR_IMPLEMENTS class_type ( interface_type )* ) )
            // CSharp4Tree.g:1098:10: ^( EXTENDS_OR_IMPLEMENTS class_type ( interface_type )* )
            {
            match(input,EXTENDS_OR_IMPLEMENTS,FOLLOW_EXTENDS_OR_IMPLEMENTS_in_class_base8251); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_class_type_in_class_base8254);
            class_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1098:47: ( interface_type )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==NAMESPACE_OR_TYPE_NAME) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // CSharp4Tree.g:1098:47: interface_type
            	    {
            	    pushFollow(FOLLOW_interface_type_in_class_base8257);
            	    interface_type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 191, class_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_base"


    public static class interface_type_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_type_list"
    // CSharp4Tree.g:1101:1: interface_type_list : ^( IMPLEMENTS ( interface_type )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_type_list_return interface_type_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_type_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_type_list_return();
        retval.start = input.LT(1);

        int interface_type_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }

            // CSharp4Tree.g:1102:5: ( ^( IMPLEMENTS ( interface_type )+ ) )
            // CSharp4Tree.g:1102:10: ^( IMPLEMENTS ( interface_type )+ )
            {
            match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_interface_type_list8281); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1102:23: ( interface_type )+
            int cnt164=0;
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==NAMESPACE_OR_TYPE_NAME) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // CSharp4Tree.g:1102:23: interface_type
            	    {
            	    pushFollow(FOLLOW_interface_type_in_interface_type_list8283);
            	    interface_type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt164 >= 1 ) break loop164;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(164, input);
                        throw eee;
                }
                cnt164++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 192, interface_type_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_type_list"


    public static class type_parameter_constraints_clauses_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clauses"
    // CSharp4Tree.g:1105:1: type_parameter_constraints_clauses : ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSES ( type_parameter_constraints_clause )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clauses_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);

        int type_parameter_constraints_clauses_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }

            // CSharp4Tree.g:1106:5: ( ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSES ( type_parameter_constraints_clause )+ ) )
            // CSharp4Tree.g:1106:10: ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSES ( type_parameter_constraints_clause )+ )
            {
            match(input,TYPE_PARAMETER_CONSTRAINTS_CLAUSES,FOLLOW_TYPE_PARAMETER_CONSTRAINTS_CLAUSES_in_type_parameter_constraints_clauses8307); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1106:47: ( type_parameter_constraints_clause )+
            int cnt165=0;
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSE) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // CSharp4Tree.g:1106:47: type_parameter_constraints_clause
            	    {
            	    pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses8309);
            	    type_parameter_constraints_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt165 >= 1 ) break loop165;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(165, input);
                        throw eee;
                }
                cnt165++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 193, type_parameter_constraints_clauses_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"


    public static class type_parameter_constraints_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints_clause"
    // CSharp4Tree.g:1109:1: type_parameter_constraints_clause : ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSE type_parameter type_parameter_constraints ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clause_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);

        int type_parameter_constraints_clause_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }

            // CSharp4Tree.g:1110:5: ( ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSE type_parameter type_parameter_constraints ) )
            // CSharp4Tree.g:1110:10: ^( TYPE_PARAMETER_CONSTRAINTS_CLAUSE type_parameter type_parameter_constraints )
            {
            match(input,TYPE_PARAMETER_CONSTRAINTS_CLAUSE,FOLLOW_TYPE_PARAMETER_CONSTRAINTS_CLAUSE_in_type_parameter_constraints_clause8333); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_parameter_in_type_parameter_constraints_clause8335);
            type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause8337);
            type_parameter_constraints();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 194, type_parameter_constraints_clause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"


    public static class type_parameter_constraints_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "type_parameter_constraints"
    // CSharp4Tree.g:1113:1: type_parameter_constraints : ( constructor_constraint | primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )? );
    public final IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_return type_parameter_constraints() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_return retval = new IntegrityVariablesParserC_CSharp4Tree.type_parameter_constraints_return();
        retval.start = input.LT(1);

        int type_parameter_constraints_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }

            // CSharp4Tree.g:1114:5: ( constructor_constraint | primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )? )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NEW) ) {
                alt168=1;
            }
            else if ( (LA168_0==CLASS||LA168_0==IDENTIFIER||LA168_0==OBJECT||LA168_0==STRING||LA168_0==STRUCT||LA168_0==NAMESPACE_OR_TYPE_NAME) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // CSharp4Tree.g:1114:10: constructor_constraint
                    {
                    pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints8359);
                    constructor_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1115:10: primary_constraint ( COMMA secondary_constraints )? ( COMMA constructor_constraint )?
                    {
                    pushFollow(FOLLOW_primary_constraint_in_type_parameter_constraints8370);
                    primary_constraint();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:1115:29: ( COMMA secondary_constraints )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==COMMA) ) {
                        int LA166_1 = input.LA(2);

                        if ( (LA166_1==NAMESPACE_OR_TYPE_NAME) ) {
                            alt166=1;
                        }
                    }
                    switch (alt166) {
                        case 1 :
                            // CSharp4Tree.g:1115:30: COMMA secondary_constraints
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints8373); if (state.failed) return retval;

                            pushFollow(FOLLOW_secondary_constraints_in_type_parameter_constraints8375);
                            secondary_constraints();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1115:60: ( COMMA constructor_constraint )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==COMMA) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // CSharp4Tree.g:1115:61: COMMA constructor_constraint
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_type_parameter_constraints8380); if (state.failed) return retval;

                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraints8382);
                            constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 195, type_parameter_constraints_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints"


    public static class primary_constraint_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "primary_constraint"
    // CSharp4Tree.g:1118:1: primary_constraint : ( class_type | CLASS | STRUCT );
    public final IntegrityVariablesParserC_CSharp4Tree.primary_constraint_return primary_constraint() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.primary_constraint_return retval = new IntegrityVariablesParserC_CSharp4Tree.primary_constraint_return();
        retval.start = input.LT(1);

        int primary_constraint_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }

            // CSharp4Tree.g:1119:5: ( class_type | CLASS | STRUCT )
            int alt169=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case OBJECT:
            case STRING:
            case NAMESPACE_OR_TYPE_NAME:
                {
                alt169=1;
                }
                break;
            case CLASS:
                {
                alt169=2;
                }
                break;
            case STRUCT:
                {
                alt169=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }

            switch (alt169) {
                case 1 :
                    // CSharp4Tree.g:1119:10: class_type
                    {
                    pushFollow(FOLLOW_class_type_in_primary_constraint8405);
                    class_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1120:10: CLASS
                    {
                    match(input,CLASS,FOLLOW_CLASS_in_primary_constraint8416); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1121:10: STRUCT
                    {
                    match(input,STRUCT,FOLLOW_STRUCT_in_primary_constraint8427); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 196, primary_constraint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primary_constraint"


    public static class secondary_constraints_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "secondary_constraints"
    // CSharp4Tree.g:1125:1: secondary_constraints : interface_type ( COMMA interface_type )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.secondary_constraints_return secondary_constraints() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.secondary_constraints_return retval = new IntegrityVariablesParserC_CSharp4Tree.secondary_constraints_return();
        retval.start = input.LT(1);

        int secondary_constraints_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }

            // CSharp4Tree.g:1126:5: ( interface_type ( COMMA interface_type )* )
            // CSharp4Tree.g:1126:10: interface_type ( COMMA interface_type )*
            {
            pushFollow(FOLLOW_interface_type_in_secondary_constraints8448);
            interface_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1126:25: ( COMMA interface_type )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    int LA170_1 = input.LA(2);

                    if ( (LA170_1==NAMESPACE_OR_TYPE_NAME) ) {
                        alt170=1;
                    }


                }


                switch (alt170) {
            	case 1 :
            	    // CSharp4Tree.g:1126:26: COMMA interface_type
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_secondary_constraints8451); if (state.failed) return retval;

            	    pushFollow(FOLLOW_interface_type_in_secondary_constraints8453);
            	    interface_type();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 197, secondary_constraints_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "secondary_constraints"


    public static class constructor_constraint_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_constraint"
    // CSharp4Tree.g:1129:1: constructor_constraint : NEW OPEN_PARENS CLOSE_PARENS ;
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_constraint_return constructor_constraint() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_constraint_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_constraint_return();
        retval.start = input.LT(1);

        int constructor_constraint_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }

            // CSharp4Tree.g:1130:5: ( NEW OPEN_PARENS CLOSE_PARENS )
            // CSharp4Tree.g:1130:10: NEW OPEN_PARENS CLOSE_PARENS
            {
            match(input,NEW,FOLLOW_NEW_in_constructor_constraint8476); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_constraint8478); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_constraint8480); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 198, constructor_constraint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"


    public static class class_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_body"
    // CSharp4Tree.g:1133:1: class_body : ( class_member_declarations )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_body_return class_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_body_return();
        retval.start = input.LT(1);

        int class_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }

            // CSharp4Tree.g:1134:5: ( ( class_member_declarations )? )
            // CSharp4Tree.g:1134:10: ( class_member_declarations )?
            {
            // CSharp4Tree.g:1134:10: ( class_member_declarations )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==CLASS_MEMBER_DECLARATIONS) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // CSharp4Tree.g:1134:10: class_member_declarations
                    {
                    pushFollow(FOLLOW_class_member_declarations_in_class_body8501);
                    class_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 199, class_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_body"


    public static class class_member_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declarations"
    // CSharp4Tree.g:1137:1: class_member_declarations : ^( CLASS_MEMBER_DECLARATIONS ( class_member_declaration )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_member_declarations_return class_member_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_member_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_member_declarations_return();
        retval.start = input.LT(1);

        int class_member_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }

            // CSharp4Tree.g:1138:5: ( ^( CLASS_MEMBER_DECLARATIONS ( class_member_declaration )+ ) )
            // CSharp4Tree.g:1138:10: ^( CLASS_MEMBER_DECLARATIONS ( class_member_declaration )+ )
            {
            match(input,CLASS_MEMBER_DECLARATIONS,FOLLOW_CLASS_MEMBER_DECLARATIONS_in_class_member_declarations8524); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1138:38: ( class_member_declaration )+
            int cnt172=0;
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==CLASS||LA172_0==DELEGATE||(LA172_0 >= ENUM && LA172_0 <= EXPLICIT)||LA172_0==IMPLICIT||LA172_0==INTERFACE||LA172_0==OPERATOR||LA172_0==STRUCT||LA172_0==TILDE||LA172_0==CONSTANT_DECLARATORS||LA172_0==CONSTRUCTOR_DECL||LA172_0==FIELD_DECL||LA172_0==INDEXER_DECL||LA172_0==METHOD_DECL||LA172_0==PROPERTY_DECL) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // CSharp4Tree.g:1138:38: class_member_declaration
            	    {
            	    pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations8526);
            	    class_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt172 >= 1 ) break loop172;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(172, input);
                        throw eee;
                }
                cnt172++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 200, class_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"


    public static class class_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_member_declaration"
    // CSharp4Tree.g:1141:1: class_member_declaration : ( ^( common_member_declaration ( attributes )? ( all_member_modifiers )? ) | ^( destructor_definition ( attributes )? ( all_member_modifiers )? ) );
    public final IntegrityVariablesParserC_CSharp4Tree.class_member_declaration_return class_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_member_declaration_return();
        retval.start = input.LT(1);

        int class_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }

            // CSharp4Tree.g:1142:5: ( ^( common_member_declaration ( attributes )? ( all_member_modifiers )? ) | ^( destructor_definition ( attributes )? ( all_member_modifiers )? ) )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==CLASS||LA177_0==DELEGATE||(LA177_0 >= ENUM && LA177_0 <= EXPLICIT)||LA177_0==IMPLICIT||LA177_0==INTERFACE||LA177_0==OPERATOR||LA177_0==STRUCT||LA177_0==CONSTANT_DECLARATORS||LA177_0==CONSTRUCTOR_DECL||LA177_0==FIELD_DECL||LA177_0==INDEXER_DECL||LA177_0==METHOD_DECL||LA177_0==PROPERTY_DECL) ) {
                alt177=1;
            }
            else if ( (LA177_0==TILDE) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }
            switch (alt177) {
                case 1 :
                    // CSharp4Tree.g:1142:10: ^( common_member_declaration ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_common_member_declaration_in_class_member_declaration8549);
                    common_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1142:38: ( attributes )?
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==ATTRIBUTES) ) {
                            alt173=1;
                        }
                        switch (alt173) {
                            case 1 :
                                // CSharp4Tree.g:1142:38: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_class_member_declaration8551);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1142:50: ( all_member_modifiers )?
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==MODIFIERS) ) {
                            alt174=1;
                        }
                        switch (alt174) {
                            case 1 :
                                // CSharp4Tree.g:1142:50: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration8554);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1143:10: ^( destructor_definition ( attributes )? ( all_member_modifiers )? )
                    {
                    pushFollow(FOLLOW_destructor_definition_in_class_member_declaration8568);
                    destructor_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1143:34: ( attributes )?
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==ATTRIBUTES) ) {
                            alt175=1;
                        }
                        switch (alt175) {
                            case 1 :
                                // CSharp4Tree.g:1143:34: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_class_member_declaration8570);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1143:46: ( all_member_modifiers )?
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==MODIFIERS) ) {
                            alt176=1;
                        }
                        switch (alt176) {
                            case 1 :
                                // CSharp4Tree.g:1143:46: all_member_modifiers
                                {
                                pushFollow(FOLLOW_all_member_modifiers_in_class_member_declaration8573);
                                all_member_modifiers();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 201, class_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"


    public static class all_member_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifiers"
    // CSharp4Tree.g:1148:1: all_member_modifiers : ^( MODIFIERS ( all_member_modifier )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.all_member_modifiers_return all_member_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.all_member_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.all_member_modifiers_return();
        retval.start = input.LT(1);

        int all_member_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }

            // CSharp4Tree.g:1149:5: ( ^( MODIFIERS ( all_member_modifier )+ ) )
            // CSharp4Tree.g:1149:10: ^( MODIFIERS ( all_member_modifier )+ )
            {
            match(input,MODIFIERS,FOLLOW_MODIFIERS_in_all_member_modifiers8598); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1149:22: ( all_member_modifier )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==ABSTRACT||LA178_0==EXTERN||LA178_0==IDENTIFIER||LA178_0==INTERNAL||LA178_0==NEW||LA178_0==OVERRIDE||(LA178_0 >= PRIVATE && LA178_0 <= PUBLIC)||LA178_0==READONLY||LA178_0==SEALED||LA178_0==STATIC||LA178_0==UNSAFE||LA178_0==VIRTUAL||LA178_0==VOLATILE) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // CSharp4Tree.g:1149:22: all_member_modifier
            	    {
            	    pushFollow(FOLLOW_all_member_modifier_in_all_member_modifiers8600);
            	    all_member_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 202, all_member_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "all_member_modifiers"


    public static class all_member_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "all_member_modifier"
    // CSharp4Tree.g:1152:1: all_member_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | READONLY | VOLATILE | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | STATIC | UNSAFE | EXTERN | partial_contextual_keyword );
    public final IntegrityVariablesParserC_CSharp4Tree.all_member_modifier_return all_member_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.all_member_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.all_member_modifier_return();
        retval.start = input.LT(1);

        int all_member_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }

            // CSharp4Tree.g:1153:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | READONLY | VOLATILE | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | STATIC | UNSAFE | EXTERN | partial_contextual_keyword )
            int alt179=15;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt179=1;
                }
                break;
            case PUBLIC:
                {
                alt179=2;
                }
                break;
            case PROTECTED:
                {
                alt179=3;
                }
                break;
            case INTERNAL:
                {
                alt179=4;
                }
                break;
            case PRIVATE:
                {
                alt179=5;
                }
                break;
            case READONLY:
                {
                alt179=6;
                }
                break;
            case VOLATILE:
                {
                alt179=7;
                }
                break;
            case VIRTUAL:
                {
                alt179=8;
                }
                break;
            case SEALED:
                {
                alt179=9;
                }
                break;
            case OVERRIDE:
                {
                alt179=10;
                }
                break;
            case ABSTRACT:
                {
                alt179=11;
                }
                break;
            case STATIC:
                {
                alt179=12;
                }
                break;
            case UNSAFE:
                {
                alt179=13;
                }
                break;
            case EXTERN:
                {
                alt179=14;
                }
                break;
            case IDENTIFIER:
                {
                alt179=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;

            }

            switch (alt179) {
                case 1 :
                    // CSharp4Tree.g:1153:10: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_all_member_modifier8622); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1154:10: PUBLIC
                    {
                    match(input,PUBLIC,FOLLOW_PUBLIC_in_all_member_modifier8633); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1155:10: PROTECTED
                    {
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_all_member_modifier8644); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1156:10: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_all_member_modifier8655); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1157:10: PRIVATE
                    {
                    match(input,PRIVATE,FOLLOW_PRIVATE_in_all_member_modifier8666); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1158:10: READONLY
                    {
                    match(input,READONLY,FOLLOW_READONLY_in_all_member_modifier8677); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:1159:10: VOLATILE
                    {
                    match(input,VOLATILE,FOLLOW_VOLATILE_in_all_member_modifier8688); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:1160:10: VIRTUAL
                    {
                    match(input,VIRTUAL,FOLLOW_VIRTUAL_in_all_member_modifier8699); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:1161:10: SEALED
                    {
                    match(input,SEALED,FOLLOW_SEALED_in_all_member_modifier8710); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:1162:10: OVERRIDE
                    {
                    match(input,OVERRIDE,FOLLOW_OVERRIDE_in_all_member_modifier8721); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:1163:10: ABSTRACT
                    {
                    match(input,ABSTRACT,FOLLOW_ABSTRACT_in_all_member_modifier8732); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:1164:10: STATIC
                    {
                    match(input,STATIC,FOLLOW_STATIC_in_all_member_modifier8743); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // CSharp4Tree.g:1165:10: UNSAFE
                    {
                    match(input,UNSAFE,FOLLOW_UNSAFE_in_all_member_modifier8754); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // CSharp4Tree.g:1166:10: EXTERN
                    {
                    match(input,EXTERN,FOLLOW_EXTERN_in_all_member_modifier8765); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // CSharp4Tree.g:1167:10: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_all_member_modifier8776);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 203, all_member_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "all_member_modifier"


    public static class common_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "common_member_declaration"
    // CSharp4Tree.g:1171:1: common_member_declaration : ( constant_declaration2 | typed_member_declaration | event_declaration2 | ^( conversion_operator_declarator operator_body ) | constructor_declaration2 | ^( method_declaration2 type_void ) | class_definition | struct_definition | interface_definition | enum_definition | delegate_definition );
    public final IntegrityVariablesParserC_CSharp4Tree.common_member_declaration_return common_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.common_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.common_member_declaration_return();
        retval.start = input.LT(1);

        int common_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }

            // CSharp4Tree.g:1172:5: ( constant_declaration2 | typed_member_declaration | event_declaration2 | ^( conversion_operator_declarator operator_body ) | constructor_declaration2 | ^( method_declaration2 type_void ) | class_definition | struct_definition | interface_definition | enum_definition | delegate_definition )
            int alt180=11;
            switch ( input.LA(1) ) {
            case CONSTANT_DECLARATORS:
                {
                alt180=1;
                }
                break;
            case OPERATOR:
            case FIELD_DECL:
            case INDEXER_DECL:
            case PROPERTY_DECL:
                {
                alt180=2;
                }
                break;
            case METHOD_DECL:
                {
                int LA180_3 = input.LA(2);

                if ( (synpred383_CSharp4Tree()) ) {
                    alt180=2;
                }
                else if ( (synpred387_CSharp4Tree()) ) {
                    alt180=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 3, input);

                    throw nvae;

                }
                }
                break;
            case EVENT:
                {
                alt180=3;
                }
                break;
            case EXPLICIT:
            case IMPLICIT:
                {
                alt180=4;
                }
                break;
            case CONSTRUCTOR_DECL:
                {
                alt180=5;
                }
                break;
            case CLASS:
                {
                alt180=7;
                }
                break;
            case STRUCT:
                {
                alt180=8;
                }
                break;
            case INTERFACE:
                {
                alt180=9;
                }
                break;
            case ENUM:
                {
                alt180=10;
                }
                break;
            case DELEGATE:
                {
                alt180=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;

            }

            switch (alt180) {
                case 1 :
                    // CSharp4Tree.g:1172:10: constant_declaration2
                    {
                    pushFollow(FOLLOW_constant_declaration2_in_common_member_declaration8797);
                    constant_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1173:10: typed_member_declaration
                    {
                    pushFollow(FOLLOW_typed_member_declaration_in_common_member_declaration8808);
                    typed_member_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1174:10: event_declaration2
                    {
                    pushFollow(FOLLOW_event_declaration2_in_common_member_declaration8819);
                    event_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1175:10: ^( conversion_operator_declarator operator_body )
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_common_member_declaration8831);
                    conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_operator_body_in_common_member_declaration8833);
                    operator_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1176:10: constructor_declaration2
                    {
                    pushFollow(FOLLOW_constructor_declaration2_in_common_member_declaration8845);
                    constructor_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1177:10: ^( method_declaration2 type_void )
                    {
                    pushFollow(FOLLOW_method_declaration2_in_common_member_declaration8858);
                    method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_void_in_common_member_declaration8860);
                    type_void();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:1178:10: class_definition
                    {
                    pushFollow(FOLLOW_class_definition_in_common_member_declaration8874);
                    class_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:1179:10: struct_definition
                    {
                    pushFollow(FOLLOW_struct_definition_in_common_member_declaration8885);
                    struct_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:1180:10: interface_definition
                    {
                    pushFollow(FOLLOW_interface_definition_in_common_member_declaration8896);
                    interface_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:1181:10: enum_definition
                    {
                    pushFollow(FOLLOW_enum_definition_in_common_member_declaration8907);
                    enum_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:1182:10: delegate_definition
                    {
                    pushFollow(FOLLOW_delegate_definition_in_common_member_declaration8918);
                    delegate_definition();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 204, common_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "common_member_declaration"


    public static class typed_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "typed_member_declaration"
    // CSharp4Tree.g:1186:1: typed_member_declaration : ( ^( indexer_declaration2 interface_type type ) | ^( method_declaration2 type ) | ^( property_declaration2 type ) | ^( indexer_declaration2 type ) | ^( operator_declaration2 type ) | ^( field_declaration2 type ) );
    public final IntegrityVariablesParserC_CSharp4Tree.typed_member_declaration_return typed_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.typed_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.typed_member_declaration_return();
        retval.start = input.LT(1);

        int typed_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }

            // CSharp4Tree.g:1187:5: ( ^( indexer_declaration2 interface_type type ) | ^( method_declaration2 type ) | ^( property_declaration2 type ) | ^( indexer_declaration2 type ) | ^( operator_declaration2 type ) | ^( field_declaration2 type ) )
            int alt181=6;
            switch ( input.LA(1) ) {
            case INDEXER_DECL:
                {
                int LA181_1 = input.LA(2);

                if ( (synpred392_CSharp4Tree()) ) {
                    alt181=1;
                }
                else if ( (synpred395_CSharp4Tree()) ) {
                    alt181=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;

                }
                }
                break;
            case METHOD_DECL:
                {
                alt181=2;
                }
                break;
            case PROPERTY_DECL:
                {
                alt181=3;
                }
                break;
            case OPERATOR:
                {
                alt181=5;
                }
                break;
            case FIELD_DECL:
                {
                alt181=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }

            switch (alt181) {
                case 1 :
                    // CSharp4Tree.g:1187:10: ^( indexer_declaration2 interface_type type )
                    {
                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration8940);
                    indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_interface_type_in_typed_member_declaration8942);
                    interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_typed_member_declaration8944);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1188:10: ^( method_declaration2 type )
                    {
                    pushFollow(FOLLOW_method_declaration2_in_typed_member_declaration8957);
                    method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_typed_member_declaration8959);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1189:10: ^( property_declaration2 type )
                    {
                    pushFollow(FOLLOW_property_declaration2_in_typed_member_declaration8972);
                    property_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_typed_member_declaration8974);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1190:10: ^( indexer_declaration2 type )
                    {
                    pushFollow(FOLLOW_indexer_declaration2_in_typed_member_declaration8987);
                    indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_typed_member_declaration8989);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1191:10: ^( operator_declaration2 type )
                    {
                    pushFollow(FOLLOW_operator_declaration2_in_typed_member_declaration9002);
                    operator_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_typed_member_declaration9004);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1192:10: ^( field_declaration2 type )
                    {
                    pushFollow(FOLLOW_field_declaration2_in_typed_member_declaration9017);
                    field_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_typed_member_declaration9019);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 205, typed_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typed_member_declaration"


    public static class constant_declarators_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarators"
    // CSharp4Tree.g:1195:1: constant_declarators : ^( CONSTANT_DECLARATORS ( constant_declarator )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.constant_declarators_return constant_declarators() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constant_declarators_return retval = new IntegrityVariablesParserC_CSharp4Tree.constant_declarators_return();
        retval.start = input.LT(1);

        int constant_declarators_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }

            // CSharp4Tree.g:1196:5: ( ^( CONSTANT_DECLARATORS ( constant_declarator )+ ) )
            // CSharp4Tree.g:1196:10: ^( CONSTANT_DECLARATORS ( constant_declarator )+ )
            {
            match(input,CONSTANT_DECLARATORS,FOLLOW_CONSTANT_DECLARATORS_in_constant_declarators9041); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1196:33: ( constant_declarator )+
            int cnt182=0;
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==CONSTANT_DECLARATOR) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // CSharp4Tree.g:1196:33: constant_declarator
            	    {
            	    pushFollow(FOLLOW_constant_declarator_in_constant_declarators9043);
            	    constant_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt182 >= 1 ) break loop182;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(182, input);
                        throw eee;
                }
                cnt182++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 206, constant_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declarators"


    public static class constant_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declarator"
    // CSharp4Tree.g:1200:1: constant_declarator : ^( CONSTANT_DECLARATOR IDENTIFIER ^( CONSTANT_INITIALIZER constant_expression ) ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.constant_declarator_return constant_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constant_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.constant_declarator_return();
        retval.start = input.LT(1);

        int constant_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }

            // CSharp4Tree.g:1201:5: ( ^( CONSTANT_DECLARATOR IDENTIFIER ^( CONSTANT_INITIALIZER constant_expression ) ) )
            // CSharp4Tree.g:1201:10: ^( CONSTANT_DECLARATOR IDENTIFIER ^( CONSTANT_INITIALIZER constant_expression ) )
            {
            match(input,CONSTANT_DECLARATOR,FOLLOW_CONSTANT_DECLARATOR_in_constant_declarator9067); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constant_declarator9069); if (state.failed) return retval;

            match(input,CONSTANT_INITIALIZER,FOLLOW_CONSTANT_INITIALIZER_in_constant_declarator9072); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_constant_expression_in_constant_declarator9074);
            constant_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 207, constant_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declarator"


    public static class variable_declarators_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarators"
    // CSharp4Tree.g:1205:1: variable_declarators : variable_declarator ( variable_declarator )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_declarators_return variable_declarators() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_declarators_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_declarators_return();
        retval.start = input.LT(1);

        int variable_declarators_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }

            // CSharp4Tree.g:1206:5: ( variable_declarator ( variable_declarator )* )
            // CSharp4Tree.g:1206:10: variable_declarator ( variable_declarator )*
            {
            pushFollow(FOLLOW_variable_declarator_in_variable_declarators9098);
            variable_declarator();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1206:30: ( variable_declarator )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==VARIABLE_DECLARATOR) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // CSharp4Tree.g:1206:30: variable_declarator
            	    {
            	    pushFollow(FOLLOW_variable_declarator_in_variable_declarators9100);
            	    variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 208, variable_declarators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declarators"


    public static class variable_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarator"
    // CSharp4Tree.g:1210:1: variable_declarator : ^( VARIABLE_DECLARATOR variable_declarator2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_declarator_return variable_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_declarator_return();
        retval.start = input.LT(1);

        int variable_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }

            // CSharp4Tree.g:1211:5: ( ^( VARIABLE_DECLARATOR variable_declarator2 ) )
            // CSharp4Tree.g:1211:10: ^( VARIABLE_DECLARATOR variable_declarator2 )
            {
            match(input,VARIABLE_DECLARATOR,FOLLOW_VARIABLE_DECLARATOR_in_variable_declarator9123); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declarator2_in_variable_declarator9125);
            variable_declarator2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 209, variable_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declarator"


    public static class variable_declarator2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_declarator2"
    // CSharp4Tree.g:1214:1: variable_declarator2 : IDENTIFIER ( variable_initializer )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_declarator2_return variable_declarator2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_declarator2_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_declarator2_return();
        retval.start = input.LT(1);

        int variable_declarator2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }

            // CSharp4Tree.g:1215:5: ( IDENTIFIER ( variable_initializer )? )
            // CSharp4Tree.g:1215:10: IDENTIFIER ( variable_initializer )?
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variable_declarator29146); if (state.failed) return retval;

            // CSharp4Tree.g:1215:21: ( variable_initializer )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==VARIABLE_INITIALIZER) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // CSharp4Tree.g:1215:21: variable_initializer
                    {
                    pushFollow(FOLLOW_variable_initializer_in_variable_declarator29148);
                    variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 210, variable_declarator2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_declarator2"


    public static class variable_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer"
    // CSharp4Tree.g:1218:1: variable_initializer : ^( VARIABLE_INITIALIZER variable_initializer2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_initializer_return variable_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_initializer_return();
        retval.start = input.LT(1);

        int variable_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }

            // CSharp4Tree.g:1219:5: ( ^( VARIABLE_INITIALIZER variable_initializer2 ) )
            // CSharp4Tree.g:1219:10: ^( VARIABLE_INITIALIZER variable_initializer2 )
            {
            match(input,VARIABLE_INITIALIZER,FOLLOW_VARIABLE_INITIALIZER_in_variable_initializer9170); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_initializer2_in_variable_initializer9173);
            variable_initializer2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 211, variable_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_initializer"


    public static class variable_initializer2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer2"
    // CSharp4Tree.g:1222:1: variable_initializer2 : ( expression | array_initializer );
    public final IntegrityVariablesParserC_CSharp4Tree.variable_initializer2_return variable_initializer2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_initializer2_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_initializer2_return();
        retval.start = input.LT(1);

        int variable_initializer2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }

            // CSharp4Tree.g:1223:5: ( expression | array_initializer )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==IDENTIFIER||LA185_0==OPEN_PARENS||LA185_0==OP_COALESCING||LA185_0==ASSIGNMENT_OPERATOR||LA185_0==UNARY_EXPRESSION) ) {
                alt185=1;
            }
            else if ( (LA185_0==OPEN_BRACE) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }
            switch (alt185) {
                case 1 :
                    // CSharp4Tree.g:1223:7: expression
                    {
                    pushFollow(FOLLOW_expression_in_variable_initializer29191);
                    expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1224:7: array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_variable_initializer29199);
                    array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 212, variable_initializer2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_initializer2"


    public static class method_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration"
    // CSharp4Tree.g:1227:1: method_declaration : method_header method_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_declaration_return method_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_declaration_return();
        retval.start = input.LT(1);

        int method_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }

            // CSharp4Tree.g:1228:5: ( method_header method_body )
            // CSharp4Tree.g:1228:7: method_header method_body
            {
            pushFollow(FOLLOW_method_header_in_method_declaration9217);
            method_header();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_method_body_in_method_declaration9219);
            method_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 213, method_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_header_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_header"
    // CSharp4Tree.g:1231:1: method_header : ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_header_return method_header() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_header_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_header_return();
        retval.start = input.LT(1);

        int method_header_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }

            // CSharp4Tree.g:1232:5: ( ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? )
            // CSharp4Tree.g:1232:10: ( attributes )? ( method_modifiers )? ( partial_contextual_keyword )? return_type member_name ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )?
            {
            // CSharp4Tree.g:1232:10: ( attributes )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ATTRIBUTES) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // CSharp4Tree.g:1232:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_method_header9240);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1232:22: ( method_modifiers )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ABSTRACT||LA187_0==EXTERN||LA187_0==INTERNAL||LA187_0==NEW||LA187_0==OVERRIDE||(LA187_0 >= PRIVATE && LA187_0 <= PUBLIC)||LA187_0==SEALED||LA187_0==STATIC||LA187_0==VIRTUAL) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // CSharp4Tree.g:1232:22: method_modifiers
                    {
                    pushFollow(FOLLOW_method_modifiers_in_method_header9243);
                    method_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1232:40: ( partial_contextual_keyword )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==IDENTIFIER) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // CSharp4Tree.g:1232:40: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_method_header9246);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_method_header9249);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_method_header9260);
            member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1233:22: ( type_parameter_list )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==TYPE_PARAMETERS) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // CSharp4Tree.g:1233:22: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_header9262);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_method_header9265); if (state.failed) return retval;

            // CSharp4Tree.g:1233:55: ( formal_parameter_list )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==FORMAL_PARAMETER_LIST) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // CSharp4Tree.g:1233:55: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_header9267);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_method_header9279); if (state.failed) return retval;

            // CSharp4Tree.g:1234:23: ( type_parameter_constraints_clauses )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // CSharp4Tree.g:1234:23: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header9281);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 214, method_header_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifiers"
    // CSharp4Tree.g:1237:1: method_modifiers : ( method_modifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_modifiers_return method_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_modifiers_return();
        retval.start = input.LT(1);

        int method_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }

            // CSharp4Tree.g:1238:5: ( ( method_modifier )+ )
            // CSharp4Tree.g:1238:10: ( method_modifier )+
            {
            // CSharp4Tree.g:1238:10: ( method_modifier )+
            int cnt192=0;
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==ABSTRACT||LA192_0==EXTERN||LA192_0==INTERNAL||LA192_0==NEW||LA192_0==OVERRIDE||(LA192_0 >= PRIVATE && LA192_0 <= PUBLIC)||LA192_0==SEALED||LA192_0==STATIC||LA192_0==VIRTUAL) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // CSharp4Tree.g:1238:10: method_modifier
            	    {
            	    pushFollow(FOLLOW_method_modifier_in_method_modifiers9303);
            	    method_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt192 >= 1 ) break loop192;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(192, input);
                        throw eee;
                }
                cnt192++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 215, method_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_modifiers"


    public static class method_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_modifier"
    // CSharp4Tree.g:1241:1: method_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.method_modifier_return method_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_modifier_return();
        retval.start = input.LT(1);

        int method_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }

            // CSharp4Tree.g:1242:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==EXTERN||input.LA(1)==INTERNAL||input.LA(1)==NEW||input.LA(1)==OVERRIDE||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==SEALED||input.LA(1)==STATIC||input.LA(1)==VIRTUAL ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 216, method_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class return_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "return_type"
    // CSharp4Tree.g:1257:1: return_type : ( type | VOID );
    public final IntegrityVariablesParserC_CSharp4Tree.return_type_return return_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.return_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.return_type_return();
        retval.start = input.LT(1);

        int return_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }

            // CSharp4Tree.g:1258:5: ( type | VOID )
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==TYPE) ) {
                alt193=1;
            }
            else if ( (LA193_0==VOID) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }
            switch (alt193) {
                case 1 :
                    // CSharp4Tree.g:1258:10: type
                    {
                    pushFollow(FOLLOW_type_in_return_type9459);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1259:10: VOID
                    {
                    match(input,VOID,FOLLOW_VOID_in_return_type9470); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 217, return_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "return_type"


    public static class member_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_name"
    // CSharp4Tree.g:1263:1: member_name : ^( MEMBER_NAME interface_type ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_name_return member_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_name_return();
        retval.start = input.LT(1);

        int member_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }

            // CSharp4Tree.g:1264:5: ( ^( MEMBER_NAME interface_type ) )
            // CSharp4Tree.g:1264:10: ^( MEMBER_NAME interface_type )
            {
            match(input,MEMBER_NAME,FOLLOW_MEMBER_NAME_in_member_name9494); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_interface_type_in_member_name9496);
            interface_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 218, member_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_name"


    public static class method_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_body"
    // CSharp4Tree.g:1267:1: method_body : block ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_body_return method_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_body_return();
        retval.start = input.LT(1);

        int method_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }

            // CSharp4Tree.g:1268:5: ( block )
            // CSharp4Tree.g:1268:10: block
            {
            pushFollow(FOLLOW_block_in_method_body9518);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 219, method_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_body"


    public static class formal_parameter_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "formal_parameter_list"
    // CSharp4Tree.g:1271:1: formal_parameter_list : ( ^( FORMAL_PARAMETER_LIST parameter_array ) | ^( FORMAL_PARAMETER_LIST fixed_parameters ( parameter_array )? ) );
    public final IntegrityVariablesParserC_CSharp4Tree.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.formal_parameter_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.formal_parameter_list_return();
        retval.start = input.LT(1);

        int formal_parameter_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }

            // CSharp4Tree.g:1272:5: ( ^( FORMAL_PARAMETER_LIST parameter_array ) | ^( FORMAL_PARAMETER_LIST fixed_parameters ( parameter_array )? ) )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==FORMAL_PARAMETER_LIST) ) {
                int LA195_1 = input.LA(2);

                if ( (LA195_1==DOWN) ) {
                    int LA195_2 = input.LA(3);

                    if ( (LA195_2==PARAMETER_ARRAY) ) {
                        alt195=1;
                    }
                    else if ( (LA195_2==FIXED_PARAMETER) ) {
                        alt195=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // CSharp4Tree.g:1272:10: ^( FORMAL_PARAMETER_LIST parameter_array )
                    {
                    match(input,FORMAL_PARAMETER_LIST,FOLLOW_FORMAL_PARAMETER_LIST_in_formal_parameter_list9540); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_parameter_array_in_formal_parameter_list9542);
                    parameter_array();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1273:10: ^( FORMAL_PARAMETER_LIST fixed_parameters ( parameter_array )? )
                    {
                    match(input,FORMAL_PARAMETER_LIST,FOLLOW_FORMAL_PARAMETER_LIST_in_formal_parameter_list9556); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_fixed_parameters_in_formal_parameter_list9559);
                    fixed_parameters();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:1273:53: ( parameter_array )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==PARAMETER_ARRAY) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // CSharp4Tree.g:1273:53: parameter_array
                            {
                            pushFollow(FOLLOW_parameter_array_in_formal_parameter_list9562);
                            parameter_array();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 220, formal_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"


    public static class fixed_parameters_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameters"
    // CSharp4Tree.g:1276:1: fixed_parameters : fixed_parameter ( fixed_parameter )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.fixed_parameters_return fixed_parameters() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.fixed_parameters_return retval = new IntegrityVariablesParserC_CSharp4Tree.fixed_parameters_return();
        retval.start = input.LT(1);

        int fixed_parameters_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }

            // CSharp4Tree.g:1277:5: ( fixed_parameter ( fixed_parameter )* )
            // CSharp4Tree.g:1277:10: fixed_parameter ( fixed_parameter )*
            {
            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters9585);
            fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1277:26: ( fixed_parameter )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==FIXED_PARAMETER) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // CSharp4Tree.g:1277:26: fixed_parameter
            	    {
            	    pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters9587);
            	    fixed_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 221, fixed_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"


    public static class fixed_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "fixed_parameter"
    // CSharp4Tree.g:1281:1: fixed_parameter : ( ^( FIXED_PARAMETER ( attributes )? ( parameter_modifier )? type IDENTIFIER ( default_argument )? ) | ^( FIXED_PARAMETER arglist ) );
    public final IntegrityVariablesParserC_CSharp4Tree.fixed_parameter_return fixed_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.fixed_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.fixed_parameter_return();
        retval.start = input.LT(1);

        int fixed_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }

            // CSharp4Tree.g:1282:5: ( ^( FIXED_PARAMETER ( attributes )? ( parameter_modifier )? type IDENTIFIER ( default_argument )? ) | ^( FIXED_PARAMETER arglist ) )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==FIXED_PARAMETER) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==DOWN) ) {
                    int LA200_2 = input.LA(3);

                    if ( (LA200_2==ATTRIBUTES||LA200_2==PARAMETER_MODIFIER||LA200_2==TYPE) ) {
                        alt200=1;
                    }
                    else if ( (LA200_2==IDENTIFIER) ) {
                        alt200=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 200, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;

            }
            switch (alt200) {
                case 1 :
                    // CSharp4Tree.g:1282:10: ^( FIXED_PARAMETER ( attributes )? ( parameter_modifier )? type IDENTIFIER ( default_argument )? )
                    {
                    match(input,FIXED_PARAMETER,FOLLOW_FIXED_PARAMETER_in_fixed_parameter9610); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // CSharp4Tree.g:1282:28: ( attributes )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==ATTRIBUTES) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // CSharp4Tree.g:1282:28: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_fixed_parameter9612);
                            attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1282:40: ( parameter_modifier )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==PARAMETER_MODIFIER) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // CSharp4Tree.g:1282:40: parameter_modifier
                            {
                            pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter9615);
                            parameter_modifier();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_fixed_parameter9618);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fixed_parameter9620); if (state.failed) return retval;

                    // CSharp4Tree.g:1282:76: ( default_argument )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==IDENTIFIER||LA199_0==OPEN_PARENS||LA199_0==OP_COALESCING||LA199_0==ASSIGNMENT_OPERATOR||LA199_0==UNARY_EXPRESSION) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // CSharp4Tree.g:1282:76: default_argument
                            {
                            pushFollow(FOLLOW_default_argument_in_fixed_parameter9622);
                            default_argument();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1283:10: ^( FIXED_PARAMETER arglist )
                    {
                    match(input,FIXED_PARAMETER,FOLLOW_FIXED_PARAMETER_in_fixed_parameter9636); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_arglist_in_fixed_parameter9638);
                    arglist();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 222, fixed_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"


    public static class default_argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "default_argument"
    // CSharp4Tree.g:1286:1: default_argument : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.default_argument_return default_argument() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.default_argument_return retval = new IntegrityVariablesParserC_CSharp4Tree.default_argument_return();
        retval.start = input.LT(1);

        int default_argument_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }

            // CSharp4Tree.g:1287:5: ( expression )
            // CSharp4Tree.g:1287:10: expression
            {
            pushFollow(FOLLOW_expression_in_default_argument9660);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 223, default_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "default_argument"


    public static class parameter_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_modifier"
    // CSharp4Tree.g:1290:1: parameter_modifier : ^( PARAMETER_MODIFIER parameter_modifier2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.parameter_modifier_return parameter_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.parameter_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.parameter_modifier_return();
        retval.start = input.LT(1);

        int parameter_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }

            // CSharp4Tree.g:1291:5: ( ^( PARAMETER_MODIFIER parameter_modifier2 ) )
            // CSharp4Tree.g:1291:10: ^( PARAMETER_MODIFIER parameter_modifier2 )
            {
            match(input,PARAMETER_MODIFIER,FOLLOW_PARAMETER_MODIFIER_in_parameter_modifier9682); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_parameter_modifier2_in_parameter_modifier9684);
            parameter_modifier2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 224, parameter_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"


    public static class parameter_modifier2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_modifier2"
    // CSharp4Tree.g:1294:1: parameter_modifier2 : ( REF | OUT | THIS );
    public final IntegrityVariablesParserC_CSharp4Tree.parameter_modifier2_return parameter_modifier2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.parameter_modifier2_return retval = new IntegrityVariablesParserC_CSharp4Tree.parameter_modifier2_return();
        retval.start = input.LT(1);

        int parameter_modifier2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }

            // CSharp4Tree.g:1295:5: ( REF | OUT | THIS )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==OUT||input.LA(1)==REF||input.LA(1)==THIS ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 225, parameter_modifier2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_modifier2"


    public static class parameter_array_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "parameter_array"
    // CSharp4Tree.g:1300:1: parameter_array : ^( PARAMETER_ARRAY ( attributes )? array_type IDENTIFIER ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.parameter_array_return parameter_array() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.parameter_array_return retval = new IntegrityVariablesParserC_CSharp4Tree.parameter_array_return();
        retval.start = input.LT(1);

        int parameter_array_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }

            // CSharp4Tree.g:1301:5: ( ^( PARAMETER_ARRAY ( attributes )? array_type IDENTIFIER ) )
            // CSharp4Tree.g:1301:10: ^( PARAMETER_ARRAY ( attributes )? array_type IDENTIFIER )
            {
            match(input,PARAMETER_ARRAY,FOLLOW_PARAMETER_ARRAY_in_parameter_array9749); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1301:28: ( attributes )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==ATTRIBUTES) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // CSharp4Tree.g:1301:28: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_parameter_array9751);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_array_type_in_parameter_array9754);
            array_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_parameter_array9756); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 226, parameter_array_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parameter_array"


    public static class property_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration"
    // CSharp4Tree.g:1304:1: property_declaration : ( attributes )? ( property_modifiers )? type member_name OPEN_BRACE accessor_declarations CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.property_declaration_return property_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.property_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.property_declaration_return();
        retval.start = input.LT(1);

        int property_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }

            // CSharp4Tree.g:1305:5: ( ( attributes )? ( property_modifiers )? type member_name OPEN_BRACE accessor_declarations CLOSE_BRACE )
            // CSharp4Tree.g:1305:10: ( attributes )? ( property_modifiers )? type member_name OPEN_BRACE accessor_declarations CLOSE_BRACE
            {
            // CSharp4Tree.g:1305:10: ( attributes )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==ATTRIBUTES) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // CSharp4Tree.g:1305:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_property_declaration9778);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1305:22: ( property_modifiers )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ABSTRACT||LA203_0==EXTERN||LA203_0==INTERNAL||LA203_0==NEW||LA203_0==OVERRIDE||(LA203_0 >= PRIVATE && LA203_0 <= PUBLIC)||LA203_0==SEALED||LA203_0==STATIC||LA203_0==VIRTUAL) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // CSharp4Tree.g:1305:22: property_modifiers
                    {
                    pushFollow(FOLLOW_property_modifiers_in_property_declaration9781);
                    property_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_property_declaration9784);
            type();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_member_name_in_property_declaration9786);
            member_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_property_declaration9788); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration9799);
            accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_property_declaration9801); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 227, property_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_declaration"


    public static class property_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifiers"
    // CSharp4Tree.g:1309:1: property_modifiers : ( property_modifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.property_modifiers_return property_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.property_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.property_modifiers_return();
        retval.start = input.LT(1);

        int property_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }

            // CSharp4Tree.g:1310:5: ( ( property_modifier )+ )
            // CSharp4Tree.g:1310:10: ( property_modifier )+
            {
            // CSharp4Tree.g:1310:10: ( property_modifier )+
            int cnt204=0;
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==ABSTRACT||LA204_0==EXTERN||LA204_0==INTERNAL||LA204_0==NEW||LA204_0==OVERRIDE||(LA204_0 >= PRIVATE && LA204_0 <= PUBLIC)||LA204_0==SEALED||LA204_0==STATIC||LA204_0==VIRTUAL) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // CSharp4Tree.g:1310:10: property_modifier
            	    {
            	    pushFollow(FOLLOW_property_modifier_in_property_modifiers9822);
            	    property_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt204 >= 1 ) break loop204;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(204, input);
                        throw eee;
                }
                cnt204++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 228, property_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_modifiers"


    public static class property_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_modifier"
    // CSharp4Tree.g:1313:1: property_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.property_modifier_return property_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.property_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.property_modifier_return();
        retval.start = input.LT(1);

        int property_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }

            // CSharp4Tree.g:1314:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==EXTERN||input.LA(1)==INTERNAL||input.LA(1)==NEW||input.LA(1)==OVERRIDE||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==SEALED||input.LA(1)==STATIC||input.LA(1)==VIRTUAL ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 229, property_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_modifier"


    public static class accessor_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_declarations"
    // CSharp4Tree.g:1328:1: accessor_declarations : ( attributes )? ( accessor_modifier )? ( get_contextual_keyword accessor_body ( set_accessor_declaration )? | set_contextual_keyword accessor_body ( get_accessor_declaration )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.accessor_declarations_return accessor_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.accessor_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.accessor_declarations_return();
        retval.start = input.LT(1);

        int accessor_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }

            // CSharp4Tree.g:1329:5: ( ( attributes )? ( accessor_modifier )? ( get_contextual_keyword accessor_body ( set_accessor_declaration )? | set_contextual_keyword accessor_body ( get_accessor_declaration )? ) )
            // CSharp4Tree.g:1329:10: ( attributes )? ( accessor_modifier )? ( get_contextual_keyword accessor_body ( set_accessor_declaration )? | set_contextual_keyword accessor_body ( get_accessor_declaration )? )
            {
            // CSharp4Tree.g:1329:10: ( attributes )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==ATTRIBUTES) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // CSharp4Tree.g:1329:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_accessor_declarations9976);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1329:22: ( accessor_modifier )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==INTERNAL||(LA206_0 >= PRIVATE && LA206_0 <= PROTECTED)) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // CSharp4Tree.g:1329:22: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_accessor_declarations9979);
                    accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1330:10: ( get_contextual_keyword accessor_body ( set_accessor_declaration )? | set_contextual_keyword accessor_body ( get_accessor_declaration )? )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENTIFIER) ) {
                int LA209_1 = input.LA(2);

                if ( (synpred445_CSharp4Tree()) ) {
                    alt209=1;
                }
                else if ( (true) ) {
                    alt209=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // CSharp4Tree.g:1330:12: get_contextual_keyword accessor_body ( set_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_get_contextual_keyword_in_accessor_declarations9994);
                    get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations9996);
                    accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:1330:49: ( set_accessor_declaration )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==IDENTIFIER||LA207_0==INTERNAL||(LA207_0 >= PRIVATE && LA207_0 <= PROTECTED)||LA207_0==ATTRIBUTES) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // CSharp4Tree.g:1330:49: set_accessor_declaration
                            {
                            pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations9998);
                            set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1331:12: set_contextual_keyword accessor_body ( get_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_set_contextual_keyword_in_accessor_declarations10012);
                    set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_accessor_body_in_accessor_declarations10014);
                    accessor_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:1331:49: ( get_accessor_declaration )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==IDENTIFIER||LA208_0==INTERNAL||(LA208_0 >= PRIVATE && LA208_0 <= PROTECTED)||LA208_0==ATTRIBUTES) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // CSharp4Tree.g:1331:49: get_accessor_declaration
                            {
                            pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations10016);
                            get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 230, accessor_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"


    public static class get_accessor_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_accessor_declaration"
    // CSharp4Tree.g:1334:1: get_accessor_declaration : ( attributes )? ( accessor_modifier )? get_contextual_keyword accessor_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.get_accessor_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.get_accessor_declaration_return();
        retval.start = input.LT(1);

        int get_accessor_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }

            // CSharp4Tree.g:1335:5: ( ( attributes )? ( accessor_modifier )? get_contextual_keyword accessor_body )
            // CSharp4Tree.g:1335:10: ( attributes )? ( accessor_modifier )? get_contextual_keyword accessor_body
            {
            // CSharp4Tree.g:1335:10: ( attributes )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==ATTRIBUTES) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // CSharp4Tree.g:1335:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_get_accessor_declaration10040);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1335:22: ( accessor_modifier )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==INTERNAL||(LA211_0 >= PRIVATE && LA211_0 <= PROTECTED)) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // CSharp4Tree.g:1335:22: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration10043);
                    accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_get_contextual_keyword_in_get_accessor_declaration10046);
            get_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration10048);
            accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 231, get_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"


    public static class set_accessor_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_accessor_declaration"
    // CSharp4Tree.g:1338:1: set_accessor_declaration : ( attributes )? ( accessor_modifier )? set_contextual_keyword accessor_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.set_accessor_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.set_accessor_declaration_return();
        retval.start = input.LT(1);

        int set_accessor_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }

            // CSharp4Tree.g:1339:5: ( ( attributes )? ( accessor_modifier )? set_contextual_keyword accessor_body )
            // CSharp4Tree.g:1339:10: ( attributes )? ( accessor_modifier )? set_contextual_keyword accessor_body
            {
            // CSharp4Tree.g:1339:10: ( attributes )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==ATTRIBUTES) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // CSharp4Tree.g:1339:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_set_accessor_declaration10069);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1339:22: ( accessor_modifier )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==INTERNAL||(LA213_0 >= PRIVATE && LA213_0 <= PROTECTED)) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // CSharp4Tree.g:1339:22: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration10072);
                    accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_set_contextual_keyword_in_set_accessor_declaration10075);
            set_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration10077);
            accessor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 232, set_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"


    public static class accessor_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_modifier"
    // CSharp4Tree.g:1342:1: accessor_modifier : ( PROTECTED | INTERNAL | PRIVATE | PROTECTED INTERNAL | INTERNAL PROTECTED );
    public final IntegrityVariablesParserC_CSharp4Tree.accessor_modifier_return accessor_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.accessor_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.accessor_modifier_return();
        retval.start = input.LT(1);

        int accessor_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }

            // CSharp4Tree.g:1343:5: ( PROTECTED | INTERNAL | PRIVATE | PROTECTED INTERNAL | INTERNAL PROTECTED )
            int alt214=5;
            switch ( input.LA(1) ) {
            case PROTECTED:
                {
                int LA214_1 = input.LA(2);

                if ( (LA214_1==INTERNAL) ) {
                    alt214=4;
                }
                else if ( (LA214_1==EOF||LA214_1==IDENTIFIER) ) {
                    alt214=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 1, input);

                    throw nvae;

                }
                }
                break;
            case INTERNAL:
                {
                int LA214_2 = input.LA(2);

                if ( (LA214_2==PROTECTED) ) {
                    alt214=5;
                }
                else if ( (LA214_2==EOF||LA214_2==IDENTIFIER) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 2, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                alt214=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;

            }

            switch (alt214) {
                case 1 :
                    // CSharp4Tree.g:1343:10: PROTECTED
                    {
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier10098); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1344:10: INTERNAL
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier10109); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1345:10: PRIVATE
                    {
                    match(input,PRIVATE,FOLLOW_PRIVATE_in_accessor_modifier10120); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1346:10: PROTECTED INTERNAL
                    {
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier10131); if (state.failed) return retval;

                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier10133); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1347:10: INTERNAL PROTECTED
                    {
                    match(input,INTERNAL,FOLLOW_INTERNAL_in_accessor_modifier10144); if (state.failed) return retval;

                    match(input,PROTECTED,FOLLOW_PROTECTED_in_accessor_modifier10146); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 233, accessor_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"


    public static class accessor_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "accessor_body"
    // CSharp4Tree.g:1350:1: accessor_body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.accessor_body_return accessor_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.accessor_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.accessor_body_return();
        retval.start = input.LT(1);

        int accessor_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }

            // CSharp4Tree.g:1351:5: ( block | SEMICOLON )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==BLOCK) ) {
                alt215=1;
            }
            else if ( (LA215_0==SEMICOLON) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;

            }
            switch (alt215) {
                case 1 :
                    // CSharp4Tree.g:1351:10: block
                    {
                    pushFollow(FOLLOW_block_in_accessor_body10167);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1352:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_accessor_body10178); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 234, accessor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "accessor_body"


    public static class event_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifiers"
    // CSharp4Tree.g:1355:1: event_modifiers : ( event_modifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.event_modifiers_return event_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.event_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.event_modifiers_return();
        retval.start = input.LT(1);

        int event_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }

            // CSharp4Tree.g:1356:5: ( ( event_modifier )+ )
            // CSharp4Tree.g:1356:10: ( event_modifier )+
            {
            // CSharp4Tree.g:1356:10: ( event_modifier )+
            int cnt216=0;
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==ABSTRACT||LA216_0==EXTERN||LA216_0==INTERNAL||LA216_0==NEW||LA216_0==OVERRIDE||(LA216_0 >= PRIVATE && LA216_0 <= PUBLIC)||LA216_0==SEALED||LA216_0==STATIC||LA216_0==VIRTUAL) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // CSharp4Tree.g:1356:10: event_modifier
            	    {
            	    pushFollow(FOLLOW_event_modifier_in_event_modifiers10199);
            	    event_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt216 >= 1 ) break loop216;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(216, input);
                        throw eee;
                }
                cnt216++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 235, event_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_modifiers"


    public static class event_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_modifier"
    // CSharp4Tree.g:1359:1: event_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.event_modifier_return event_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.event_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.event_modifier_return();
        retval.start = input.LT(1);

        int event_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }

            // CSharp4Tree.g:1360:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | STATIC | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==EXTERN||input.LA(1)==INTERNAL||input.LA(1)==NEW||input.LA(1)==OVERRIDE||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==SEALED||input.LA(1)==STATIC||input.LA(1)==VIRTUAL ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 236, event_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_modifier"


    public static class event_accessor_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_accessor_declarations"
    // CSharp4Tree.g:1374:1: event_accessor_declarations : ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.event_accessor_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.event_accessor_declarations_return();
        retval.start = input.LT(1);

        int event_accessor_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }

            // CSharp4Tree.g:1375:5: ( ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration ) )
            // CSharp4Tree.g:1375:10: ( attributes )? ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration )
            {
            // CSharp4Tree.g:1375:10: ( attributes )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==ATTRIBUTES) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // CSharp4Tree.g:1375:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_accessor_declarations10354);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1376:3: ( add_contextual_keyword block remove_accessor_declaration | remove_contextual_keyword block add_accessor_declaration )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==IDENTIFIER) ) {
                int LA218_1 = input.LA(2);

                if ( (synpred468_CSharp4Tree()) ) {
                    alt218=1;
                }
                else if ( (true) ) {
                    alt218=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }
            switch (alt218) {
                case 1 :
                    // CSharp4Tree.g:1376:5: add_contextual_keyword block remove_accessor_declaration
                    {
                    pushFollow(FOLLOW_add_contextual_keyword_in_event_accessor_declarations10361);
                    add_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations10363);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations10365);
                    remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1377:5: remove_contextual_keyword block add_accessor_declaration
                    {
                    pushFollow(FOLLOW_remove_contextual_keyword_in_event_accessor_declarations10371);
                    remove_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_block_in_event_accessor_declarations10373);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations10375);
                    add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 237, event_accessor_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"


    public static class add_accessor_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_accessor_declaration"
    // CSharp4Tree.g:1380:1: add_accessor_declaration : ( attributes )? add_contextual_keyword block ;
    public final IntegrityVariablesParserC_CSharp4Tree.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.add_accessor_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.add_accessor_declaration_return();
        retval.start = input.LT(1);

        int add_accessor_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }

            // CSharp4Tree.g:1381:5: ( ( attributes )? add_contextual_keyword block )
            // CSharp4Tree.g:1381:10: ( attributes )? add_contextual_keyword block
            {
            // CSharp4Tree.g:1381:10: ( attributes )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==ATTRIBUTES) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // CSharp4Tree.g:1381:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_add_accessor_declaration10397);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_add_contextual_keyword_in_add_accessor_declaration10400);
            add_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_add_accessor_declaration10402);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 238, add_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"


    public static class remove_accessor_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_accessor_declaration"
    // CSharp4Tree.g:1384:1: remove_accessor_declaration : ( attributes )? remove_contextual_keyword block ;
    public final IntegrityVariablesParserC_CSharp4Tree.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.remove_accessor_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.remove_accessor_declaration_return();
        retval.start = input.LT(1);

        int remove_accessor_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }

            // CSharp4Tree.g:1385:5: ( ( attributes )? remove_contextual_keyword block )
            // CSharp4Tree.g:1385:10: ( attributes )? remove_contextual_keyword block
            {
            // CSharp4Tree.g:1385:10: ( attributes )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==ATTRIBUTES) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // CSharp4Tree.g:1385:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_remove_accessor_declaration10423);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration10426);
            remove_contextual_keyword();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_remove_accessor_declaration10428);
            block();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 239, remove_accessor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"


    public static class indexer_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration"
    // CSharp4Tree.g:1388:1: indexer_declaration : ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.indexer_declaration_return indexer_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.indexer_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.indexer_declaration_return();
        retval.start = input.LT(1);

        int indexer_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }

            // CSharp4Tree.g:1389:5: ( ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE )
            // CSharp4Tree.g:1389:10: ( attributes )? ( indexer_modifiers )? indexer_declarator OPEN_BRACE accessor_declarations CLOSE_BRACE
            {
            // CSharp4Tree.g:1389:10: ( attributes )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==ATTRIBUTES) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // CSharp4Tree.g:1389:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_indexer_declaration10449);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1389:22: ( indexer_modifiers )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==ABSTRACT||LA222_0==EXTERN||LA222_0==INTERNAL||LA222_0==NEW||LA222_0==OVERRIDE||(LA222_0 >= PRIVATE && LA222_0 <= PUBLIC)||LA222_0==SEALED||LA222_0==VIRTUAL) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // CSharp4Tree.g:1389:22: indexer_modifiers
                    {
                    pushFollow(FOLLOW_indexer_modifiers_in_indexer_declaration10452);
                    indexer_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration10455);
            indexer_declarator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_indexer_declaration10457); if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration10468);
            accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_indexer_declaration10470); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 240, indexer_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"


    public static class indexer_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifiers"
    // CSharp4Tree.g:1393:1: indexer_modifiers : indexer_modifier ( indexer_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.indexer_modifiers_return indexer_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.indexer_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.indexer_modifiers_return();
        retval.start = input.LT(1);

        int indexer_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }

            // CSharp4Tree.g:1394:5: ( indexer_modifier ( indexer_modifier )* )
            // CSharp4Tree.g:1394:10: indexer_modifier ( indexer_modifier )*
            {
            pushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers10491);
            indexer_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1394:27: ( indexer_modifier )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==ABSTRACT||LA223_0==EXTERN||LA223_0==INTERNAL||LA223_0==NEW||LA223_0==OVERRIDE||(LA223_0 >= PRIVATE && LA223_0 <= PUBLIC)||LA223_0==SEALED||LA223_0==VIRTUAL) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // CSharp4Tree.g:1394:27: indexer_modifier
            	    {
            	    pushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers10493);
            	    indexer_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 241, indexer_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_modifiers"


    public static class indexer_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_modifier"
    // CSharp4Tree.g:1397:1: indexer_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.indexer_modifier_return indexer_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.indexer_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.indexer_modifier_return();
        retval.start = input.LT(1);

        int indexer_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }

            // CSharp4Tree.g:1398:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | VIRTUAL | SEALED | OVERRIDE | ABSTRACT | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==EXTERN||input.LA(1)==INTERNAL||input.LA(1)==NEW||input.LA(1)==OVERRIDE||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==SEALED||input.LA(1)==VIRTUAL ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 242, indexer_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_modifier"


    public static class indexer_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declarator"
    // CSharp4Tree.g:1411:1: indexer_declarator : type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET ;
    public final IntegrityVariablesParserC_CSharp4Tree.indexer_declarator_return indexer_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.indexer_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.indexer_declarator_return();
        retval.start = input.LT(1);

        int indexer_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }

            // CSharp4Tree.g:1412:5: ( type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET )
            // CSharp4Tree.g:1412:10: type ( interface_type DOT )? THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET
            {
            pushFollow(FOLLOW_type_in_indexer_declarator10637);
            type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1412:15: ( interface_type DOT )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==NAMESPACE_OR_TYPE_NAME) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // CSharp4Tree.g:1412:16: interface_type DOT
                    {
                    pushFollow(FOLLOW_interface_type_in_indexer_declarator10640);
                    interface_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,DOT,FOLLOW_DOT_in_indexer_declarator10642); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,THIS,FOLLOW_THIS_in_indexer_declarator10646); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_indexer_declarator10648); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator10650);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_indexer_declarator10652); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 243, indexer_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"


    public static class operator_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration"
    // CSharp4Tree.g:1415:1: operator_declaration : ( attributes )? operator_modifiers operator_declarator operator_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.operator_declaration_return operator_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_declaration_return();
        retval.start = input.LT(1);

        int operator_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }

            // CSharp4Tree.g:1416:5: ( ( attributes )? operator_modifiers operator_declarator operator_body )
            // CSharp4Tree.g:1416:10: ( attributes )? operator_modifiers operator_declarator operator_body
            {
            // CSharp4Tree.g:1416:10: ( attributes )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==ATTRIBUTES) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // CSharp4Tree.g:1416:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_operator_declaration10673);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_operator_modifiers_in_operator_declaration10676);
            operator_modifiers();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_declarator_in_operator_declaration10678);
            operator_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_operator_body_in_operator_declaration10680);
            operator_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 244, operator_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_declaration"


    public static class operator_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifiers"
    // CSharp4Tree.g:1419:1: operator_modifiers : operator_modifier ( operator_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.operator_modifiers_return operator_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_modifiers_return();
        retval.start = input.LT(1);

        int operator_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }

            // CSharp4Tree.g:1420:5: ( operator_modifier ( operator_modifier )* )
            // CSharp4Tree.g:1420:10: operator_modifier ( operator_modifier )*
            {
            pushFollow(FOLLOW_operator_modifier_in_operator_modifiers10701);
            operator_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1420:28: ( operator_modifier )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==EXTERN||LA226_0==PUBLIC||LA226_0==STATIC) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // CSharp4Tree.g:1420:28: operator_modifier
            	    {
            	    pushFollow(FOLLOW_operator_modifier_in_operator_modifiers10703);
            	    operator_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 245, operator_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_modifiers"


    public static class operator_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_modifier"
    // CSharp4Tree.g:1423:1: operator_modifier : ( PUBLIC | STATIC | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.operator_modifier_return operator_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_modifier_return();
        retval.start = input.LT(1);

        int operator_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }

            // CSharp4Tree.g:1424:5: ( PUBLIC | STATIC | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==EXTERN||input.LA(1)==PUBLIC||input.LA(1)==STATIC ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 246, operator_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_modifier"


    public static class operator_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declarator"
    // CSharp4Tree.g:1430:1: operator_declarator : ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator );
    public final IntegrityVariablesParserC_CSharp4Tree.operator_declarator_return operator_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_declarator_return();
        retval.start = input.LT(1);

        int operator_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }

            // CSharp4Tree.g:1431:5: ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator )
            int alt227=3;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==TYPE) ) {
                int LA227_1 = input.LA(2);

                if ( (synpred488_CSharp4Tree()) ) {
                    alt227=1;
                }
                else if ( (synpred489_CSharp4Tree()) ) {
                    alt227=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA227_0==EXPLICIT||LA227_0==IMPLICIT) ) {
                alt227=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;

            }
            switch (alt227) {
                case 1 :
                    // CSharp4Tree.g:1431:10: unary_operator_declarator
                    {
                    pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator10769);
                    unary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1432:10: binary_operator_declarator
                    {
                    pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator10780);
                    binary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1433:10: conversion_operator_declarator
                    {
                    pushFollow(FOLLOW_conversion_operator_declarator_in_operator_declarator10791);
                    conversion_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 247, operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_declarator"


    public static class unary_operator_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "unary_operator_declarator"
    // CSharp4Tree.g:1436:1: unary_operator_declarator : type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS ;
    public final IntegrityVariablesParserC_CSharp4Tree.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.unary_operator_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.unary_operator_declarator_return();
        retval.start = input.LT(1);

        int unary_operator_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }

            // CSharp4Tree.g:1437:5: ( type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS )
            // CSharp4Tree.g:1437:10: type OPERATOR overloadable_unary_operator OPEN_PARENS type IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_unary_operator_declarator10812);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_unary_operator_declarator10814); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_unary_operator_in_unary_operator_declarator10816);
            overloadable_unary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_unary_operator_declarator10818); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_unary_operator_declarator10820);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_unary_operator_declarator10822); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_unary_operator_declarator10824); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 248, unary_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"


    public static class overloadable_unary_operator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_unary_operator"
    // CSharp4Tree.g:1440:1: overloadable_unary_operator : ( PLUS | MINUS | BANG | TILDE | OP_INC | OP_DEC | TRUE | FALSE );
    public final IntegrityVariablesParserC_CSharp4Tree.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.overloadable_unary_operator_return retval = new IntegrityVariablesParserC_CSharp4Tree.overloadable_unary_operator_return();
        retval.start = input.LT(1);

        int overloadable_unary_operator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }

            // CSharp4Tree.g:1441:5: ( PLUS | MINUS | BANG | TILDE | OP_INC | OP_DEC | TRUE | FALSE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==BANG||input.LA(1)==FALSE||input.LA(1)==MINUS||input.LA(1)==OP_DEC||input.LA(1)==OP_INC||input.LA(1)==PLUS||(input.LA(1) >= TILDE && input.LA(1) <= TRUE) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 249, overloadable_unary_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"


    public static class binary_operator_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "binary_operator_declarator"
    // CSharp4Tree.g:1451:1: binary_operator_declarator : type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS ;
    public final IntegrityVariablesParserC_CSharp4Tree.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.binary_operator_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.binary_operator_declarator_return();
        retval.start = input.LT(1);

        int binary_operator_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }

            // CSharp4Tree.g:1452:5: ( type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS )
            // CSharp4Tree.g:1452:10: type OPERATOR overloadable_binary_operator OPEN_PARENS type IDENTIFIER COMMA type IDENTIFIER CLOSE_PARENS
            {
            pushFollow(FOLLOW_type_in_binary_operator_declarator10943);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPERATOR,FOLLOW_OPERATOR_in_binary_operator_declarator10945); if (state.failed) return retval;

            pushFollow(FOLLOW_overloadable_binary_operator_in_binary_operator_declarator10947);
            overloadable_binary_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_binary_operator_declarator10949); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator10951);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator10953); if (state.failed) return retval;

            match(input,COMMA,FOLLOW_COMMA_in_binary_operator_declarator10964); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_binary_operator_declarator10966);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_binary_operator_declarator10968); if (state.failed) return retval;

            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_binary_operator_declarator10970); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 250, binary_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"


    public static class overloadable_binary_operator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_binary_operator"
    // CSharp4Tree.g:1456:1: overloadable_binary_operator : ( PLUS | MINUS | STAR | DIV | PERCENT | AMP | BITWISE_OR | CARET | OP_LEFT_SHIFT | right_shift | OP_EQ | OP_NE | GT | LT | OP_GE | OP_LE );
    public final IntegrityVariablesParserC_CSharp4Tree.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.overloadable_binary_operator_return retval = new IntegrityVariablesParserC_CSharp4Tree.overloadable_binary_operator_return();
        retval.start = input.LT(1);

        int overloadable_binary_operator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }

            // CSharp4Tree.g:1457:5: ( PLUS | MINUS | STAR | DIV | PERCENT | AMP | BITWISE_OR | CARET | OP_LEFT_SHIFT | right_shift | OP_EQ | OP_NE | GT | LT | OP_GE | OP_LE )
            int alt228=16;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt228=1;
                }
                break;
            case MINUS:
                {
                alt228=2;
                }
                break;
            case STAR:
                {
                alt228=3;
                }
                break;
            case DIV:
                {
                alt228=4;
                }
                break;
            case PERCENT:
                {
                alt228=5;
                }
                break;
            case AMP:
                {
                alt228=6;
                }
                break;
            case BITWISE_OR:
                {
                alt228=7;
                }
                break;
            case CARET:
                {
                alt228=8;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt228=9;
                }
                break;
            case OP_RIGHT_SHIFT:
                {
                alt228=10;
                }
                break;
            case OP_EQ:
                {
                alt228=11;
                }
                break;
            case OP_NE:
                {
                alt228=12;
                }
                break;
            case GT:
                {
                alt228=13;
                }
                break;
            case LT:
                {
                alt228=14;
                }
                break;
            case OP_GE:
                {
                alt228=15;
                }
                break;
            case OP_LE:
                {
                alt228=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }

            switch (alt228) {
                case 1 :
                    // CSharp4Tree.g:1457:10: PLUS
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_overloadable_binary_operator10991); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1458:10: MINUS
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_overloadable_binary_operator11002); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1459:10: STAR
                    {
                    match(input,STAR,FOLLOW_STAR_in_overloadable_binary_operator11013); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1460:10: DIV
                    {
                    match(input,DIV,FOLLOW_DIV_in_overloadable_binary_operator11024); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1461:10: PERCENT
                    {
                    match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_binary_operator11035); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1462:10: AMP
                    {
                    match(input,AMP,FOLLOW_AMP_in_overloadable_binary_operator11046); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:1463:10: BITWISE_OR
                    {
                    match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_binary_operator11057); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:1464:10: CARET
                    {
                    match(input,CARET,FOLLOW_CARET_in_overloadable_binary_operator11068); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:1465:10: OP_LEFT_SHIFT
                    {
                    match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator11079); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:1466:10: right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_binary_operator11090);
                    right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:1467:10: OP_EQ
                    {
                    match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_binary_operator11101); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:1468:10: OP_NE
                    {
                    match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_binary_operator11112); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // CSharp4Tree.g:1469:10: GT
                    {
                    match(input,GT,FOLLOW_GT_in_overloadable_binary_operator11123); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // CSharp4Tree.g:1470:10: LT
                    {
                    match(input,LT,FOLLOW_LT_in_overloadable_binary_operator11134); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // CSharp4Tree.g:1471:10: OP_GE
                    {
                    match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_binary_operator11145); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // CSharp4Tree.g:1472:10: OP_LE
                    {
                    match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_binary_operator11156); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 251, overloadable_binary_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"


    public static class overloadable_operator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "overloadable_operator"
    // CSharp4Tree.g:1477:1: overloadable_operator : ( PLUS | MINUS | BANG | TILDE | OP_INC | OP_DEC | TRUE | FALSE | STAR | DIV | PERCENT | AMP | BITWISE_OR | CARET | OP_LEFT_SHIFT | right_shift | OP_EQ | OP_NE | GT | LT | OP_GE | OP_LE );
    public final IntegrityVariablesParserC_CSharp4Tree.overloadable_operator_return overloadable_operator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.overloadable_operator_return retval = new IntegrityVariablesParserC_CSharp4Tree.overloadable_operator_return();
        retval.start = input.LT(1);

        int overloadable_operator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }

            // CSharp4Tree.g:1478:5: ( PLUS | MINUS | BANG | TILDE | OP_INC | OP_DEC | TRUE | FALSE | STAR | DIV | PERCENT | AMP | BITWISE_OR | CARET | OP_LEFT_SHIFT | right_shift | OP_EQ | OP_NE | GT | LT | OP_GE | OP_LE )
            int alt229=22;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt229=1;
                }
                break;
            case MINUS:
                {
                alt229=2;
                }
                break;
            case BANG:
                {
                alt229=3;
                }
                break;
            case TILDE:
                {
                alt229=4;
                }
                break;
            case OP_INC:
                {
                alt229=5;
                }
                break;
            case OP_DEC:
                {
                alt229=6;
                }
                break;
            case TRUE:
                {
                alt229=7;
                }
                break;
            case FALSE:
                {
                alt229=8;
                }
                break;
            case STAR:
                {
                alt229=9;
                }
                break;
            case DIV:
                {
                alt229=10;
                }
                break;
            case PERCENT:
                {
                alt229=11;
                }
                break;
            case AMP:
                {
                alt229=12;
                }
                break;
            case BITWISE_OR:
                {
                alt229=13;
                }
                break;
            case CARET:
                {
                alt229=14;
                }
                break;
            case OP_LEFT_SHIFT:
                {
                alt229=15;
                }
                break;
            case OP_RIGHT_SHIFT:
                {
                alt229=16;
                }
                break;
            case OP_EQ:
                {
                alt229=17;
                }
                break;
            case OP_NE:
                {
                alt229=18;
                }
                break;
            case GT:
                {
                alt229=19;
                }
                break;
            case LT:
                {
                alt229=20;
                }
                break;
            case OP_GE:
                {
                alt229=21;
                }
                break;
            case OP_LE:
                {
                alt229=22;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;

            }

            switch (alt229) {
                case 1 :
                    // CSharp4Tree.g:1478:10: PLUS
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_overloadable_operator11179); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1479:10: MINUS
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_overloadable_operator11190); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1480:10: BANG
                    {
                    match(input,BANG,FOLLOW_BANG_in_overloadable_operator11201); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1481:10: TILDE
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_overloadable_operator11212); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1482:10: OP_INC
                    {
                    match(input,OP_INC,FOLLOW_OP_INC_in_overloadable_operator11223); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1483:10: OP_DEC
                    {
                    match(input,OP_DEC,FOLLOW_OP_DEC_in_overloadable_operator11234); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // CSharp4Tree.g:1484:10: TRUE
                    {
                    match(input,TRUE,FOLLOW_TRUE_in_overloadable_operator11245); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // CSharp4Tree.g:1485:10: FALSE
                    {
                    match(input,FALSE,FOLLOW_FALSE_in_overloadable_operator11256); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // CSharp4Tree.g:1486:10: STAR
                    {
                    match(input,STAR,FOLLOW_STAR_in_overloadable_operator11267); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // CSharp4Tree.g:1487:10: DIV
                    {
                    match(input,DIV,FOLLOW_DIV_in_overloadable_operator11278); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // CSharp4Tree.g:1488:10: PERCENT
                    {
                    match(input,PERCENT,FOLLOW_PERCENT_in_overloadable_operator11289); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // CSharp4Tree.g:1489:10: AMP
                    {
                    match(input,AMP,FOLLOW_AMP_in_overloadable_operator11300); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // CSharp4Tree.g:1490:10: BITWISE_OR
                    {
                    match(input,BITWISE_OR,FOLLOW_BITWISE_OR_in_overloadable_operator11311); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // CSharp4Tree.g:1491:10: CARET
                    {
                    match(input,CARET,FOLLOW_CARET_in_overloadable_operator11322); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // CSharp4Tree.g:1492:10: OP_LEFT_SHIFT
                    {
                    match(input,OP_LEFT_SHIFT,FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator11333); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // CSharp4Tree.g:1493:10: right_shift
                    {
                    pushFollow(FOLLOW_right_shift_in_overloadable_operator11344);
                    right_shift();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 17 :
                    // CSharp4Tree.g:1494:10: OP_EQ
                    {
                    match(input,OP_EQ,FOLLOW_OP_EQ_in_overloadable_operator11355); if (state.failed) return retval;

                    }
                    break;
                case 18 :
                    // CSharp4Tree.g:1495:10: OP_NE
                    {
                    match(input,OP_NE,FOLLOW_OP_NE_in_overloadable_operator11366); if (state.failed) return retval;

                    }
                    break;
                case 19 :
                    // CSharp4Tree.g:1496:10: GT
                    {
                    match(input,GT,FOLLOW_GT_in_overloadable_operator11377); if (state.failed) return retval;

                    }
                    break;
                case 20 :
                    // CSharp4Tree.g:1497:10: LT
                    {
                    match(input,LT,FOLLOW_LT_in_overloadable_operator11388); if (state.failed) return retval;

                    }
                    break;
                case 21 :
                    // CSharp4Tree.g:1498:10: OP_GE
                    {
                    match(input,OP_GE,FOLLOW_OP_GE_in_overloadable_operator11399); if (state.failed) return retval;

                    }
                    break;
                case 22 :
                    // CSharp4Tree.g:1499:10: OP_LE
                    {
                    match(input,OP_LE,FOLLOW_OP_LE_in_overloadable_operator11410); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 252, overloadable_operator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "overloadable_operator"


    public static class conversion_operator_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "conversion_operator_declarator"
    // CSharp4Tree.g:1503:1: conversion_operator_declarator : ( ^( IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS ) | ^( EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS ) );
    public final IntegrityVariablesParserC_CSharp4Tree.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.conversion_operator_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.conversion_operator_declarator_return();
        retval.start = input.LT(1);

        int conversion_operator_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }

            // CSharp4Tree.g:1504:5: ( ^( IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS ) | ^( EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS ) )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==IMPLICIT) ) {
                alt230=1;
            }
            else if ( (LA230_0==EXPLICIT) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;

            }
            switch (alt230) {
                case 1 :
                    // CSharp4Tree.g:1504:10: ^( IMPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS )
                    {
                    match(input,IMPLICIT,FOLLOW_IMPLICIT_in_conversion_operator_declarator11433); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator11435); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator11437);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator11439); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator11441);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator11443); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator11445); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1505:10: ^( EXPLICIT OPERATOR type OPEN_PARENS type IDENTIFIER CLOSE_PARENS )
                    {
                    match(input,EXPLICIT,FOLLOW_EXPLICIT_in_conversion_operator_declarator11458); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,OPERATOR,FOLLOW_OPERATOR_in_conversion_operator_declarator11460); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator11462);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_conversion_operator_declarator11464); if (state.failed) return retval;

                    pushFollow(FOLLOW_type_in_conversion_operator_declarator11466);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_conversion_operator_declarator11468); if (state.failed) return retval;

                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator11470); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 253, conversion_operator_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"


    public static class operator_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_body"
    // CSharp4Tree.g:1508:1: operator_body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.operator_body_return operator_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_body_return();
        retval.start = input.LT(1);

        int operator_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }

            // CSharp4Tree.g:1509:5: ( block | SEMICOLON )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==BLOCK) ) {
                alt231=1;
            }
            else if ( (LA231_0==SEMICOLON) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;

            }
            switch (alt231) {
                case 1 :
                    // CSharp4Tree.g:1509:10: block
                    {
                    pushFollow(FOLLOW_block_in_operator_body11492);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1510:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operator_body11503); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 254, operator_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_body"


    public static class constructor_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration"
    // CSharp4Tree.g:1513:1: constructor_declaration : ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body ;
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_declaration_return constructor_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_declaration_return();
        retval.start = input.LT(1);

        int constructor_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }

            // CSharp4Tree.g:1514:5: ( ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body )
            // CSharp4Tree.g:1514:10: ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body
            {
            // CSharp4Tree.g:1514:10: ( attributes )?
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==ATTRIBUTES) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    // CSharp4Tree.g:1514:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_constructor_declaration11524);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1514:22: ( constructor_modifiers )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==EXTERN||LA233_0==INTERNAL||(LA233_0 >= PRIVATE && LA233_0 <= PUBLIC)) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // CSharp4Tree.g:1514:22: constructor_modifiers
                    {
                    pushFollow(FOLLOW_constructor_modifiers_in_constructor_declaration11527);
                    constructor_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration11530);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_constructor_body_in_constructor_declaration11532);
            constructor_body();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 255, constructor_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"


    public static class constructor_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifiers"
    // CSharp4Tree.g:1517:1: constructor_modifiers : ( constructor_modifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_modifiers_return constructor_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_modifiers_return();
        retval.start = input.LT(1);

        int constructor_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }

            // CSharp4Tree.g:1518:5: ( ( constructor_modifier )+ )
            // CSharp4Tree.g:1518:10: ( constructor_modifier )+
            {
            // CSharp4Tree.g:1518:10: ( constructor_modifier )+
            int cnt234=0;
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==EXTERN||LA234_0==INTERNAL||(LA234_0 >= PRIVATE && LA234_0 <= PUBLIC)) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // CSharp4Tree.g:1518:10: constructor_modifier
            	    {
            	    pushFollow(FOLLOW_constructor_modifier_in_constructor_modifiers11553);
            	    constructor_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt234 >= 1 ) break loop234;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(234, input);
                        throw eee;
                }
                cnt234++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 256, constructor_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_modifiers"


    public static class constructor_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_modifier"
    // CSharp4Tree.g:1521:1: constructor_modifier : ( PUBLIC | PROTECTED | INTERNAL | PRIVATE | EXTERN );
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_modifier_return constructor_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_modifier_return();
        retval.start = input.LT(1);

        int constructor_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }

            // CSharp4Tree.g:1522:5: ( PUBLIC | PROTECTED | INTERNAL | PRIVATE | EXTERN )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==EXTERN||input.LA(1)==INTERNAL||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 257, constructor_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_modifier"


    public static class constructor_declarator_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declarator"
    // CSharp4Tree.g:1530:1: constructor_declarator : IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_declarator_return constructor_declarator() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_declarator_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_declarator_return();
        retval.start = input.LT(1);

        int constructor_declarator_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }

            // CSharp4Tree.g:1531:5: ( IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )? )
            // CSharp4Tree.g:1531:10: IDENTIFIER OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( constructor_initializer )?
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declarator11642); if (state.failed) return retval;

            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_declarator11644); if (state.failed) return retval;

            // CSharp4Tree.g:1531:33: ( formal_parameter_list )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==FORMAL_PARAMETER_LIST) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // CSharp4Tree.g:1531:33: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator11646);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_declarator11649); if (state.failed) return retval;

            // CSharp4Tree.g:1532:10: ( constructor_initializer )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==COLON) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // CSharp4Tree.g:1532:10: constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator11660);
                    constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 258, constructor_declarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"


    public static class constructor_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_initializer"
    // CSharp4Tree.g:1535:1: constructor_initializer : ( COLON BASE OPEN_PARENS ( argument_list )? CLOSE_PARENS | COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS );
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_initializer_return constructor_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_initializer_return();
        retval.start = input.LT(1);

        int constructor_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }

            // CSharp4Tree.g:1536:5: ( COLON BASE OPEN_PARENS ( argument_list )? CLOSE_PARENS | COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==COLON) ) {
                int LA239_1 = input.LA(2);

                if ( (LA239_1==BASE) ) {
                    alt239=1;
                }
                else if ( (LA239_1==THIS) ) {
                    alt239=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }
            switch (alt239) {
                case 1 :
                    // CSharp4Tree.g:1536:10: COLON BASE OPEN_PARENS ( argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer11682); if (state.failed) return retval;

                    match(input,BASE,FOLLOW_BASE_in_constructor_initializer11684); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer11686); if (state.failed) return retval;

                    // CSharp4Tree.g:1536:33: ( argument_list )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==ARGUMENT) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            // CSharp4Tree.g:1536:33: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer11688);
                            argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer11691); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1537:10: COLON THIS OPEN_PARENS ( argument_list )? CLOSE_PARENS
                    {
                    match(input,COLON,FOLLOW_COLON_in_constructor_initializer11702); if (state.failed) return retval;

                    match(input,THIS,FOLLOW_THIS_in_constructor_initializer11704); if (state.failed) return retval;

                    match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_constructor_initializer11706); if (state.failed) return retval;

                    // CSharp4Tree.g:1537:33: ( argument_list )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==ARGUMENT) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // CSharp4Tree.g:1537:33: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_constructor_initializer11708);
                            argument_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_constructor_initializer11711); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 259, constructor_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"


    public static class constructor_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_body"
    // CSharp4Tree.g:1540:1: constructor_body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_body_return constructor_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_body_return();
        retval.start = input.LT(1);

        int constructor_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }

            // CSharp4Tree.g:1541:5: ( block | SEMICOLON )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==BLOCK) ) {
                alt240=1;
            }
            else if ( (LA240_0==SEMICOLON) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;

            }
            switch (alt240) {
                case 1 :
                    // CSharp4Tree.g:1541:10: block
                    {
                    pushFollow(FOLLOW_block_in_constructor_body11732);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1542:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constructor_body11743); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 260, constructor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_body"


    public static class static_constructor_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "static_constructor_body"
    // CSharp4Tree.g:1559:1: static_constructor_body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.static_constructor_body_return static_constructor_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.static_constructor_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.static_constructor_body_return();
        retval.start = input.LT(1);

        int static_constructor_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }

            // CSharp4Tree.g:1560:5: ( block | SEMICOLON )
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==BLOCK) ) {
                alt241=1;
            }
            else if ( (LA241_0==SEMICOLON) ) {
                alt241=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }
            switch (alt241) {
                case 1 :
                    // CSharp4Tree.g:1560:10: block
                    {
                    pushFollow(FOLLOW_block_in_static_constructor_body11770);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1561:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_static_constructor_body11781); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 261, static_constructor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "static_constructor_body"


    public static class destructor_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_body"
    // CSharp4Tree.g:1570:1: destructor_body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.destructor_body_return destructor_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.destructor_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.destructor_body_return();
        retval.start = input.LT(1);

        int destructor_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }

            // CSharp4Tree.g:1571:5: ( block | SEMICOLON )
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==BLOCK) ) {
                alt242=1;
            }
            else if ( (LA242_0==SEMICOLON) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }
            switch (alt242) {
                case 1 :
                    // CSharp4Tree.g:1571:10: block
                    {
                    pushFollow(FOLLOW_block_in_destructor_body11805);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1572:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_destructor_body11816); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 262, destructor_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "destructor_body"


    public static class body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "body"
    // CSharp4Tree.g:1576:1: body : ( block | SEMICOLON );
    public final IntegrityVariablesParserC_CSharp4Tree.body_return body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.body_return retval = new IntegrityVariablesParserC_CSharp4Tree.body_return();
        retval.start = input.LT(1);

        int body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }

            // CSharp4Tree.g:1577:5: ( block | SEMICOLON )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==BLOCK) ) {
                alt243=1;
            }
            else if ( (LA243_0==SEMICOLON) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;

            }
            switch (alt243) {
                case 1 :
                    // CSharp4Tree.g:1577:10: block
                    {
                    pushFollow(FOLLOW_block_in_body11837);
                    block();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1578:10: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_body11848); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 263, body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "body"


    public static class struct_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_declaration"
    // CSharp4Tree.g:1583:1: struct_declaration : ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_declaration_return struct_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_declaration_return();
        retval.start = input.LT(1);

        int struct_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }

            // CSharp4Tree.g:1584:5: ( ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )? )
            // CSharp4Tree.g:1584:10: ( attributes )? ( struct_modifiers )? ( partial_contextual_keyword )? STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( SEMICOLON )?
            {
            // CSharp4Tree.g:1584:10: ( attributes )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==ATTRIBUTES) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // CSharp4Tree.g:1584:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_declaration11872);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1584:22: ( struct_modifiers )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==INTERNAL||LA245_0==NEW||(LA245_0 >= PRIVATE && LA245_0 <= PUBLIC)) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // CSharp4Tree.g:1584:22: struct_modifiers
                    {
                    pushFollow(FOLLOW_struct_modifiers_in_struct_declaration11875);
                    struct_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1584:40: ( partial_contextual_keyword )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==IDENTIFIER) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // CSharp4Tree.g:1584:40: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_struct_declaration11878);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,STRUCT,FOLLOW_STRUCT_in_struct_declaration11884); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_declaration11886); if (state.failed) return retval;

            // CSharp4Tree.g:1585:21: ( type_parameter_list )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==TYPE_PARAMETERS) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // CSharp4Tree.g:1585:21: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_declaration11888);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1585:42: ( struct_interfaces )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==IMPLEMENTS) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // CSharp4Tree.g:1585:42: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_declaration11891);
                    struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1586:10: ( type_parameter_constraints_clauses )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // CSharp4Tree.g:1586:10: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration11903);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_declaration11906);
            struct_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1586:58: ( SEMICOLON )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==SEMICOLON) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // CSharp4Tree.g:1586:58: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_declaration11908); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 264, struct_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_declaration"


    public static class struct_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifiers"
    // CSharp4Tree.g:1589:1: struct_modifiers : struct_modifier ( struct_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_modifiers_return struct_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_modifiers_return();
        retval.start = input.LT(1);

        int struct_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }

            // CSharp4Tree.g:1590:5: ( struct_modifier ( struct_modifier )* )
            // CSharp4Tree.g:1590:10: struct_modifier ( struct_modifier )*
            {
            pushFollow(FOLLOW_struct_modifier_in_struct_modifiers11930);
            struct_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1590:26: ( struct_modifier )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==INTERNAL||LA251_0==NEW||(LA251_0 >= PRIVATE && LA251_0 <= PUBLIC)) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // CSharp4Tree.g:1590:26: struct_modifier
            	    {
            	    pushFollow(FOLLOW_struct_modifier_in_struct_modifiers11932);
            	    struct_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 265, struct_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"


    public static class struct_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_modifier"
    // CSharp4Tree.g:1593:1: struct_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE );
    public final IntegrityVariablesParserC_CSharp4Tree.struct_modifier_return struct_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_modifier_return();
        retval.start = input.LT(1);

        int struct_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }

            // CSharp4Tree.g:1594:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==INTERNAL||input.LA(1)==NEW||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 266, struct_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_modifier"


    public static class struct_interfaces_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_interfaces"
    // CSharp4Tree.g:1602:1: struct_interfaces : interface_type_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_interfaces_return struct_interfaces() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_interfaces_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_interfaces_return();
        retval.start = input.LT(1);

        int struct_interfaces_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }

            // CSharp4Tree.g:1603:5: ( interface_type_list )
            // CSharp4Tree.g:1603:10: interface_type_list
            {
            pushFollow(FOLLOW_interface_type_list_in_struct_interfaces12020);
            interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 267, struct_interfaces_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"


    public static class struct_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_body"
    // CSharp4Tree.g:1606:1: struct_body : ( struct_member_declarations )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_body_return struct_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_body_return();
        retval.start = input.LT(1);

        int struct_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }

            // CSharp4Tree.g:1607:5: ( ( struct_member_declarations )? )
            // CSharp4Tree.g:1607:10: ( struct_member_declarations )?
            {
            // CSharp4Tree.g:1607:10: ( struct_member_declarations )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==STRUCT_MEMBER_DECLARATIONS) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // CSharp4Tree.g:1607:10: struct_member_declarations
                    {
                    pushFollow(FOLLOW_struct_member_declarations_in_struct_body12041);
                    struct_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 268, struct_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_body"


    public static class struct_member_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declarations"
    // CSharp4Tree.g:1610:1: struct_member_declarations : ^( STRUCT_MEMBER_DECLARATIONS ( struct_member_declaration )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_member_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_member_declarations_return();
        retval.start = input.LT(1);

        int struct_member_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }

            // CSharp4Tree.g:1611:5: ( ^( STRUCT_MEMBER_DECLARATIONS ( struct_member_declaration )+ ) )
            // CSharp4Tree.g:1611:10: ^( STRUCT_MEMBER_DECLARATIONS ( struct_member_declaration )+ )
            {
            match(input,STRUCT_MEMBER_DECLARATIONS,FOLLOW_STRUCT_MEMBER_DECLARATIONS_in_struct_member_declarations12064); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1611:39: ( struct_member_declaration )+
            int cnt253=0;
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==CLASS||LA253_0==DELEGATE||(LA253_0 >= ENUM && LA253_0 <= EXPLICIT)||LA253_0==IMPLICIT||LA253_0==INTERFACE||LA253_0==OPERATOR||LA253_0==STRUCT||LA253_0==CONSTANT_DECLARATORS||LA253_0==CONSTRUCTOR_DECL||LA253_0==FIELD_DECL||LA253_0==INDEXER_DECL||LA253_0==METHOD_DECL||LA253_0==PROPERTY_DECL) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    // CSharp4Tree.g:1611:39: struct_member_declaration
            	    {
            	    pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations12066);
            	    struct_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt253 >= 1 ) break loop253;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(253, input);
                        throw eee;
                }
                cnt253++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 269, struct_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"


    public static class struct_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_member_declaration"
    // CSharp4Tree.g:1614:1: struct_member_declaration : ^( common_member_declaration ( attributes )? ( all_member_modifiers )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_member_declaration_return();
        retval.start = input.LT(1);

        int struct_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }

            // CSharp4Tree.g:1615:5: ( ^( common_member_declaration ( attributes )? ( all_member_modifiers )? ) )
            // CSharp4Tree.g:1615:10: ^( common_member_declaration ( attributes )? ( all_member_modifiers )? )
            {
            pushFollow(FOLLOW_common_member_declaration_in_struct_member_declaration12089);
            common_member_declaration();

            state._fsp--;
            if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:1615:38: ( attributes )?
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==ATTRIBUTES) ) {
                    alt254=1;
                }
                switch (alt254) {
                    case 1 :
                        // CSharp4Tree.g:1615:38: attributes
                        {
                        pushFollow(FOLLOW_attributes_in_struct_member_declaration12091);
                        attributes();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                // CSharp4Tree.g:1615:50: ( all_member_modifiers )?
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==MODIFIERS) ) {
                    alt255=1;
                }
                switch (alt255) {
                    case 1 :
                        // CSharp4Tree.g:1615:50: all_member_modifiers
                        {
                        pushFollow(FOLLOW_all_member_modifiers_in_struct_member_declaration12094);
                        all_member_modifiers();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 270, struct_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"


    public static class array_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type"
    // CSharp4Tree.g:1622:1: array_type : ^( TYPE array_type2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.array_type_return array_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.array_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.array_type_return();
        retval.start = input.LT(1);

        int array_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }

            // CSharp4Tree.g:1623:5: ( ^( TYPE array_type2 ) )
            // CSharp4Tree.g:1623:10: ^( TYPE array_type2 )
            {
            match(input,TYPE,FOLLOW_TYPE_in_array_type12123); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_array_type2_in_array_type12125);
            array_type2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 271, array_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_type"


    public static class array_type2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_type2"
    // CSharp4Tree.g:1626:1: array_type2 : base_type ( ( STAR | INTERR )* rank_specifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.array_type2_return array_type2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.array_type2_return retval = new IntegrityVariablesParserC_CSharp4Tree.array_type2_return();
        retval.start = input.LT(1);

        int array_type2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }

            // CSharp4Tree.g:1627:5: ( base_type ( ( STAR | INTERR )* rank_specifier )+ )
            // CSharp4Tree.g:1627:10: base_type ( ( STAR | INTERR )* rank_specifier )+
            {
            pushFollow(FOLLOW_base_type_in_array_type212146);
            base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1627:20: ( ( STAR | INTERR )* rank_specifier )+
            int cnt257=0;
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==INTERR||LA257_0==STAR||LA257_0==RANK_SPECIFIER) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // CSharp4Tree.g:1627:21: ( STAR | INTERR )* rank_specifier
            	    {
            	    // CSharp4Tree.g:1627:21: ( STAR | INTERR )*
            	    loop256:
            	    do {
            	        int alt256=2;
            	        int LA256_0 = input.LA(1);

            	        if ( (LA256_0==INTERR||LA256_0==STAR) ) {
            	            alt256=1;
            	        }


            	        switch (alt256) {
            	    	case 1 :
            	    	    // CSharp4Tree.g:
            	    	    {
            	    	    if ( input.LA(1)==INTERR||input.LA(1)==STAR ) {
            	    	        input.consume();
            	    	        state.errorRecovery=false;
            	    	        state.failed=false;
            	    	    }
            	    	    else {
            	    	        if (state.backtracking>0) {state.failed=true; return retval;}
            	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	    	        throw mse;
            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop256;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_rank_specifier_in_array_type212158);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt257 >= 1 ) break loop257;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(257, input);
                        throw eee;
                }
                cnt257++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 272, array_type2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_type2"


    public static class non_array_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type"
    // CSharp4Tree.g:1631:1: non_array_type : ^( TYPE non_array_type2 ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.non_array_type_return non_array_type() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.non_array_type_return retval = new IntegrityVariablesParserC_CSharp4Tree.non_array_type_return();
        retval.start = input.LT(1);

        int non_array_type_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }

            // CSharp4Tree.g:1632:5: ( ^( TYPE non_array_type2 ) )
            // CSharp4Tree.g:1632:10: ^( TYPE non_array_type2 )
            {
            match(input,TYPE,FOLLOW_TYPE_in_non_array_type12184); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_non_array_type2_in_non_array_type12186);
            non_array_type2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 273, non_array_type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_array_type"


    public static class non_array_type2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "non_array_type2"
    // CSharp4Tree.g:1635:1: non_array_type2 : base_type ( rank_specifier | INTERR | STAR )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.non_array_type2_return non_array_type2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.non_array_type2_return retval = new IntegrityVariablesParserC_CSharp4Tree.non_array_type2_return();
        retval.start = input.LT(1);

        int non_array_type2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }

            // CSharp4Tree.g:1636:5: ( base_type ( rank_specifier | INTERR | STAR )* )
            // CSharp4Tree.g:1636:10: base_type ( rank_specifier | INTERR | STAR )*
            {
            pushFollow(FOLLOW_base_type_in_non_array_type212208);
            base_type();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1636:20: ( rank_specifier | INTERR | STAR )*
            loop258:
            do {
                int alt258=4;
                switch ( input.LA(1) ) {
                case RANK_SPECIFIER:
                    {
                    alt258=1;
                    }
                    break;
                case INTERR:
                    {
                    alt258=2;
                    }
                    break;
                case STAR:
                    {
                    alt258=3;
                    }
                    break;

                }

                switch (alt258) {
            	case 1 :
            	    // CSharp4Tree.g:1636:21: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_non_array_type212211);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // CSharp4Tree.g:1636:38: INTERR
            	    {
            	    match(input,INTERR,FOLLOW_INTERR_in_non_array_type212215); if (state.failed) return retval;

            	    }
            	    break;
            	case 3 :
            	    // CSharp4Tree.g:1636:47: STAR
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_non_array_type212219); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 274, non_array_type2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "non_array_type2"


    public static class rank_specifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifiers"
    // CSharp4Tree.g:1640:1: rank_specifiers : ( rank_specifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.rank_specifiers_return rank_specifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.rank_specifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.rank_specifiers_return();
        retval.start = input.LT(1);

        int rank_specifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }

            // CSharp4Tree.g:1641:5: ( ( rank_specifier )+ )
            // CSharp4Tree.g:1641:10: ( rank_specifier )+
            {
            // CSharp4Tree.g:1641:10: ( rank_specifier )+
            int cnt259=0;
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==RANK_SPECIFIER) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    // CSharp4Tree.g:1641:10: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_rank_specifiers12244);
            	    rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt259 >= 1 ) break loop259;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(259, input);
                        throw eee;
                }
                cnt259++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 275, rank_specifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"


    public static class rank_specifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "rank_specifier"
    // CSharp4Tree.g:1645:1: rank_specifier : ^( RANK_SPECIFIER ( dim_separators )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.rank_specifier_return rank_specifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.rank_specifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.rank_specifier_return();
        retval.start = input.LT(1);

        int rank_specifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }

            // CSharp4Tree.g:1646:5: ( ^( RANK_SPECIFIER ( dim_separators )? ) )
            // CSharp4Tree.g:1646:10: ^( RANK_SPECIFIER ( dim_separators )? )
            {
            match(input,RANK_SPECIFIER,FOLLOW_RANK_SPECIFIER_in_rank_specifier12269); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:1646:27: ( dim_separators )?
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==COMMA) ) {
                    alt260=1;
                }
                switch (alt260) {
                    case 1 :
                        // CSharp4Tree.g:1646:27: dim_separators
                        {
                        pushFollow(FOLLOW_dim_separators_in_rank_specifier12271);
                        dim_separators();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 276, rank_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rank_specifier"


    public static class dim_separators_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dim_separators"
    // CSharp4Tree.g:1649:1: dim_separators : ( COMMA )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.dim_separators_return dim_separators() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.dim_separators_return retval = new IntegrityVariablesParserC_CSharp4Tree.dim_separators_return();
        retval.start = input.LT(1);

        int dim_separators_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }

            // CSharp4Tree.g:1650:5: ( ( COMMA )+ )
            // CSharp4Tree.g:1650:10: ( COMMA )+
            {
            // CSharp4Tree.g:1650:10: ( COMMA )+
            int cnt261=0;
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==COMMA) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // CSharp4Tree.g:1650:10: COMMA
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_dim_separators12294); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt261 >= 1 ) break loop261;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(261, input);
                        throw eee;
                }
                cnt261++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 277, dim_separators_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "dim_separators"


    public static class array_initializer_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "array_initializer"
    // CSharp4Tree.g:1654:1: array_initializer : ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE variable_initializer_list ( COMMA )? CLOSE_BRACE );
    public final IntegrityVariablesParserC_CSharp4Tree.array_initializer_return array_initializer() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.array_initializer_return retval = new IntegrityVariablesParserC_CSharp4Tree.array_initializer_return();
        retval.start = input.LT(1);

        int array_initializer_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }

            // CSharp4Tree.g:1655:5: ( OPEN_BRACE CLOSE_BRACE | OPEN_BRACE variable_initializer_list ( COMMA )? CLOSE_BRACE )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==OPEN_BRACE) ) {
                int LA263_1 = input.LA(2);

                if ( (LA263_1==CLOSE_BRACE) ) {
                    alt263=1;
                }
                else if ( (LA263_1==VARIABLE_INITIALIZER) ) {
                    alt263=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;

            }
            switch (alt263) {
                case 1 :
                    // CSharp4Tree.g:1655:10: OPEN_BRACE CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer12318); if (state.failed) return retval;

                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer12320); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1656:10: OPEN_BRACE variable_initializer_list ( COMMA )? CLOSE_BRACE
                    {
                    match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_array_initializer12331); if (state.failed) return retval;

                    pushFollow(FOLLOW_variable_initializer_list_in_array_initializer12333);
                    variable_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    // CSharp4Tree.g:1656:47: ( COMMA )?
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==COMMA) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            // CSharp4Tree.g:1656:47: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_array_initializer12335); if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_array_initializer12338); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 278, array_initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "array_initializer"


    public static class variable_initializer_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variable_initializer_list"
    // CSharp4Tree.g:1659:1: variable_initializer_list : variable_initializer ( COMMA variable_initializer )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variable_initializer_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.variable_initializer_list_return();
        retval.start = input.LT(1);

        int variable_initializer_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }

            // CSharp4Tree.g:1660:5: ( variable_initializer ( COMMA variable_initializer )* )
            // CSharp4Tree.g:1660:10: variable_initializer ( COMMA variable_initializer )*
            {
            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list12359);
            variable_initializer();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1660:31: ( COMMA variable_initializer )*
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);

                if ( (LA264_0==COMMA) ) {
                    int LA264_1 = input.LA(2);

                    if ( (LA264_1==VARIABLE_INITIALIZER) ) {
                        alt264=1;
                    }


                }


                switch (alt264) {
            	case 1 :
            	    // CSharp4Tree.g:1660:32: COMMA variable_initializer
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_variable_initializer_list12362); if (state.failed) return retval;

            	    pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list12365);
            	    variable_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop264;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 279, variable_initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"


    public static class interface_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_declaration"
    // CSharp4Tree.g:1664:1: interface_declaration : ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_declaration_return interface_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_declaration_return();
        retval.start = input.LT(1);

        int interface_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }

            // CSharp4Tree.g:1665:5: ( ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )? )
            // CSharp4Tree.g:1665:10: ( attributes )? ( interface_modifiers )? ( partial_contextual_keyword )? INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( SEMICOLON )?
            {
            // CSharp4Tree.g:1665:10: ( attributes )?
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==ATTRIBUTES) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    // CSharp4Tree.g:1665:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_declaration12389);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1665:22: ( interface_modifiers )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==INTERNAL||LA266_0==NEW||(LA266_0 >= PRIVATE && LA266_0 <= PUBLIC)) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // CSharp4Tree.g:1665:22: interface_modifiers
                    {
                    pushFollow(FOLLOW_interface_modifiers_in_interface_declaration12392);
                    interface_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1665:43: ( partial_contextual_keyword )?
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==IDENTIFIER) ) {
                alt267=1;
            }
            switch (alt267) {
                case 1 :
                    // CSharp4Tree.g:1665:43: partial_contextual_keyword
                    {
                    pushFollow(FOLLOW_partial_contextual_keyword_in_interface_declaration12395);
                    partial_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_declaration12407); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_declaration12409); if (state.failed) return retval;

            // CSharp4Tree.g:1666:31: ( variant_type_parameter_list )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==VARIANT_TYPE_PARAMETERS) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // CSharp4Tree.g:1666:31: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_declaration12411);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1666:60: ( interface_base )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==IMPLEMENTS) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // CSharp4Tree.g:1666:60: interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_declaration12414);
                    interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1667:10: ( type_parameter_constraints_clauses )?
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    // CSharp4Tree.g:1667:10: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration12426);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_declaration12429);
            interface_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1667:61: ( SEMICOLON )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==SEMICOLON) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    // CSharp4Tree.g:1667:61: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_declaration12431); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 280, interface_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class interface_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifiers"
    // CSharp4Tree.g:1670:1: interface_modifiers : interface_modifier ( interface_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_modifiers_return interface_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_modifiers_return();
        retval.start = input.LT(1);

        int interface_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }

            // CSharp4Tree.g:1671:5: ( interface_modifier ( interface_modifier )* )
            // CSharp4Tree.g:1671:10: interface_modifier ( interface_modifier )*
            {
            pushFollow(FOLLOW_interface_modifier_in_interface_modifiers12453);
            interface_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1671:29: ( interface_modifier )*
            loop272:
            do {
                int alt272=2;
                int LA272_0 = input.LA(1);

                if ( (LA272_0==INTERNAL||LA272_0==NEW||(LA272_0 >= PRIVATE && LA272_0 <= PUBLIC)) ) {
                    alt272=1;
                }


                switch (alt272) {
            	case 1 :
            	    // CSharp4Tree.g:1671:29: interface_modifier
            	    {
            	    pushFollow(FOLLOW_interface_modifier_in_interface_modifiers12455);
            	    interface_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop272;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 281, interface_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"


    public static class interface_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_modifier"
    // CSharp4Tree.g:1674:1: interface_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE );
    public final IntegrityVariablesParserC_CSharp4Tree.interface_modifier_return interface_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_modifier_return();
        retval.start = input.LT(1);

        int interface_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }

            // CSharp4Tree.g:1675:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==INTERNAL||input.LA(1)==NEW||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 282, interface_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_modifier"


    public static class variant_type_parameter_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameter_list"
    // CSharp4Tree.g:1683:1: variant_type_parameter_list : variant_type_parameters ;
    public final IntegrityVariablesParserC_CSharp4Tree.variant_type_parameter_list_return variant_type_parameter_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variant_type_parameter_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.variant_type_parameter_list_return();
        retval.start = input.LT(1);

        int variant_type_parameter_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }

            // CSharp4Tree.g:1684:5: ( variant_type_parameters )
            // CSharp4Tree.g:1684:10: variant_type_parameters
            {
            pushFollow(FOLLOW_variant_type_parameters_in_variant_type_parameter_list12543);
            variant_type_parameters();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 283, variant_type_parameter_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variant_type_parameter_list"


    public static class variant_type_parameters_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variant_type_parameters"
    // CSharp4Tree.g:1687:1: variant_type_parameters : ^( VARIANT_TYPE_PARAMETERS ( attributed_variance_type_parameter )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variant_type_parameters_return retval = new IntegrityVariablesParserC_CSharp4Tree.variant_type_parameters_return();
        retval.start = input.LT(1);

        int variant_type_parameters_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }

            // CSharp4Tree.g:1688:5: ( ^( VARIANT_TYPE_PARAMETERS ( attributed_variance_type_parameter )+ ) )
            // CSharp4Tree.g:1688:10: ^( VARIANT_TYPE_PARAMETERS ( attributed_variance_type_parameter )+ )
            {
            match(input,VARIANT_TYPE_PARAMETERS,FOLLOW_VARIANT_TYPE_PARAMETERS_in_variant_type_parameters12565); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1688:36: ( attributed_variance_type_parameter )+
            int cnt273=0;
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==IDENTIFIER||LA273_0==ATTRIBUTES||LA273_0==VARIANCE_ANNOTATION) ) {
                    alt273=1;
                }


                switch (alt273) {
            	case 1 :
            	    // CSharp4Tree.g:1688:36: attributed_variance_type_parameter
            	    {
            	    pushFollow(FOLLOW_attributed_variance_type_parameter_in_variant_type_parameters12567);
            	    attributed_variance_type_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt273 >= 1 ) break loop273;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(273, input);
                        throw eee;
                }
                cnt273++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 284, variant_type_parameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"


    public static class attributed_variance_type_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attributed_variance_type_parameter"
    // CSharp4Tree.g:1692:1: attributed_variance_type_parameter : ( attributes )? ( variance_annotation )? type_parameter ;
    public final IntegrityVariablesParserC_CSharp4Tree.attributed_variance_type_parameter_return attributed_variance_type_parameter() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attributed_variance_type_parameter_return retval = new IntegrityVariablesParserC_CSharp4Tree.attributed_variance_type_parameter_return();
        retval.start = input.LT(1);

        int attributed_variance_type_parameter_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }

            // CSharp4Tree.g:1693:5: ( ( attributes )? ( variance_annotation )? type_parameter )
            // CSharp4Tree.g:1693:7: ( attributes )? ( variance_annotation )? type_parameter
            {
            // CSharp4Tree.g:1693:7: ( attributes )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==ATTRIBUTES) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // CSharp4Tree.g:1693:7: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_attributed_variance_type_parameter12587);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1693:19: ( variance_annotation )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==VARIANCE_ANNOTATION) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // CSharp4Tree.g:1693:19: variance_annotation
                    {
                    pushFollow(FOLLOW_variance_annotation_in_attributed_variance_type_parameter12590);
                    variance_annotation();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_parameter_in_attributed_variance_type_parameter12593);
            type_parameter();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 285, attributed_variance_type_parameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attributed_variance_type_parameter"


    public static class variance_annotation_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "variance_annotation"
    // CSharp4Tree.g:1696:1: variance_annotation : ( ^( VARIANCE_ANNOTATION IN ) | ^( VARIANCE_ANNOTATION OUT ) );
    public final IntegrityVariablesParserC_CSharp4Tree.variance_annotation_return variance_annotation() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.variance_annotation_return retval = new IntegrityVariablesParserC_CSharp4Tree.variance_annotation_return();
        retval.start = input.LT(1);

        int variance_annotation_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }

            // CSharp4Tree.g:1697:5: ( ^( VARIANCE_ANNOTATION IN ) | ^( VARIANCE_ANNOTATION OUT ) )
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==VARIANCE_ANNOTATION) ) {
                int LA276_1 = input.LA(2);

                if ( (LA276_1==DOWN) ) {
                    int LA276_2 = input.LA(3);

                    if ( (LA276_2==IN) ) {
                        alt276=1;
                    }
                    else if ( (LA276_2==OUT) ) {
                        alt276=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 276, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                throw nvae;

            }
            switch (alt276) {
                case 1 :
                    // CSharp4Tree.g:1697:10: ^( VARIANCE_ANNOTATION IN )
                    {
                    match(input,VARIANCE_ANNOTATION,FOLLOW_VARIANCE_ANNOTATION_in_variance_annotation12615); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,IN,FOLLOW_IN_in_variance_annotation12617); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1698:10: ^( VARIANCE_ANNOTATION OUT )
                    {
                    match(input,VARIANCE_ANNOTATION,FOLLOW_VARIANCE_ANNOTATION_in_variance_annotation12630); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,OUT,FOLLOW_OUT_in_variance_annotation12632); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 286, variance_annotation_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variance_annotation"


    public static class interface_base_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_base"
    // CSharp4Tree.g:1701:1: interface_base : interface_type_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_base_return interface_base() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_base_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_base_return();
        retval.start = input.LT(1);

        int interface_base_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }

            // CSharp4Tree.g:1702:5: ( interface_type_list )
            // CSharp4Tree.g:1702:10: interface_type_list
            {
            pushFollow(FOLLOW_interface_type_list_in_interface_base12654);
            interface_type_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 287, interface_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_base"


    public static class interface_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_body"
    // CSharp4Tree.g:1705:1: interface_body : ( interface_member_declarations )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_body_return interface_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_body_return();
        retval.start = input.LT(1);

        int interface_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }

            // CSharp4Tree.g:1706:5: ( ( interface_member_declarations )? )
            // CSharp4Tree.g:1706:10: ( interface_member_declarations )?
            {
            // CSharp4Tree.g:1706:10: ( interface_member_declarations )?
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==INTERFACE_MEMBER_DECLARATIONS) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    // CSharp4Tree.g:1706:10: interface_member_declarations
                    {
                    pushFollow(FOLLOW_interface_member_declarations_in_interface_body12675);
                    interface_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 288, interface_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_body"


    public static class interface_member_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declarations"
    // CSharp4Tree.g:1709:1: interface_member_declarations : ^( INTERFACE_MEMBER_DECLARATIONS ( interface_member_declaration )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_member_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_member_declarations_return();
        retval.start = input.LT(1);

        int interface_member_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }

            // CSharp4Tree.g:1710:5: ( ^( INTERFACE_MEMBER_DECLARATIONS ( interface_member_declaration )+ ) )
            // CSharp4Tree.g:1710:10: ^( INTERFACE_MEMBER_DECLARATIONS ( interface_member_declaration )+ )
            {
            match(input,INTERFACE_MEMBER_DECLARATIONS,FOLLOW_INTERFACE_MEMBER_DECLARATIONS_in_interface_member_declarations12698); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1710:42: ( interface_member_declaration )+
            int cnt278=0;
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==EVENT||LA278_0==INDEXER_DECL||LA278_0==METHOD_DECL||LA278_0==PROPERTY_DECL) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // CSharp4Tree.g:1710:42: interface_member_declaration
            	    {
            	    pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations12700);
            	    interface_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt278 >= 1 ) break loop278;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(278, input);
                        throw eee;
                }
                cnt278++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 289, interface_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"


    public static class interface_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_member_declaration"
    // CSharp4Tree.g:1713:1: interface_member_declaration : ( ^( interface_method_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_property_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_indexer_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_method_declaration2 ( attributes )? ( NEW )? type_void ) | ^( interface_event_declaration2 ( attributes )? ( NEW )? ) );
    public final IntegrityVariablesParserC_CSharp4Tree.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_member_declaration_return();
        retval.start = input.LT(1);

        int interface_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }

            // CSharp4Tree.g:1714:5: ( ^( interface_method_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_property_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_indexer_declaration2 ( attributes )? ( NEW )? type ) | ^( interface_method_declaration2 ( attributes )? ( NEW )? type_void ) | ^( interface_event_declaration2 ( attributes )? ( NEW )? ) )
            int alt289=5;
            switch ( input.LA(1) ) {
            case METHOD_DECL:
                {
                int LA289_1 = input.LA(2);

                if ( (synpred599_CSharp4Tree()) ) {
                    alt289=1;
                }
                else if ( (synpred608_CSharp4Tree()) ) {
                    alt289=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 1, input);

                    throw nvae;

                }
                }
                break;
            case PROPERTY_DECL:
                {
                alt289=2;
                }
                break;
            case INDEXER_DECL:
                {
                alt289=3;
                }
                break;
            case EVENT:
                {
                alt289=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;

            }

            switch (alt289) {
                case 1 :
                    // CSharp4Tree.g:1714:10: ^( interface_method_declaration2 ( attributes )? ( NEW )? type )
                    {
                    pushFollow(FOLLOW_interface_method_declaration2_in_interface_member_declaration12724);
                    interface_method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // CSharp4Tree.g:1714:42: ( attributes )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==ATTRIBUTES) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // CSharp4Tree.g:1714:42: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_member_declaration12726);
                            attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1714:54: ( NEW )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==NEW) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // CSharp4Tree.g:1714:54: NEW
                            {
                            match(input,NEW,FOLLOW_NEW_in_interface_member_declaration12729); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_interface_member_declaration12732);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1715:10: ^( interface_property_declaration2 ( attributes )? ( NEW )? type )
                    {
                    pushFollow(FOLLOW_interface_property_declaration2_in_interface_member_declaration12745);
                    interface_property_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // CSharp4Tree.g:1715:44: ( attributes )?
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==ATTRIBUTES) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            // CSharp4Tree.g:1715:44: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_member_declaration12747);
                            attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1715:56: ( NEW )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==NEW) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // CSharp4Tree.g:1715:56: NEW
                            {
                            match(input,NEW,FOLLOW_NEW_in_interface_member_declaration12750); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_interface_member_declaration12753);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1716:10: ^( interface_indexer_declaration2 ( attributes )? ( NEW )? type )
                    {
                    pushFollow(FOLLOW_interface_indexer_declaration2_in_interface_member_declaration12766);
                    interface_indexer_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // CSharp4Tree.g:1716:43: ( attributes )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==ATTRIBUTES) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // CSharp4Tree.g:1716:43: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_member_declaration12768);
                            attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1716:55: ( NEW )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==NEW) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // CSharp4Tree.g:1716:55: NEW
                            {
                            match(input,NEW,FOLLOW_NEW_in_interface_member_declaration12771); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_in_interface_member_declaration12774);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1717:10: ^( interface_method_declaration2 ( attributes )? ( NEW )? type_void )
                    {
                    pushFollow(FOLLOW_interface_method_declaration2_in_interface_member_declaration12787);
                    interface_method_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // CSharp4Tree.g:1717:42: ( attributes )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==ATTRIBUTES) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // CSharp4Tree.g:1717:42: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_member_declaration12789);
                            attributes();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    // CSharp4Tree.g:1717:54: ( NEW )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==NEW) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // CSharp4Tree.g:1717:54: NEW
                            {
                            match(input,NEW,FOLLOW_NEW_in_interface_member_declaration12792); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_void_in_interface_member_declaration12795);
                    type_void();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1718:10: ^( interface_event_declaration2 ( attributes )? ( NEW )? )
                    {
                    pushFollow(FOLLOW_interface_event_declaration2_in_interface_member_declaration12808);
                    interface_event_declaration2();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // CSharp4Tree.g:1718:41: ( attributes )?
                        int alt287=2;
                        int LA287_0 = input.LA(1);

                        if ( (LA287_0==ATTRIBUTES) ) {
                            alt287=1;
                        }
                        switch (alt287) {
                            case 1 :
                                // CSharp4Tree.g:1718:41: attributes
                                {
                                pushFollow(FOLLOW_attributes_in_interface_member_declaration12810);
                                attributes();

                                state._fsp--;
                                if (state.failed) return retval;

                                }
                                break;

                        }


                        // CSharp4Tree.g:1718:53: ( NEW )?
                        int alt288=2;
                        int LA288_0 = input.LA(1);

                        if ( (LA288_0==NEW) ) {
                            alt288=1;
                        }
                        switch (alt288) {
                            case 1 :
                                // CSharp4Tree.g:1718:53: NEW
                                {
                                match(input,NEW,FOLLOW_NEW_in_interface_member_declaration12813); if (state.failed) return retval;

                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 290, interface_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"


    public static class interface_method_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration"
    // CSharp4Tree.g:1721:1: interface_method_declaration : ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration_return();
        retval.start = input.LT(1);

        int interface_method_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }

            // CSharp4Tree.g:1722:5: ( ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharp4Tree.g:1722:10: ( attributes )? ( NEW )? return_type IDENTIFIER ( type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharp4Tree.g:1722:10: ( attributes )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==ATTRIBUTES) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // CSharp4Tree.g:1722:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_method_declaration12836);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1722:22: ( NEW )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==NEW) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // CSharp4Tree.g:1722:22: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_method_declaration12839); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_return_type_in_interface_method_declaration12842);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_method_declaration12844); if (state.failed) return retval;

            // CSharp4Tree.g:1722:50: ( type_parameter_list )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==TYPE_PARAMETERS) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // CSharp4Tree.g:1722:50: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration12846);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_interface_method_declaration12858); if (state.failed) return retval;

            // CSharp4Tree.g:1723:22: ( formal_parameter_list )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==FORMAL_PARAMETER_LIST) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // CSharp4Tree.g:1723:22: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration12860);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_interface_method_declaration12863); if (state.failed) return retval;

            // CSharp4Tree.g:1724:10: ( type_parameter_constraints_clauses )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // CSharp4Tree.g:1724:10: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration12874);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_method_declaration12877); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 291, interface_method_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"


    public static class interface_property_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration"
    // CSharp4Tree.g:1727:1: interface_property_declaration : ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration_return();
        retval.start = input.LT(1);

        int interface_property_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }

            // CSharp4Tree.g:1728:5: ( ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharp4Tree.g:1728:10: ( attributes )? ( NEW )? type IDENTIFIER OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            // CSharp4Tree.g:1728:10: ( attributes )?
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==ATTRIBUTES) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    // CSharp4Tree.g:1728:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_property_declaration12898);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1728:22: ( NEW )?
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==NEW) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    // CSharp4Tree.g:1728:22: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_property_declaration12901); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_property_declaration12904);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_property_declaration12906); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_property_declaration12908); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration12910);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_property_declaration12912); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 292, interface_property_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"


    public static class interface_accessors_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_accessors"
    // CSharp4Tree.g:1731:1: interface_accessors : ( attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_accessors_return interface_accessors() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_accessors_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_accessors_return();
        retval.start = input.LT(1);

        int interface_accessors_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }

            // CSharp4Tree.g:1732:5: ( ( attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? ) )
            // CSharp4Tree.g:1732:10: ( attributes )? ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? )
            {
            // CSharp4Tree.g:1732:10: ( attributes )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==ATTRIBUTES) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // CSharp4Tree.g:1732:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_accessors12933);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1733:10: ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? | set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )? )
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==IDENTIFIER) ) {
                int LA302_1 = input.LA(2);

                if ( (LA302_1==SEMICOLON) ) {
                    int LA302_2 = input.LA(3);

                    if ( (synpred621_CSharp4Tree()) ) {
                        alt302=1;
                    }
                    else if ( (true) ) {
                        alt302=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 302, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 302, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);

                throw nvae;

            }
            switch (alt302) {
                case 1 :
                    // CSharp4Tree.g:1733:12: get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors12947);
                    get_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors12949); if (state.failed) return retval;

                    // CSharp4Tree.g:1733:45: ( ( attributes )? set_contextual_keyword SEMICOLON )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==IDENTIFIER||LA299_0==ATTRIBUTES) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // CSharp4Tree.g:1733:46: ( attributes )? set_contextual_keyword SEMICOLON
                            {
                            // CSharp4Tree.g:1733:46: ( attributes )?
                            int alt298=2;
                            int LA298_0 = input.LA(1);

                            if ( (LA298_0==ATTRIBUTES) ) {
                                alt298=1;
                            }
                            switch (alt298) {
                                case 1 :
                                    // CSharp4Tree.g:1733:46: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors12952);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors12955);
                            set_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors12957); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1734:12: set_contextual_keyword SEMICOLON ( ( attributes )? get_contextual_keyword SEMICOLON )?
                    {
                    pushFollow(FOLLOW_set_contextual_keyword_in_interface_accessors12972);
                    set_contextual_keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors12974); if (state.failed) return retval;

                    // CSharp4Tree.g:1734:45: ( ( attributes )? get_contextual_keyword SEMICOLON )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==IDENTIFIER||LA301_0==ATTRIBUTES) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // CSharp4Tree.g:1734:46: ( attributes )? get_contextual_keyword SEMICOLON
                            {
                            // CSharp4Tree.g:1734:46: ( attributes )?
                            int alt300=2;
                            int LA300_0 = input.LA(1);

                            if ( (LA300_0==ATTRIBUTES) ) {
                                alt300=1;
                            }
                            switch (alt300) {
                                case 1 :
                                    // CSharp4Tree.g:1734:46: attributes
                                    {
                                    pushFollow(FOLLOW_attributes_in_interface_accessors12977);
                                    attributes();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_get_contextual_keyword_in_interface_accessors12980);
                            get_contextual_keyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_accessors12982); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 293, interface_accessors_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_accessors"


    public static class interface_event_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration"
    // CSharp4Tree.g:1737:1: interface_event_declaration : ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration_return();
        retval.start = input.LT(1);

        int interface_event_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }

            // CSharp4Tree.g:1738:5: ( ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON )
            // CSharp4Tree.g:1738:10: ( attributes )? ( NEW )? EVENT type IDENTIFIER SEMICOLON
            {
            // CSharp4Tree.g:1738:10: ( attributes )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==ATTRIBUTES) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // CSharp4Tree.g:1738:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_event_declaration13007);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1738:22: ( NEW )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==NEW) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // CSharp4Tree.g:1738:22: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_event_declaration13010); if (state.failed) return retval;

                    }
                    break;

            }


            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration13013); if (state.failed) return retval;

            pushFollow(FOLLOW_type_in_interface_event_declaration13015);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration13017); if (state.failed) return retval;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_event_declaration13019); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 294, interface_event_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"


    public static class interface_indexer_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration"
    // CSharp4Tree.g:1741:1: interface_indexer_declaration : ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration_return();
        retval.start = input.LT(1);

        int interface_indexer_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }

            // CSharp4Tree.g:1742:5: ( ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE )
            // CSharp4Tree.g:1742:10: ( attributes )? ( NEW )? type THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET OPEN_BRACE interface_accessors CLOSE_BRACE
            {
            // CSharp4Tree.g:1742:10: ( attributes )?
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==ATTRIBUTES) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    // CSharp4Tree.g:1742:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_indexer_declaration13040);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1742:22: ( NEW )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==NEW) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // CSharp4Tree.g:1742:22: NEW
                    {
                    match(input,NEW,FOLLOW_NEW_in_interface_indexer_declaration13043); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_type_in_interface_indexer_declaration13046);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,THIS,FOLLOW_THIS_in_interface_indexer_declaration13048); if (state.failed) return retval;

            match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration13050); if (state.failed) return retval;

            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration13052);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration13063); if (state.failed) return retval;

            match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_interface_indexer_declaration13065); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration13067);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration13069); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 295, interface_indexer_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"


    public static class enum_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_declaration"
    // CSharp4Tree.g:1747:1: enum_declaration : ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_declaration_return enum_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_declaration_return();
        retval.start = input.LT(1);

        int enum_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }

            // CSharp4Tree.g:1748:5: ( ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )? )
            // CSharp4Tree.g:1748:10: ( attributes )? ( enum_modifiers )? ENUM IDENTIFIER ( enum_base )? enum_body ( SEMICOLON )?
            {
            // CSharp4Tree.g:1748:10: ( attributes )?
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==ATTRIBUTES) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    // CSharp4Tree.g:1748:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_declaration13091);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1748:22: ( enum_modifiers )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==INTERNAL||LA308_0==NEW||(LA308_0 >= PRIVATE && LA308_0 <= PUBLIC)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // CSharp4Tree.g:1748:22: enum_modifiers
                    {
                    pushFollow(FOLLOW_enum_modifiers_in_enum_declaration13094);
                    enum_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,ENUM,FOLLOW_ENUM_in_enum_declaration13097); if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_declaration13099); if (state.failed) return retval;

            // CSharp4Tree.g:1748:54: ( enum_base )?
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==ENUM_EXTENDS) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    // CSharp4Tree.g:1748:54: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_declaration13101);
                    enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_declaration13104);
            enum_body();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1748:75: ( SEMICOLON )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==SEMICOLON) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // CSharp4Tree.g:1748:75: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_declaration13106); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 296, enum_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class enum_base_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_base"
    // CSharp4Tree.g:1751:1: enum_base : ^( ENUM_EXTENDS integral_type ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_base_return enum_base() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_base_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_base_return();
        retval.start = input.LT(1);

        int enum_base_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }

            // CSharp4Tree.g:1752:5: ( ^( ENUM_EXTENDS integral_type ) )
            // CSharp4Tree.g:1752:10: ^( ENUM_EXTENDS integral_type )
            {
            match(input,ENUM_EXTENDS,FOLLOW_ENUM_EXTENDS_in_enum_base13129); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_integral_type_in_enum_base13131);
            integral_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 297, enum_base_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_base"


    public static class enum_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_body"
    // CSharp4Tree.g:1755:1: enum_body : enum_member_declarations ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_body_return enum_body() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_body_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_body_return();
        retval.start = input.LT(1);

        int enum_body_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }

            // CSharp4Tree.g:1756:5: ( enum_member_declarations )
            // CSharp4Tree.g:1756:10: enum_member_declarations
            {
            pushFollow(FOLLOW_enum_member_declarations_in_enum_body13153);
            enum_member_declarations();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 298, enum_body_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_body"


    public static class enum_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifiers"
    // CSharp4Tree.g:1759:1: enum_modifiers : ( enum_modifier )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_modifiers_return enum_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_modifiers_return();
        retval.start = input.LT(1);

        int enum_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }

            // CSharp4Tree.g:1760:5: ( ( enum_modifier )+ )
            // CSharp4Tree.g:1760:10: ( enum_modifier )+
            {
            // CSharp4Tree.g:1760:10: ( enum_modifier )+
            int cnt311=0;
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==INTERNAL||LA311_0==NEW||(LA311_0 >= PRIVATE && LA311_0 <= PUBLIC)) ) {
                    alt311=1;
                }


                switch (alt311) {
            	case 1 :
            	    // CSharp4Tree.g:1760:10: enum_modifier
            	    {
            	    pushFollow(FOLLOW_enum_modifier_in_enum_modifiers13174);
            	    enum_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt311 >= 1 ) break loop311;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(311, input);
                        throw eee;
                }
                cnt311++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 299, enum_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_modifiers"


    public static class enum_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_modifier"
    // CSharp4Tree.g:1763:1: enum_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE );
    public final IntegrityVariablesParserC_CSharp4Tree.enum_modifier_return enum_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_modifier_return();
        retval.start = input.LT(1);

        int enum_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }

            // CSharp4Tree.g:1764:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==INTERNAL||input.LA(1)==NEW||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 300, enum_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_modifier"


    public static class enum_member_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declarations"
    // CSharp4Tree.g:1771:1: enum_member_declarations : ^( ENUM_MEMBER_DECLARATIONS ( enum_member_declaration )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_member_declarations_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_member_declarations_return();
        retval.start = input.LT(1);

        int enum_member_declarations_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }

            // CSharp4Tree.g:1772:5: ( ^( ENUM_MEMBER_DECLARATIONS ( enum_member_declaration )+ ) )
            // CSharp4Tree.g:1772:10: ^( ENUM_MEMBER_DECLARATIONS ( enum_member_declaration )+ )
            {
            match(input,ENUM_MEMBER_DECLARATIONS,FOLLOW_ENUM_MEMBER_DECLARATIONS_in_enum_member_declarations13262); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1772:37: ( enum_member_declaration )+
            int cnt312=0;
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);

                if ( (LA312_0==ENUM_MEMBER_DECLARATION) ) {
                    alt312=1;
                }


                switch (alt312) {
            	case 1 :
            	    // CSharp4Tree.g:1772:37: enum_member_declaration
            	    {
            	    pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations13264);
            	    enum_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt312 >= 1 ) break loop312;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(312, input);
                        throw eee;
                }
                cnt312++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 301, enum_member_declarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"


    public static class enum_member_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_member_declaration"
    // CSharp4Tree.g:1775:1: enum_member_declaration : ^( ENUM_MEMBER_DECLARATION ( attributes )? IDENTIFIER ( ^( ENUM_MEMBER_INITIALIZER constant_expression ) )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_member_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_member_declaration_return();
        retval.start = input.LT(1);

        int enum_member_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }

            // CSharp4Tree.g:1776:5: ( ^( ENUM_MEMBER_DECLARATION ( attributes )? IDENTIFIER ( ^( ENUM_MEMBER_INITIALIZER constant_expression ) )? ) )
            // CSharp4Tree.g:1776:10: ^( ENUM_MEMBER_DECLARATION ( attributes )? IDENTIFIER ( ^( ENUM_MEMBER_INITIALIZER constant_expression ) )? )
            {
            match(input,ENUM_MEMBER_DECLARATION,FOLLOW_ENUM_MEMBER_DECLARATION_in_enum_member_declaration13288); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1776:36: ( attributes )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==ATTRIBUTES) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // CSharp4Tree.g:1776:36: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_member_declaration13290);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_member_declaration13293); if (state.failed) return retval;

            // CSharp4Tree.g:1777:14: ( ^( ENUM_MEMBER_INITIALIZER constant_expression ) )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==ENUM_MEMBER_INITIALIZER) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // CSharp4Tree.g:1777:16: ^( ENUM_MEMBER_INITIALIZER constant_expression )
                    {
                    match(input,ENUM_MEMBER_INITIALIZER,FOLLOW_ENUM_MEMBER_INITIALIZER_in_enum_member_declaration13311); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_constant_expression_in_enum_member_declaration13313);
                    constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 302, enum_member_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"


    public static class delegate_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_declaration"
    // CSharp4Tree.g:1783:1: delegate_declaration : ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON ;
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_declaration_return delegate_declaration() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_declaration_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_declaration_return();
        retval.start = input.LT(1);

        int delegate_declaration_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }

            // CSharp4Tree.g:1784:5: ( ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON )
            // CSharp4Tree.g:1784:10: ( attributes )? ( delegate_modifiers )? DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? SEMICOLON
            {
            // CSharp4Tree.g:1784:10: ( attributes )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==ATTRIBUTES) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // CSharp4Tree.g:1784:10: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_delegate_declaration13353);
                    attributes();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:1784:22: ( delegate_modifiers )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==INTERNAL||LA316_0==NEW||(LA316_0 >= PRIVATE && LA316_0 <= PUBLIC)) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // CSharp4Tree.g:1784:22: delegate_modifiers
                    {
                    pushFollow(FOLLOW_delegate_modifiers_in_delegate_declaration13356);
                    delegate_modifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_declaration13359); if (state.failed) return retval;

            pushFollow(FOLLOW_return_type_in_delegate_declaration13361);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_declaration13363); if (state.failed) return retval;

            // CSharp4Tree.g:1785:10: ( variant_type_parameter_list )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==VARIANT_TYPE_PARAMETERS) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // CSharp4Tree.g:1785:10: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_declaration13374);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_declaration13377); if (state.failed) return retval;

            // CSharp4Tree.g:1785:51: ( formal_parameter_list )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==FORMAL_PARAMETER_LIST) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // CSharp4Tree.g:1785:51: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration13379);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_declaration13391); if (state.failed) return retval;

            // CSharp4Tree.g:1786:23: ( type_parameter_constraints_clauses )?
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    // CSharp4Tree.g:1786:23: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration13393);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_delegate_declaration13396); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 303, delegate_declaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"


    public static class delegate_modifiers_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifiers"
    // CSharp4Tree.g:1789:1: delegate_modifiers : delegate_modifier ( delegate_modifier )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_modifiers_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_modifiers_return();
        retval.start = input.LT(1);

        int delegate_modifiers_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }

            // CSharp4Tree.g:1790:5: ( delegate_modifier ( delegate_modifier )* )
            // CSharp4Tree.g:1790:10: delegate_modifier ( delegate_modifier )*
            {
            pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers13417);
            delegate_modifier();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1790:28: ( delegate_modifier )*
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);

                if ( (LA320_0==INTERNAL||LA320_0==NEW||(LA320_0 >= PRIVATE && LA320_0 <= PUBLIC)) ) {
                    alt320=1;
                }


                switch (alt320) {
            	case 1 :
            	    // CSharp4Tree.g:1790:28: delegate_modifier
            	    {
            	    pushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers13419);
            	    delegate_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop320;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 304, delegate_modifiers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"


    public static class delegate_modifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_modifier"
    // CSharp4Tree.g:1793:1: delegate_modifier : ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE );
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_modifier_return delegate_modifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_modifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_modifier_return();
        retval.start = input.LT(1);

        int delegate_modifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }

            // CSharp4Tree.g:1794:5: ( NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==INTERNAL||input.LA(1)==NEW||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 305, delegate_modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_modifier"


    public static class global_attribute_sections_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_sections"
    // CSharp4Tree.g:1803:1: global_attribute_sections : ( global_attribute_section )+ ;
    public final IntegrityVariablesParserC_CSharp4Tree.global_attribute_sections_return global_attribute_sections() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.global_attribute_sections_return retval = new IntegrityVariablesParserC_CSharp4Tree.global_attribute_sections_return();
        retval.start = input.LT(1);

        int global_attribute_sections_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }

            // CSharp4Tree.g:1804:5: ( ( global_attribute_section )+ )
            // CSharp4Tree.g:1804:10: ( global_attribute_section )+
            {
            // CSharp4Tree.g:1804:10: ( global_attribute_section )+
            int cnt321=0;
            loop321:
            do {
                int alt321=2;
                int LA321_0 = input.LA(1);

                if ( (LA321_0==ABSTRACT||LA321_0==AS||LA321_0==BASE||(LA321_0 >= BOOL && LA321_0 <= BYTE)||(LA321_0 >= CASE && LA321_0 <= CHAR)||(LA321_0 >= CHECKED && LA321_0 <= CLASS)||(LA321_0 >= CONST && LA321_0 <= CONTINUE)||LA321_0==DECIMAL||(LA321_0 >= DEFAULT && LA321_0 <= DELEGATE)||LA321_0==DO||LA321_0==DOUBLE||(LA321_0 >= ELSE && LA321_0 <= EXTERN)||(LA321_0 >= FALSE && LA321_0 <= FINALLY)||(LA321_0 >= FLOAT && LA321_0 <= FOREACH)||LA321_0==GOTO||(LA321_0 >= IDENTIFIER && LA321_0 <= INT)||(LA321_0 >= INTERFACE && LA321_0 <= INTERNAL)||LA321_0==IS||(LA321_0 >= LOCK && LA321_0 <= LONG)||(LA321_0 >= NAMESPACE && LA321_0 <= NEW)||LA321_0==NULL||LA321_0==OBJECT||LA321_0==OPERATOR||(LA321_0 >= OUT && LA321_0 <= PARAMS)||(LA321_0 >= PRIVATE && LA321_0 <= PUBLIC)||LA321_0==READONLY||(LA321_0 >= REF && LA321_0 <= RETURN)||(LA321_0 >= SBYTE && LA321_0 <= SEALED)||LA321_0==SHORT||(LA321_0 >= SIZEOF && LA321_0 <= STACKALLOC)||(LA321_0 >= STATIC && LA321_0 <= STRING)||(LA321_0 >= STRUCT && LA321_0 <= SWITCH)||(LA321_0 >= THIS && LA321_0 <= THROW)||(LA321_0 >= TRUE && LA321_0 <= TYPEOF)||(LA321_0 >= UINT && LA321_0 <= UNCHECKED)||(LA321_0 >= UNSAFE && LA321_0 <= USING)||(LA321_0 >= VIRTUAL && LA321_0 <= VOLATILE)||LA321_0==WHILE) ) {
                    alt321=1;
                }


                switch (alt321) {
            	case 1 :
            	    // CSharp4Tree.g:1804:10: global_attribute_section
            	    {
            	    pushFollow(FOLLOW_global_attribute_section_in_global_attribute_sections13509);
            	    global_attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt321 >= 1 ) break loop321;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(321, input);
                        throw eee;
                }
                cnt321++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 306, global_attribute_sections_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_sections"


    public static class global_attribute_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_section"
    // CSharp4Tree.g:1807:1: global_attribute_section : global_attribute_target_specifier attribute_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.global_attribute_section_return global_attribute_section() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.global_attribute_section_return retval = new IntegrityVariablesParserC_CSharp4Tree.global_attribute_section_return();
        retval.start = input.LT(1);

        int global_attribute_section_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }

            // CSharp4Tree.g:1808:5: ( global_attribute_target_specifier attribute_list )
            // CSharp4Tree.g:1808:10: global_attribute_target_specifier attribute_list
            {
            pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute_section13531);
            global_attribute_target_specifier();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_list_in_global_attribute_section13533);
            attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 307, global_attribute_section_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_section"


    public static class global_attribute_target_specifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target_specifier"
    // CSharp4Tree.g:1811:1: global_attribute_target_specifier : global_attribute_target ;
    public final IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_specifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_specifier_return();
        retval.start = input.LT(1);

        int global_attribute_target_specifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }

            // CSharp4Tree.g:1812:5: ( global_attribute_target )
            // CSharp4Tree.g:1812:10: global_attribute_target
            {
            pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier13554);
            global_attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 308, global_attribute_target_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"


    public static class global_attribute_target_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "global_attribute_target"
    // CSharp4Tree.g:1815:1: global_attribute_target : ( keyword | IDENTIFIER );
    public final IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_return global_attribute_target() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_return retval = new IntegrityVariablesParserC_CSharp4Tree.global_attribute_target_return();
        retval.start = input.LT(1);

        int global_attribute_target_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }

            // CSharp4Tree.g:1816:5: ( keyword | IDENTIFIER )
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==ABSTRACT||LA322_0==AS||LA322_0==BASE||(LA322_0 >= BOOL && LA322_0 <= BYTE)||(LA322_0 >= CASE && LA322_0 <= CHAR)||(LA322_0 >= CHECKED && LA322_0 <= CLASS)||(LA322_0 >= CONST && LA322_0 <= CONTINUE)||LA322_0==DECIMAL||(LA322_0 >= DEFAULT && LA322_0 <= DELEGATE)||LA322_0==DO||LA322_0==DOUBLE||(LA322_0 >= ELSE && LA322_0 <= EXTERN)||(LA322_0 >= FALSE && LA322_0 <= FINALLY)||(LA322_0 >= FLOAT && LA322_0 <= FOREACH)||LA322_0==GOTO||(LA322_0 >= IF && LA322_0 <= INT)||(LA322_0 >= INTERFACE && LA322_0 <= INTERNAL)||LA322_0==IS||(LA322_0 >= LOCK && LA322_0 <= LONG)||(LA322_0 >= NAMESPACE && LA322_0 <= NEW)||LA322_0==NULL||LA322_0==OBJECT||LA322_0==OPERATOR||(LA322_0 >= OUT && LA322_0 <= PARAMS)||(LA322_0 >= PRIVATE && LA322_0 <= PUBLIC)||LA322_0==READONLY||(LA322_0 >= REF && LA322_0 <= RETURN)||(LA322_0 >= SBYTE && LA322_0 <= SEALED)||LA322_0==SHORT||(LA322_0 >= SIZEOF && LA322_0 <= STACKALLOC)||(LA322_0 >= STATIC && LA322_0 <= STRING)||(LA322_0 >= STRUCT && LA322_0 <= SWITCH)||(LA322_0 >= THIS && LA322_0 <= THROW)||(LA322_0 >= TRUE && LA322_0 <= TYPEOF)||(LA322_0 >= UINT && LA322_0 <= UNCHECKED)||(LA322_0 >= UNSAFE && LA322_0 <= USING)||(LA322_0 >= VIRTUAL && LA322_0 <= VOLATILE)||LA322_0==WHILE) ) {
                alt322=1;
            }
            else if ( (LA322_0==IDENTIFIER) ) {
                alt322=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);

                throw nvae;

            }
            switch (alt322) {
                case 1 :
                    // CSharp4Tree.g:1816:10: keyword
                    {
                    pushFollow(FOLLOW_keyword_in_global_attribute_target13575);
                    keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1817:10: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_global_attribute_target13586); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 309, global_attribute_target_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"


    public static class attributes_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attributes"
    // CSharp4Tree.g:1820:1: attributes : attribute_sections ;
    public final IntegrityVariablesParserC_CSharp4Tree.attributes_return attributes() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attributes_return retval = new IntegrityVariablesParserC_CSharp4Tree.attributes_return();
        retval.start = input.LT(1);

        int attributes_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }

            // CSharp4Tree.g:1821:5: ( attribute_sections )
            // CSharp4Tree.g:1821:10: attribute_sections
            {
            pushFollow(FOLLOW_attribute_sections_in_attributes13607);
            attribute_sections();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 310, attributes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attributes"


    public static class attribute_sections_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_sections"
    // CSharp4Tree.g:1824:1: attribute_sections : ^( ATTRIBUTES ( attribute_section )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_sections_return attribute_sections() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_sections_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_sections_return();
        retval.start = input.LT(1);

        int attribute_sections_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }

            // CSharp4Tree.g:1825:5: ( ^( ATTRIBUTES ( attribute_section )+ ) )
            // CSharp4Tree.g:1825:10: ^( ATTRIBUTES ( attribute_section )+ )
            {
            match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_attribute_sections13629); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1825:23: ( attribute_section )+
            int cnt323=0;
            loop323:
            do {
                int alt323=2;
                int LA323_0 = input.LA(1);

                if ( (LA323_0==ATTRIBUTE_LIST||LA323_0==ATTRIBUTE_TARGET) ) {
                    alt323=1;
                }


                switch (alt323) {
            	case 1 :
            	    // CSharp4Tree.g:1825:23: attribute_section
            	    {
            	    pushFollow(FOLLOW_attribute_section_in_attribute_sections13631);
            	    attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt323 >= 1 ) break loop323;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(323, input);
                        throw eee;
                }
                cnt323++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 311, attribute_sections_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_sections"


    public static class attribute_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_section"
    // CSharp4Tree.g:1828:1: attribute_section : ( attribute_target_specifier )? attribute_list ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_section_return attribute_section() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_section_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_section_return();
        retval.start = input.LT(1);

        int attribute_section_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }

            // CSharp4Tree.g:1829:5: ( ( attribute_target_specifier )? attribute_list )
            // CSharp4Tree.g:1829:10: ( attribute_target_specifier )? attribute_list
            {
            // CSharp4Tree.g:1829:10: ( attribute_target_specifier )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==ATTRIBUTE_TARGET) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // CSharp4Tree.g:1829:10: attribute_target_specifier
                    {
                    pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section13654);
                    attribute_target_specifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_attribute_list_in_attribute_section13657);
            attribute_list();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 312, attribute_section_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_section"


    public static class attribute_target_specifier_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target_specifier"
    // CSharp4Tree.g:1832:1: attribute_target_specifier : ^( ATTRIBUTE_TARGET attribute_target ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_target_specifier_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_target_specifier_return();
        retval.start = input.LT(1);

        int attribute_target_specifier_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }

            // CSharp4Tree.g:1833:5: ( ^( ATTRIBUTE_TARGET attribute_target ) )
            // CSharp4Tree.g:1833:10: ^( ATTRIBUTE_TARGET attribute_target )
            {
            match(input,ATTRIBUTE_TARGET,FOLLOW_ATTRIBUTE_TARGET_in_attribute_target_specifier13679); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier13681);
            attribute_target();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 313, attribute_target_specifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"


    public static class attribute_target_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_target"
    // CSharp4Tree.g:1836:1: attribute_target : ( keyword | IDENTIFIER );
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_target_return attribute_target() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_target_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_target_return();
        retval.start = input.LT(1);

        int attribute_target_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }

            // CSharp4Tree.g:1837:5: ( keyword | IDENTIFIER )
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==ABSTRACT||LA325_0==AS||LA325_0==BASE||(LA325_0 >= BOOL && LA325_0 <= BYTE)||(LA325_0 >= CASE && LA325_0 <= CHAR)||(LA325_0 >= CHECKED && LA325_0 <= CLASS)||(LA325_0 >= CONST && LA325_0 <= CONTINUE)||LA325_0==DECIMAL||(LA325_0 >= DEFAULT && LA325_0 <= DELEGATE)||LA325_0==DO||LA325_0==DOUBLE||(LA325_0 >= ELSE && LA325_0 <= EXTERN)||(LA325_0 >= FALSE && LA325_0 <= FINALLY)||(LA325_0 >= FLOAT && LA325_0 <= FOREACH)||LA325_0==GOTO||(LA325_0 >= IF && LA325_0 <= INT)||(LA325_0 >= INTERFACE && LA325_0 <= INTERNAL)||LA325_0==IS||(LA325_0 >= LOCK && LA325_0 <= LONG)||(LA325_0 >= NAMESPACE && LA325_0 <= NEW)||LA325_0==NULL||LA325_0==OBJECT||LA325_0==OPERATOR||(LA325_0 >= OUT && LA325_0 <= PARAMS)||(LA325_0 >= PRIVATE && LA325_0 <= PUBLIC)||LA325_0==READONLY||(LA325_0 >= REF && LA325_0 <= RETURN)||(LA325_0 >= SBYTE && LA325_0 <= SEALED)||LA325_0==SHORT||(LA325_0 >= SIZEOF && LA325_0 <= STACKALLOC)||(LA325_0 >= STATIC && LA325_0 <= STRING)||(LA325_0 >= STRUCT && LA325_0 <= SWITCH)||(LA325_0 >= THIS && LA325_0 <= THROW)||(LA325_0 >= TRUE && LA325_0 <= TYPEOF)||(LA325_0 >= UINT && LA325_0 <= UNCHECKED)||(LA325_0 >= UNSAFE && LA325_0 <= USING)||(LA325_0 >= VIRTUAL && LA325_0 <= VOLATILE)||LA325_0==WHILE) ) {
                alt325=1;
            }
            else if ( (LA325_0==IDENTIFIER) ) {
                alt325=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);

                throw nvae;

            }
            switch (alt325) {
                case 1 :
                    // CSharp4Tree.g:1837:10: keyword
                    {
                    pushFollow(FOLLOW_keyword_in_attribute_target13703);
                    keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1838:10: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_attribute_target13714); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 314, attribute_target_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_target"


    public static class attribute_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_list"
    // CSharp4Tree.g:1841:1: attribute_list : ^( ATTRIBUTE_LIST ( attribute )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_list_return attribute_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_list_return();
        retval.start = input.LT(1);

        int attribute_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }

            // CSharp4Tree.g:1842:5: ( ^( ATTRIBUTE_LIST ( attribute )+ ) )
            // CSharp4Tree.g:1842:10: ^( ATTRIBUTE_LIST ( attribute )+ )
            {
            match(input,ATTRIBUTE_LIST,FOLLOW_ATTRIBUTE_LIST_in_attribute_list13736); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1842:28: ( attribute )+
            int cnt326=0;
            loop326:
            do {
                int alt326=2;
                int LA326_0 = input.LA(1);

                if ( (LA326_0==ATTRIBUTE) ) {
                    alt326=1;
                }


                switch (alt326) {
            	case 1 :
            	    // CSharp4Tree.g:1842:28: attribute
            	    {
            	    pushFollow(FOLLOW_attribute_in_attribute_list13739);
            	    attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt326 >= 1 ) break loop326;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(326, input);
                        throw eee;
                }
                cnt326++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 315, attribute_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_list"


    public static class attribute_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute"
    // CSharp4Tree.g:1845:1: attribute : ^( ATTRIBUTE attribute_name ( attribute_arguments )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_return attribute() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_return();
        retval.start = input.LT(1);

        int attribute_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }

            // CSharp4Tree.g:1846:5: ( ^( ATTRIBUTE attribute_name ( attribute_arguments )? ) )
            // CSharp4Tree.g:1846:10: ^( ATTRIBUTE attribute_name ( attribute_arguments )? )
            {
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute13763); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_attribute_name_in_attribute13765);
            attribute_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1846:37: ( attribute_arguments )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==POSITIONAL_ARGUMENT_LIST) ) {
                alt327=1;
            }
            else if ( (LA327_0==UP) ) {
                int LA327_2 = input.LA(2);

                if ( (synpred656_CSharp4Tree()) ) {
                    alt327=1;
                }
            }
            switch (alt327) {
                case 1 :
                    // CSharp4Tree.g:1846:37: attribute_arguments
                    {
                    pushFollow(FOLLOW_attribute_arguments_in_attribute13767);
                    attribute_arguments();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 316, attribute_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class attribute_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_name"
    // CSharp4Tree.g:1849:1: attribute_name : ^( ATTRIBUTE_NAME type_name ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_name_return attribute_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_name_return();
        retval.start = input.LT(1);

        int attribute_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }

            // CSharp4Tree.g:1850:5: ( ^( ATTRIBUTE_NAME type_name ) )
            // CSharp4Tree.g:1850:10: ^( ATTRIBUTE_NAME type_name )
            {
            match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name13791); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_name_in_attribute_name13793);
            type_name();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 317, attribute_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_name"


    public static class attribute_arguments_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_arguments"
    // CSharp4Tree.g:1854:1: attribute_arguments : ( positional_argument_list )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_arguments_return attribute_arguments() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_arguments_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_arguments_return();
        retval.start = input.LT(1);

        int attribute_arguments_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }

            // CSharp4Tree.g:1855:5: ( ( positional_argument_list )? )
            // CSharp4Tree.g:1855:10: ( positional_argument_list )?
            {
            // CSharp4Tree.g:1855:10: ( positional_argument_list )?
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==POSITIONAL_ARGUMENT_LIST) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    // CSharp4Tree.g:1855:10: positional_argument_list
                    {
                    pushFollow(FOLLOW_positional_argument_list_in_attribute_arguments13818);
                    positional_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 318, attribute_arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"


    public static class positional_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument_list"
    // CSharp4Tree.g:1858:1: positional_argument_list : ^( POSITIONAL_ARGUMENT_LIST ( positional_argument )+ ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.positional_argument_list_return positional_argument_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.positional_argument_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.positional_argument_list_return();
        retval.start = input.LT(1);

        int positional_argument_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }

            // CSharp4Tree.g:1859:5: ( ^( POSITIONAL_ARGUMENT_LIST ( positional_argument )+ ) )
            // CSharp4Tree.g:1859:10: ^( POSITIONAL_ARGUMENT_LIST ( positional_argument )+ )
            {
            match(input,POSITIONAL_ARGUMENT_LIST,FOLLOW_POSITIONAL_ARGUMENT_LIST_in_positional_argument_list13841); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // CSharp4Tree.g:1859:38: ( positional_argument )+
            int cnt329=0;
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==IDENTIFIER||LA329_0==OPEN_PARENS||LA329_0==OP_COALESCING||LA329_0==ASSIGNMENT_OPERATOR||LA329_0==UNARY_EXPRESSION) ) {
                    alt329=1;
                }


                switch (alt329) {
            	case 1 :
            	    // CSharp4Tree.g:1859:38: positional_argument
            	    {
            	    pushFollow(FOLLOW_positional_argument_in_positional_argument_list13844);
            	    positional_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt329 >= 1 ) break loop329;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(329, input);
                        throw eee;
                }
                cnt329++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 319, positional_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"


    public static class positional_argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "positional_argument"
    // CSharp4Tree.g:1863:1: positional_argument : attribute_argument_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.positional_argument_return positional_argument() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.positional_argument_return retval = new IntegrityVariablesParserC_CSharp4Tree.positional_argument_return();
        retval.start = input.LT(1);

        int positional_argument_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }

            // CSharp4Tree.g:1864:5: ( attribute_argument_expression )
            // CSharp4Tree.g:1864:10: attribute_argument_expression
            {
            pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument13869);
            attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 320, positional_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "positional_argument"


    public static class named_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument_list"
    // CSharp4Tree.g:1868:1: named_argument_list : named_argument ( COMMA named_argument )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.named_argument_list_return named_argument_list() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.named_argument_list_return retval = new IntegrityVariablesParserC_CSharp4Tree.named_argument_list_return();
        retval.start = input.LT(1);

        int named_argument_list_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }

            // CSharp4Tree.g:1869:5: ( named_argument ( COMMA named_argument )* )
            // CSharp4Tree.g:1869:10: named_argument ( COMMA named_argument )*
            {
            pushFollow(FOLLOW_named_argument_in_named_argument_list13892);
            named_argument();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:1869:25: ( COMMA named_argument )*
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==COMMA) ) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    // CSharp4Tree.g:1869:26: COMMA named_argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_named_argument_list13895); if (state.failed) return retval;

            	    pushFollow(FOLLOW_named_argument_in_named_argument_list13897);
            	    named_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 321, named_argument_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "named_argument_list"


    public static class named_argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "named_argument"
    // CSharp4Tree.g:1873:1: named_argument : IDENTIFIER ASSIGNMENT attribute_argument_expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.named_argument_return named_argument() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.named_argument_return retval = new IntegrityVariablesParserC_CSharp4Tree.named_argument_return();
        retval.start = input.LT(1);

        int named_argument_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }

            // CSharp4Tree.g:1874:5: ( IDENTIFIER ASSIGNMENT attribute_argument_expression )
            // CSharp4Tree.g:1874:10: IDENTIFIER ASSIGNMENT attribute_argument_expression
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_named_argument13922); if (state.failed) return retval;

            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_named_argument13924); if (state.failed) return retval;

            pushFollow(FOLLOW_attribute_argument_expression_in_named_argument13926);
            attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 322, named_argument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "named_argument"


    public static class attribute_argument_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "attribute_argument_expression"
    // CSharp4Tree.g:1877:1: attribute_argument_expression : expression ;
    public final IntegrityVariablesParserC_CSharp4Tree.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.attribute_argument_expression_return retval = new IntegrityVariablesParserC_CSharp4Tree.attribute_argument_expression_return();
        retval.start = input.LT(1);

        int attribute_argument_expression_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }

            // CSharp4Tree.g:1878:5: ( expression )
            // CSharp4Tree.g:1878:10: expression
            {
            pushFollow(FOLLOW_expression_in_attribute_argument_expression13947);
            expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 323, attribute_argument_expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"


    public static class from_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "from_contextual_keyword"
    // CSharp4Tree.g:1890:1: from_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.from_contextual_keyword_return from_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.from_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.from_contextual_keyword_return();
        retval.start = input.LT(1);

        int from_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }

            // CSharp4Tree.g:1891:5: ( IDENTIFIER )
            // CSharp4Tree.g:1891:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_from_contextual_keyword13976); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 324, from_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "from_contextual_keyword"


    public static class let_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "let_contextual_keyword"
    // CSharp4Tree.g:1893:1: let_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.let_contextual_keyword_return let_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.let_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.let_contextual_keyword_return();
        retval.start = input.LT(1);

        int let_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }

            // CSharp4Tree.g:1894:5: ( IDENTIFIER )
            // CSharp4Tree.g:1894:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_let_contextual_keyword13995); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 325, let_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "let_contextual_keyword"


    public static class where_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "where_contextual_keyword"
    // CSharp4Tree.g:1896:1: where_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.where_contextual_keyword_return where_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.where_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.where_contextual_keyword_return();
        retval.start = input.LT(1);

        int where_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }

            // CSharp4Tree.g:1897:5: ( IDENTIFIER )
            // CSharp4Tree.g:1897:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_where_contextual_keyword14014); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 326, where_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "where_contextual_keyword"


    public static class join_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "join_contextual_keyword"
    // CSharp4Tree.g:1899:1: join_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.join_contextual_keyword_return join_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.join_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.join_contextual_keyword_return();
        retval.start = input.LT(1);

        int join_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }

            // CSharp4Tree.g:1900:5: ( IDENTIFIER )
            // CSharp4Tree.g:1900:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_join_contextual_keyword14033); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 327, join_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "join_contextual_keyword"


    public static class on_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "on_contextual_keyword"
    // CSharp4Tree.g:1902:1: on_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.on_contextual_keyword_return on_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.on_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.on_contextual_keyword_return();
        retval.start = input.LT(1);

        int on_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }

            // CSharp4Tree.g:1903:5: ( IDENTIFIER )
            // CSharp4Tree.g:1903:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_on_contextual_keyword14052); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 328, on_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "on_contextual_keyword"


    public static class equals_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "equals_contextual_keyword"
    // CSharp4Tree.g:1905:1: equals_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.equals_contextual_keyword_return equals_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.equals_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.equals_contextual_keyword_return();
        retval.start = input.LT(1);

        int equals_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }

            // CSharp4Tree.g:1906:5: ( IDENTIFIER )
            // CSharp4Tree.g:1906:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_equals_contextual_keyword14071); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 329, equals_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equals_contextual_keyword"


    public static class into_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "into_contextual_keyword"
    // CSharp4Tree.g:1908:1: into_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.into_contextual_keyword_return into_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.into_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.into_contextual_keyword_return();
        retval.start = input.LT(1);

        int into_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }

            // CSharp4Tree.g:1909:5: ( IDENTIFIER )
            // CSharp4Tree.g:1909:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_into_contextual_keyword14090); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 330, into_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "into_contextual_keyword"


    public static class orderby_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "orderby_contextual_keyword"
    // CSharp4Tree.g:1911:1: orderby_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.orderby_contextual_keyword_return orderby_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.orderby_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.orderby_contextual_keyword_return();
        retval.start = input.LT(1);

        int orderby_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }

            // CSharp4Tree.g:1912:5: ( IDENTIFIER )
            // CSharp4Tree.g:1912:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_orderby_contextual_keyword14109); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 331, orderby_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "orderby_contextual_keyword"


    public static class ascending_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "ascending_contextual_keyword"
    // CSharp4Tree.g:1914:1: ascending_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.ascending_contextual_keyword_return ascending_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.ascending_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.ascending_contextual_keyword_return();
        retval.start = input.LT(1);

        int ascending_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }

            // CSharp4Tree.g:1915:5: ( IDENTIFIER )
            // CSharp4Tree.g:1915:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ascending_contextual_keyword14128); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 332, ascending_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ascending_contextual_keyword"


    public static class descending_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "descending_contextual_keyword"
    // CSharp4Tree.g:1917:1: descending_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.descending_contextual_keyword_return descending_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.descending_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.descending_contextual_keyword_return();
        retval.start = input.LT(1);

        int descending_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }

            // CSharp4Tree.g:1918:5: ( IDENTIFIER )
            // CSharp4Tree.g:1918:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_descending_contextual_keyword14147); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 333, descending_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "descending_contextual_keyword"


    public static class select_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "select_contextual_keyword"
    // CSharp4Tree.g:1920:1: select_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.select_contextual_keyword_return select_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.select_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.select_contextual_keyword_return();
        retval.start = input.LT(1);

        int select_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }

            // CSharp4Tree.g:1921:5: ( IDENTIFIER )
            // CSharp4Tree.g:1921:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_select_contextual_keyword14166); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 334, select_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "select_contextual_keyword"


    public static class group_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "group_contextual_keyword"
    // CSharp4Tree.g:1923:1: group_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.group_contextual_keyword_return group_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.group_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.group_contextual_keyword_return();
        retval.start = input.LT(1);

        int group_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }

            // CSharp4Tree.g:1924:5: ( IDENTIFIER )
            // CSharp4Tree.g:1924:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_group_contextual_keyword14185); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 335, group_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "group_contextual_keyword"


    public static class by_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "by_contextual_keyword"
    // CSharp4Tree.g:1926:1: by_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.by_contextual_keyword_return by_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.by_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.by_contextual_keyword_return();
        retval.start = input.LT(1);

        int by_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }

            // CSharp4Tree.g:1927:5: ( IDENTIFIER )
            // CSharp4Tree.g:1927:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_by_contextual_keyword14204); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 336, by_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "by_contextual_keyword"


    public static class partial_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "partial_contextual_keyword"
    // CSharp4Tree.g:1929:1: partial_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.partial_contextual_keyword_return partial_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.partial_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.partial_contextual_keyword_return();
        retval.start = input.LT(1);

        int partial_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }

            // CSharp4Tree.g:1930:5: ( IDENTIFIER )
            // CSharp4Tree.g:1930:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_partial_contextual_keyword14223); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 337, partial_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "partial_contextual_keyword"


    public static class alias_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "alias_contextual_keyword"
    // CSharp4Tree.g:1932:1: alias_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.alias_contextual_keyword_return alias_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.alias_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.alias_contextual_keyword_return();
        retval.start = input.LT(1);

        int alias_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }

            // CSharp4Tree.g:1933:5: ( IDENTIFIER )
            // CSharp4Tree.g:1933:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_contextual_keyword14242); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 338, alias_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "alias_contextual_keyword"


    public static class yield_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "yield_contextual_keyword"
    // CSharp4Tree.g:1935:1: yield_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.yield_contextual_keyword_return yield_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.yield_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.yield_contextual_keyword_return();
        retval.start = input.LT(1);

        int yield_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }

            // CSharp4Tree.g:1936:5: ( IDENTIFIER )
            // CSharp4Tree.g:1936:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_yield_contextual_keyword14261); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 339, yield_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "yield_contextual_keyword"


    public static class get_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "get_contextual_keyword"
    // CSharp4Tree.g:1938:1: get_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.get_contextual_keyword_return get_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.get_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.get_contextual_keyword_return();
        retval.start = input.LT(1);

        int get_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }

            // CSharp4Tree.g:1939:5: ( IDENTIFIER )
            // CSharp4Tree.g:1939:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_get_contextual_keyword14280); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 340, get_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "get_contextual_keyword"


    public static class set_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "set_contextual_keyword"
    // CSharp4Tree.g:1941:1: set_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.set_contextual_keyword_return set_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.set_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.set_contextual_keyword_return();
        retval.start = input.LT(1);

        int set_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }

            // CSharp4Tree.g:1942:5: ( IDENTIFIER )
            // CSharp4Tree.g:1942:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_set_contextual_keyword14299); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 341, set_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "set_contextual_keyword"


    public static class add_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "add_contextual_keyword"
    // CSharp4Tree.g:1944:1: add_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.add_contextual_keyword_return add_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.add_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.add_contextual_keyword_return();
        retval.start = input.LT(1);

        int add_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }

            // CSharp4Tree.g:1945:5: ( IDENTIFIER )
            // CSharp4Tree.g:1945:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_add_contextual_keyword14318); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 342, add_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "add_contextual_keyword"


    public static class remove_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "remove_contextual_keyword"
    // CSharp4Tree.g:1947:1: remove_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.remove_contextual_keyword_return remove_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.remove_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.remove_contextual_keyword_return();
        retval.start = input.LT(1);

        int remove_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }

            // CSharp4Tree.g:1948:5: ( IDENTIFIER )
            // CSharp4Tree.g:1948:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_remove_contextual_keyword14337); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 343, remove_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "remove_contextual_keyword"


    public static class dynamic_contextual_keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "dynamic_contextual_keyword"
    // CSharp4Tree.g:1950:1: dynamic_contextual_keyword : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.dynamic_contextual_keyword_return dynamic_contextual_keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.dynamic_contextual_keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.dynamic_contextual_keyword_return();
        retval.start = input.LT(1);

        int dynamic_contextual_keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }

            // CSharp4Tree.g:1951:5: ( IDENTIFIER )
            // CSharp4Tree.g:1951:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword14356); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 344, dynamic_contextual_keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "dynamic_contextual_keyword"


    public static class arglist_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "arglist"
    // CSharp4Tree.g:1953:1: arglist : IDENTIFIER ;
    public final IntegrityVariablesParserC_CSharp4Tree.arglist_return arglist() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.arglist_return retval = new IntegrityVariablesParserC_CSharp4Tree.arglist_return();
        retval.start = input.LT(1);

        int arglist_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }

            // CSharp4Tree.g:1954:5: ( IDENTIFIER )
            // CSharp4Tree.g:1954:10: IDENTIFIER
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_arglist14375); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 345, arglist_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arglist"


    public static class right_arrow_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_arrow"
    // CSharp4Tree.g:1957:1: right_arrow : ASSIGNMENT GT ;
    public final IntegrityVariablesParserC_CSharp4Tree.right_arrow_return right_arrow() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.right_arrow_return retval = new IntegrityVariablesParserC_CSharp4Tree.right_arrow_return();
        retval.start = input.LT(1);

        int right_arrow_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }

            // CSharp4Tree.g:1958:5: ( ASSIGNMENT GT )
            // CSharp4Tree.g:1958:10: ASSIGNMENT GT
            {
            match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_right_arrow14395); if (state.failed) return retval;

            match(input,GT,FOLLOW_GT_in_right_arrow14397); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 346, right_arrow_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "right_arrow"


    public static class right_shift_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift"
    // CSharp4Tree.g:1961:1: right_shift : OP_RIGHT_SHIFT ;
    public final IntegrityVariablesParserC_CSharp4Tree.right_shift_return right_shift() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.right_shift_return retval = new IntegrityVariablesParserC_CSharp4Tree.right_shift_return();
        retval.start = input.LT(1);

        int right_shift_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }

            // CSharp4Tree.g:1962:5: ( OP_RIGHT_SHIFT )
            // CSharp4Tree.g:1962:10: OP_RIGHT_SHIFT
            {
            match(input,OP_RIGHT_SHIFT,FOLLOW_OP_RIGHT_SHIFT_in_right_shift14417); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 347, right_shift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "right_shift"


    public static class right_shift_assignment_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "right_shift_assignment"
    // CSharp4Tree.g:1965:1: right_shift_assignment : OP_RIGHT_SHIFT_ASSIGNMENT ;
    public final IntegrityVariablesParserC_CSharp4Tree.right_shift_assignment_return right_shift_assignment() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.right_shift_assignment_return retval = new IntegrityVariablesParserC_CSharp4Tree.right_shift_assignment_return();
        retval.start = input.LT(1);

        int right_shift_assignment_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }

            // CSharp4Tree.g:1966:5: ( OP_RIGHT_SHIFT_ASSIGNMENT )
            // CSharp4Tree.g:1966:10: OP_RIGHT_SHIFT_ASSIGNMENT
            {
            match(input,OP_RIGHT_SHIFT_ASSIGNMENT,FOLLOW_OP_RIGHT_SHIFT_ASSIGNMENT_in_right_shift_assignment14437); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 348, right_shift_assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "right_shift_assignment"


    public static class literal_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "literal"
    // CSharp4Tree.g:1969:1: literal : ( boolean_literal | INTEGER_LITERAL | REAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | NULL );
    public final IntegrityVariablesParserC_CSharp4Tree.literal_return literal() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.literal_return retval = new IntegrityVariablesParserC_CSharp4Tree.literal_return();
        retval.start = input.LT(1);

        int literal_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }

            // CSharp4Tree.g:1970:5: ( boolean_literal | INTEGER_LITERAL | REAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | NULL )
            int alt331=6;
            switch ( input.LA(1) ) {
            case FALSE:
            case TRUE:
                {
                alt331=1;
                }
                break;
            case INTEGER_LITERAL:
                {
                alt331=2;
                }
                break;
            case REAL_LITERAL:
                {
                alt331=3;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt331=4;
                }
                break;
            case STRING_LITERAL:
                {
                alt331=5;
                }
                break;
            case NULL:
                {
                alt331=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);

                throw nvae;

            }

            switch (alt331) {
                case 1 :
                    // CSharp4Tree.g:1970:10: boolean_literal
                    {
                    pushFollow(FOLLOW_boolean_literal_in_literal14457);
                    boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:1971:10: INTEGER_LITERAL
                    {
                    match(input,INTEGER_LITERAL,FOLLOW_INTEGER_LITERAL_in_literal14468); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // CSharp4Tree.g:1972:10: REAL_LITERAL
                    {
                    match(input,REAL_LITERAL,FOLLOW_REAL_LITERAL_in_literal14479); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // CSharp4Tree.g:1973:10: CHARACTER_LITERAL
                    {
                    match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal14490); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // CSharp4Tree.g:1974:10: STRING_LITERAL
                    {
                    match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal14501); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // CSharp4Tree.g:1975:10: NULL
                    {
                    match(input,NULL,FOLLOW_NULL_in_literal14512); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 349, literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class boolean_literal_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "boolean_literal"
    // CSharp4Tree.g:1978:1: boolean_literal : ( TRUE | FALSE );
    public final IntegrityVariablesParserC_CSharp4Tree.boolean_literal_return boolean_literal() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.boolean_literal_return retval = new IntegrityVariablesParserC_CSharp4Tree.boolean_literal_return();
        retval.start = input.LT(1);

        int boolean_literal_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }

            // CSharp4Tree.g:1979:5: ( TRUE | FALSE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==FALSE||input.LA(1)==TRUE ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 350, boolean_literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolean_literal"


    public static class keyword_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "keyword"
    // CSharp4Tree.g:1984:1: keyword : ( ABSTRACT | AS | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FALSE | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | IS | LOCK | LONG | NAMESPACE | NEW | NULL | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRUE | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE );
    public final IntegrityVariablesParserC_CSharp4Tree.keyword_return keyword() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.keyword_return retval = new IntegrityVariablesParserC_CSharp4Tree.keyword_return();
        retval.start = input.LT(1);

        int keyword_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }

            // CSharp4Tree.g:1985:5: ( ABSTRACT | AS | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FALSE | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | IS | LOCK | LONG | NAMESPACE | NEW | NULL | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRUE | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE )
            // CSharp4Tree.g:
            {
            if ( input.LA(1)==ABSTRACT||input.LA(1)==AS||input.LA(1)==BASE||(input.LA(1) >= BOOL && input.LA(1) <= BYTE)||(input.LA(1) >= CASE && input.LA(1) <= CHAR)||(input.LA(1) >= CHECKED && input.LA(1) <= CLASS)||(input.LA(1) >= CONST && input.LA(1) <= CONTINUE)||input.LA(1)==DECIMAL||(input.LA(1) >= DEFAULT && input.LA(1) <= DELEGATE)||input.LA(1)==DO||input.LA(1)==DOUBLE||(input.LA(1) >= ELSE && input.LA(1) <= EXTERN)||(input.LA(1) >= FALSE && input.LA(1) <= FINALLY)||(input.LA(1) >= FLOAT && input.LA(1) <= FOREACH)||input.LA(1)==GOTO||(input.LA(1) >= IF && input.LA(1) <= INT)||(input.LA(1) >= INTERFACE && input.LA(1) <= INTERNAL)||input.LA(1)==IS||(input.LA(1) >= LOCK && input.LA(1) <= LONG)||(input.LA(1) >= NAMESPACE && input.LA(1) <= NEW)||input.LA(1)==NULL||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||(input.LA(1) >= OUT && input.LA(1) <= PARAMS)||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLIC)||input.LA(1)==READONLY||(input.LA(1) >= REF && input.LA(1) <= RETURN)||(input.LA(1) >= SBYTE && input.LA(1) <= SEALED)||input.LA(1)==SHORT||(input.LA(1) >= SIZEOF && input.LA(1) <= STACKALLOC)||(input.LA(1) >= STATIC && input.LA(1) <= STRING)||(input.LA(1) >= STRUCT && input.LA(1) <= SWITCH)||(input.LA(1) >= THIS && input.LA(1) <= THROW)||(input.LA(1) >= TRUE && input.LA(1) <= TYPEOF)||(input.LA(1) >= UINT && input.LA(1) <= UNCHECKED)||(input.LA(1) >= UNSAFE && input.LA(1) <= USING)||(input.LA(1) >= VIRTUAL && input.LA(1) <= VOLATILE)||input.LA(1)==WHILE ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 351, keyword_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyword"


    public static class class_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "class_definition"
    // CSharp4Tree.g:2000:1: class_definition : ^( CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.class_definition_return class_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.class_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.class_definition_return();
        retval.start = input.LT(1);

        int class_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }

            // CSharp4Tree.g:2001:5: ( ^( CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ) )
            // CSharp4Tree.g:2001:10: ^( CLASS IDENTIFIER ( type_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body )
            {
            match(input,CLASS,FOLLOW_CLASS_in_class_definition14954); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_class_definition14956); if (state.failed) return retval;

            // CSharp4Tree.g:2001:29: ( type_parameter_list )?
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==TYPE_PARAMETERS) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    // CSharp4Tree.g:2001:29: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_class_definition14958);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2001:50: ( class_base )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==EXTENDS_OR_IMPLEMENTS) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // CSharp4Tree.g:2001:50: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_definition14961);
                    class_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2002:12: ( type_parameter_constraints_clauses )?
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    // CSharp4Tree.g:2002:12: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_definition14975);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_class_body_in_class_definition14978);
            class_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 352, class_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "class_definition"


    public static class struct_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "struct_definition"
    // CSharp4Tree.g:2005:1: struct_definition : ^( STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.struct_definition_return struct_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.struct_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.struct_definition_return();
        retval.start = input.LT(1);

        int struct_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }

            // CSharp4Tree.g:2006:5: ( ^( STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ) )
            // CSharp4Tree.g:2006:10: ^( STRUCT IDENTIFIER ( type_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body )
            {
            match(input,STRUCT,FOLLOW_STRUCT_in_struct_definition15000); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_struct_definition15002); if (state.failed) return retval;

            // CSharp4Tree.g:2006:30: ( type_parameter_list )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==TYPE_PARAMETERS) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    // CSharp4Tree.g:2006:30: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_struct_definition15004);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2006:51: ( struct_interfaces )?
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==IMPLEMENTS) ) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    // CSharp4Tree.g:2006:51: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_definition15007);
                    struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2007:12: ( type_parameter_constraints_clauses )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // CSharp4Tree.g:2007:12: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_definition15021);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_body_in_struct_definition15024);
            struct_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 353, struct_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "struct_definition"


    public static class interface_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_definition"
    // CSharp4Tree.g:2010:1: interface_definition : ^( INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_definition_return interface_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_definition_return();
        retval.start = input.LT(1);

        int interface_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }

            // CSharp4Tree.g:2011:5: ( ^( INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ) )
            // CSharp4Tree.g:2011:10: ^( INTERFACE IDENTIFIER ( variant_type_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body )
            {
            match(input,INTERFACE,FOLLOW_INTERFACE_in_interface_definition15046); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_definition15048); if (state.failed) return retval;

            // CSharp4Tree.g:2011:33: ( variant_type_parameter_list )?
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==VARIANT_TYPE_PARAMETERS) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    // CSharp4Tree.g:2011:33: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_interface_definition15050);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2011:62: ( interface_base )?
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==IMPLEMENTS) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    // CSharp4Tree.g:2011:62: interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_definition15053);
                    interface_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2012:12: ( type_parameter_constraints_clauses )?
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    // CSharp4Tree.g:2012:12: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_definition15067);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_body_in_interface_definition15070);
            interface_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 354, interface_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_definition"


    public static class enum_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "enum_definition"
    // CSharp4Tree.g:2015:1: enum_definition : ^( ENUM IDENTIFIER ( enum_base )? enum_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.enum_definition_return enum_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.enum_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.enum_definition_return();
        retval.start = input.LT(1);

        int enum_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }

            // CSharp4Tree.g:2016:5: ( ^( ENUM IDENTIFIER ( enum_base )? enum_body ) )
            // CSharp4Tree.g:2016:10: ^( ENUM IDENTIFIER ( enum_base )? enum_body )
            {
            match(input,ENUM,FOLLOW_ENUM_in_enum_definition15092); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enum_definition15094); if (state.failed) return retval;

            // CSharp4Tree.g:2016:28: ( enum_base )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==ENUM_EXTENDS) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // CSharp4Tree.g:2016:28: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_definition15096);
                    enum_base();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_body_in_enum_definition15099);
            enum_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 355, enum_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enum_definition"


    public static class delegate_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "delegate_definition"
    // CSharp4Tree.g:2019:1: delegate_definition : ^( DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.delegate_definition_return delegate_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.delegate_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.delegate_definition_return();
        retval.start = input.LT(1);

        int delegate_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }

            // CSharp4Tree.g:2020:5: ( ^( DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? ) )
            // CSharp4Tree.g:2020:10: ^( DELEGATE return_type IDENTIFIER ( variant_type_parameter_list )? OPEN_PARENS ( formal_parameter_list )? CLOSE_PARENS ( type_parameter_constraints_clauses )? )
            {
            match(input,DELEGATE,FOLLOW_DELEGATE_in_delegate_definition15121); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_return_type_in_delegate_definition15123);
            return_type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_delegate_definition15125); if (state.failed) return retval;

            // CSharp4Tree.g:2020:44: ( variant_type_parameter_list )?
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==VARIANT_TYPE_PARAMETERS) ) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    // CSharp4Tree.g:2020:44: variant_type_parameter_list
                    {
                    pushFollow(FOLLOW_variant_type_parameter_list_in_delegate_definition15127);
                    variant_type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,OPEN_PARENS,FOLLOW_OPEN_PARENS_in_delegate_definition15141); if (state.failed) return retval;

            // CSharp4Tree.g:2021:24: ( formal_parameter_list )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==FORMAL_PARAMETER_LIST) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    // CSharp4Tree.g:2021:24: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_definition15143);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input,CLOSE_PARENS,FOLLOW_CLOSE_PARENS_in_delegate_definition15146); if (state.failed) return retval;

            // CSharp4Tree.g:2022:12: ( type_parameter_constraints_clauses )?
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    // CSharp4Tree.g:2022:12: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_definition15159);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 356, delegate_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delegate_definition"


    public static class event_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "event_declaration2"
    // CSharp4Tree.g:2026:1: event_declaration2 : ( ^( EVENT variable_declarators ) | ^( EVENT type member_name event_accessor_declarations ) );
    public final IntegrityVariablesParserC_CSharp4Tree.event_declaration2_return event_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.event_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.event_declaration2_return();
        retval.start = input.LT(1);

        int event_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }

            // CSharp4Tree.g:2027:5: ( ^( EVENT variable_declarators ) | ^( EVENT type member_name event_accessor_declarations ) )
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==EVENT) ) {
                int LA345_1 = input.LA(2);

                if ( (LA345_1==DOWN) ) {
                    int LA345_2 = input.LA(3);

                    if ( (LA345_2==VARIABLE_DECLARATOR) ) {
                        alt345=1;
                    }
                    else if ( (LA345_2==TYPE) ) {
                        alt345=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 345, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);

                throw nvae;

            }
            switch (alt345) {
                case 1 :
                    // CSharp4Tree.g:2027:10: ^( EVENT variable_declarators )
                    {
                    match(input,EVENT,FOLLOW_EVENT_in_event_declaration215183); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration215185);
                    variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:2028:10: ^( EVENT type member_name event_accessor_declarations )
                    {
                    match(input,EVENT,FOLLOW_EVENT_in_event_declaration215198); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_event_declaration215200);
                    type();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_member_name_in_event_declaration215202);
                    member_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration215204);
                    event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 357, event_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "event_declaration2"


    public static class field_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "field_declaration2"
    // CSharp4Tree.g:2031:1: field_declaration2 : ^( FIELD_DECL variable_declarators ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.field_declaration2_return field_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.field_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.field_declaration2_return();
        retval.start = input.LT(1);

        int field_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }

            // CSharp4Tree.g:2032:5: ( ^( FIELD_DECL variable_declarators ) )
            // CSharp4Tree.g:2032:10: ^( FIELD_DECL variable_declarators )
            {
            match(input,FIELD_DECL,FOLLOW_FIELD_DECL_in_field_declaration215226); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declarators_in_field_declaration215228);
            variable_declarators();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 358, field_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "field_declaration2"


    public static class property_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "property_declaration2"
    // CSharp4Tree.g:2035:1: property_declaration2 : ^( PROPERTY_DECL member_name accessor_declarations ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.property_declaration2_return property_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.property_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.property_declaration2_return();
        retval.start = input.LT(1);

        int property_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }

            // CSharp4Tree.g:2036:5: ( ^( PROPERTY_DECL member_name accessor_declarations ) )
            // CSharp4Tree.g:2036:10: ^( PROPERTY_DECL member_name accessor_declarations )
            {
            match(input,PROPERTY_DECL,FOLLOW_PROPERTY_DECL_in_property_declaration215250); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_member_name_in_property_declaration215253);
            member_name();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_property_declaration215256);
            accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 359, property_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "property_declaration2"


    public static class constant_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constant_declaration2"
    // CSharp4Tree.g:2040:1: constant_declaration2 : constant_declarators ;
    public final IntegrityVariablesParserC_CSharp4Tree.constant_declaration2_return constant_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constant_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.constant_declaration2_return();
        retval.start = input.LT(1);

        int constant_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }

            // CSharp4Tree.g:2041:5: ( constant_declarators )
            // CSharp4Tree.g:2041:10: constant_declarators
            {
            pushFollow(FOLLOW_constant_declarators_in_constant_declaration215278);
            constant_declarators();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 360, constant_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constant_declaration2"


    public static class indexer_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "indexer_declaration2"
    // CSharp4Tree.g:2044:1: indexer_declaration2 : ^( INDEXER_DECL formal_parameter_list accessor_declarations ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.indexer_declaration2_return indexer_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.indexer_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.indexer_declaration2_return();
        retval.start = input.LT(1);

        int indexer_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }

            // CSharp4Tree.g:2045:5: ( ^( INDEXER_DECL formal_parameter_list accessor_declarations ) )
            // CSharp4Tree.g:2045:10: ^( INDEXER_DECL formal_parameter_list accessor_declarations )
            {
            match(input,INDEXER_DECL,FOLLOW_INDEXER_DECL_in_indexer_declaration215299); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declaration215301);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration215304);
            accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 361, indexer_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "indexer_declaration2"


    public static class destructor_definition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "destructor_definition"
    // CSharp4Tree.g:2048:1: destructor_definition : ^( TILDE IDENTIFIER destructor_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.destructor_definition_return destructor_definition() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.destructor_definition_return retval = new IntegrityVariablesParserC_CSharp4Tree.destructor_definition_return();
        retval.start = input.LT(1);

        int destructor_definition_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }

            // CSharp4Tree.g:2049:5: ( ^( TILDE IDENTIFIER destructor_body ) )
            // CSharp4Tree.g:2049:10: ^( TILDE IDENTIFIER destructor_body )
            {
            match(input,TILDE,FOLLOW_TILDE_in_destructor_definition15326); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_destructor_definition15328); if (state.failed) return retval;

            pushFollow(FOLLOW_destructor_body_in_destructor_definition15330);
            destructor_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 362, destructor_definition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "destructor_definition"


    public static class constructor_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "constructor_declaration2"
    // CSharp4Tree.g:2052:1: constructor_declaration2 : ^( CONSTRUCTOR_DECL IDENTIFIER ( formal_parameter_list )? ( constructor_initializer )? body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.constructor_declaration2_return constructor_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.constructor_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.constructor_declaration2_return();
        retval.start = input.LT(1);

        int constructor_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }

            // CSharp4Tree.g:2053:5: ( ^( CONSTRUCTOR_DECL IDENTIFIER ( formal_parameter_list )? ( constructor_initializer )? body ) )
            // CSharp4Tree.g:2053:10: ^( CONSTRUCTOR_DECL IDENTIFIER ( formal_parameter_list )? ( constructor_initializer )? body )
            {
            match(input,CONSTRUCTOR_DECL,FOLLOW_CONSTRUCTOR_DECL_in_constructor_declaration215352); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_constructor_declaration215354); if (state.failed) return retval;

            // CSharp4Tree.g:2053:40: ( formal_parameter_list )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==FORMAL_PARAMETER_LIST) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // CSharp4Tree.g:2053:40: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declaration215356);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2054:12: ( constructor_initializer )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==COLON) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    // CSharp4Tree.g:2054:12: constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declaration215370);
                    constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_body_in_constructor_declaration215374);
            body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 363, constructor_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "constructor_declaration2"


    public static class method_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_declaration2"
    // CSharp4Tree.g:2057:1: method_declaration2 : ^( METHOD_DECL method_member_name ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? ( method_body )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_declaration2_return method_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_declaration2_return();
        retval.start = input.LT(1);

        int method_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }

            // CSharp4Tree.g:2058:5: ( ^( METHOD_DECL method_member_name ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? ( method_body )? ) )
            // CSharp4Tree.g:2058:10: ^( METHOD_DECL method_member_name ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? ( method_body )? )
            {
            match(input,METHOD_DECL,FOLLOW_METHOD_DECL_in_method_declaration215396); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_method_member_name_in_method_declaration215398);
            method_member_name();

            state._fsp--;
            if (state.failed) return retval;

            // CSharp4Tree.g:2058:43: ( type_parameter_list )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==TYPE_PARAMETERS) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // CSharp4Tree.g:2058:43: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_method_declaration215400);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2059:12: ( formal_parameter_list )?
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( (LA349_0==FORMAL_PARAMETER_LIST) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    // CSharp4Tree.g:2059:12: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_declaration215414);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2059:35: ( type_parameter_constraints_clauses )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // CSharp4Tree.g:2059:35: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_declaration215417);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2060:12: ( method_body )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==BLOCK) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    // CSharp4Tree.g:2060:12: method_body
                    {
                    pushFollow(FOLLOW_method_body_in_method_declaration215431);
                    method_body();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 364, method_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_declaration2"


    public static class method_member_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name"
    // CSharp4Tree.g:2064:1: method_member_name : ^( MEMBER_NAME ^( NAMESPACE_OR_TYPE_NAME method_member_name2 ) ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_member_name_return method_member_name() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_member_name_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_member_name_return();
        retval.start = input.LT(1);

        int method_member_name_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }

            // CSharp4Tree.g:2065:5: ( ^( MEMBER_NAME ^( NAMESPACE_OR_TYPE_NAME method_member_name2 ) ) )
            // CSharp4Tree.g:2065:10: ^( MEMBER_NAME ^( NAMESPACE_OR_TYPE_NAME method_member_name2 ) )
            {
            match(input,MEMBER_NAME,FOLLOW_MEMBER_NAME_in_method_member_name15456); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,NAMESPACE_OR_TYPE_NAME,FOLLOW_NAMESPACE_OR_TYPE_NAME_in_method_member_name15459); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_method_member_name2_in_method_member_name15461);
            method_member_name2();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 365, method_member_name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_member_name"


    public static class method_member_name2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_member_name2"
    // CSharp4Tree.g:2068:1: method_member_name2 : ( IDENTIFIER | IDENTIFIER DOUBLE_COLON IDENTIFIER ) ( type_argument_list_opt DOT IDENTIFIER )* ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_member_name2_return method_member_name2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_member_name2_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_member_name2_return();
        retval.start = input.LT(1);

        int method_member_name2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }

            // CSharp4Tree.g:2069:5: ( ( IDENTIFIER | IDENTIFIER DOUBLE_COLON IDENTIFIER ) ( type_argument_list_opt DOT IDENTIFIER )* )
            // CSharp4Tree.g:2069:10: ( IDENTIFIER | IDENTIFIER DOUBLE_COLON IDENTIFIER ) ( type_argument_list_opt DOT IDENTIFIER )*
            {
            // CSharp4Tree.g:2069:10: ( IDENTIFIER | IDENTIFIER DOUBLE_COLON IDENTIFIER )
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==IDENTIFIER) ) {
                int LA352_1 = input.LA(2);

                if ( (LA352_1==DOUBLE_COLON) ) {
                    alt352=2;
                }
                else if ( (LA352_1==UP||LA352_1==TYPE_ARGUMENT_LIST) ) {
                    alt352=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 352, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;

            }
            switch (alt352) {
                case 1 :
                    // CSharp4Tree.g:2069:11: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name215484); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // CSharp4Tree.g:2069:24: IDENTIFIER DOUBLE_COLON IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name215488); if (state.failed) return retval;

                    match(input,DOUBLE_COLON,FOLLOW_DOUBLE_COLON_in_method_member_name215490); if (state.failed) return retval;

                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name215492); if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2070:10: ( type_argument_list_opt DOT IDENTIFIER )*
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==TYPE_ARGUMENT_LIST) ) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    // CSharp4Tree.g:2070:11: type_argument_list_opt DOT IDENTIFIER
            	    {
            	    pushFollow(FOLLOW_type_argument_list_opt_in_method_member_name215505);
            	    type_argument_list_opt();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    match(input,DOT,FOLLOW_DOT_in_method_member_name215507); if (state.failed) return retval;

            	    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_method_member_name215509); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 366, method_member_name2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_member_name2"


    public static class operator_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "operator_declaration2"
    // CSharp4Tree.g:2073:1: operator_declaration2 : ^( OPERATOR overloadable_operator ^( FIRST_OP type IDENTIFIER ) ^( SECOND_OP ( type )? ( IDENTIFIER )? ) operator_body ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.operator_declaration2_return operator_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.operator_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.operator_declaration2_return();
        retval.start = input.LT(1);

        int operator_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }

            // CSharp4Tree.g:2074:5: ( ^( OPERATOR overloadable_operator ^( FIRST_OP type IDENTIFIER ) ^( SECOND_OP ( type )? ( IDENTIFIER )? ) operator_body ) )
            // CSharp4Tree.g:2074:10: ^( OPERATOR overloadable_operator ^( FIRST_OP type IDENTIFIER ) ^( SECOND_OP ( type )? ( IDENTIFIER )? ) operator_body )
            {
            match(input,OPERATOR,FOLLOW_OPERATOR_in_operator_declaration215532); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_overloadable_operator_in_operator_declaration215534);
            overloadable_operator();

            state._fsp--;
            if (state.failed) return retval;

            match(input,FIRST_OP,FOLLOW_FIRST_OP_in_operator_declaration215537); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_operator_declaration215539);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration215541); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            match(input,SECOND_OP,FOLLOW_SECOND_OP_in_operator_declaration215587); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:2075:55: ( type )?
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==TYPE) ) {
                    alt354=1;
                }
                switch (alt354) {
                    case 1 :
                        // CSharp4Tree.g:2075:55: type
                        {
                        pushFollow(FOLLOW_type_in_operator_declaration215589);
                        type();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                // CSharp4Tree.g:2075:61: ( IDENTIFIER )?
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==IDENTIFIER) ) {
                    alt355=1;
                }
                switch (alt355) {
                    case 1 :
                        // CSharp4Tree.g:2075:61: IDENTIFIER
                        {
                        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_operator_declaration215592); if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            pushFollow(FOLLOW_operator_body_in_operator_declaration215606);
            operator_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 367, operator_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "operator_declaration2"


    public static class interface_method_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_method_declaration2"
    // CSharp4Tree.g:2080:1: interface_method_declaration2 : ^( METHOD_DECL MEMBER_NAME ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration2_return interface_method_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_method_declaration2_return();
        retval.start = input.LT(1);

        int interface_method_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 368) ) { return retval; }

            // CSharp4Tree.g:2081:5: ( ^( METHOD_DECL MEMBER_NAME ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? ) )
            // CSharp4Tree.g:2081:10: ^( METHOD_DECL MEMBER_NAME ( type_parameter_list )? ( formal_parameter_list )? ( type_parameter_constraints_clauses )? )
            {
            match(input,METHOD_DECL,FOLLOW_METHOD_DECL_in_interface_method_declaration215629); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,MEMBER_NAME,FOLLOW_MEMBER_NAME_in_interface_method_declaration215631); if (state.failed) return retval;

            // CSharp4Tree.g:2081:36: ( type_parameter_list )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==TYPE_PARAMETERS) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    // CSharp4Tree.g:2081:36: type_parameter_list
                    {
                    pushFollow(FOLLOW_type_parameter_list_in_interface_method_declaration215633);
                    type_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2081:57: ( formal_parameter_list )?
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( (LA357_0==FORMAL_PARAMETER_LIST) ) {
                alt357=1;
            }
            switch (alt357) {
                case 1 :
                    // CSharp4Tree.g:2081:57: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration215636);
                    formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            // CSharp4Tree.g:2082:12: ( type_parameter_constraints_clauses )?
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==TYPE_PARAMETER_CONSTRAINTS_CLAUSES) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    // CSharp4Tree.g:2082:12: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration215650);
                    type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 368, interface_method_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration2"


    public static class interface_property_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_property_declaration2"
    // CSharp4Tree.g:2086:1: interface_property_declaration2 : ^( PROPERTY_DECL MEMBER_NAME interface_accessors ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration2_return interface_property_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_property_declaration2_return();
        retval.start = input.LT(1);

        int interface_property_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 369) ) { return retval; }

            // CSharp4Tree.g:2087:5: ( ^( PROPERTY_DECL MEMBER_NAME interface_accessors ) )
            // CSharp4Tree.g:2087:10: ^( PROPERTY_DECL MEMBER_NAME interface_accessors )
            {
            match(input,PROPERTY_DECL,FOLLOW_PROPERTY_DECL_in_interface_property_declaration215674); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,MEMBER_NAME,FOLLOW_MEMBER_NAME_in_interface_property_declaration215676); if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_property_declaration215678);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 369, interface_property_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration2"


    public static class interface_event_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_event_declaration2"
    // CSharp4Tree.g:2090:1: interface_event_declaration2 : ^( EVENT type IDENTIFIER ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration2_return interface_event_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_event_declaration2_return();
        retval.start = input.LT(1);

        int interface_event_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 370) ) { return retval; }

            // CSharp4Tree.g:2091:5: ( ^( EVENT type IDENTIFIER ) )
            // CSharp4Tree.g:2091:10: ^( EVENT type IDENTIFIER )
            {
            match(input,EVENT,FOLLOW_EVENT_in_interface_event_declaration215700); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_interface_event_declaration215702);
            type();

            state._fsp--;
            if (state.failed) return retval;

            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interface_event_declaration215704); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 370, interface_event_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration2"


    public static class interface_indexer_declaration2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "interface_indexer_declaration2"
    // CSharp4Tree.g:2094:1: interface_indexer_declaration2 : ^( INDEXER_DECL formal_parameter_list interface_accessors ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration2_return interface_indexer_declaration2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration2_return retval = new IntegrityVariablesParserC_CSharp4Tree.interface_indexer_declaration2_return();
        retval.start = input.LT(1);

        int interface_indexer_declaration2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 371) ) { return retval; }

            // CSharp4Tree.g:2095:5: ( ^( INDEXER_DECL formal_parameter_list interface_accessors ) )
            // CSharp4Tree.g:2095:10: ^( INDEXER_DECL formal_parameter_list interface_accessors )
            {
            match(input,INDEXER_DECL,FOLLOW_INDEXER_DECL_in_interface_indexer_declaration215726); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration215728);
            formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_interface_accessors_in_interface_indexer_declaration215730);
            interface_accessors();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 371, interface_indexer_declaration2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration2"


    public static class member_access2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "member_access2"
    // CSharp4Tree.g:2099:1: member_access2 : IDENTIFIER type_argument_list_opt ;
    public final IntegrityVariablesParserC_CSharp4Tree.member_access2_return member_access2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.member_access2_return retval = new IntegrityVariablesParserC_CSharp4Tree.member_access2_return();
        retval.start = input.LT(1);

        int member_access2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 372) ) { return retval; }

            // CSharp4Tree.g:2100:5: ( IDENTIFIER type_argument_list_opt )
            // CSharp4Tree.g:2100:10: IDENTIFIER type_argument_list_opt
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_member_access215753); if (state.failed) return retval;

            pushFollow(FOLLOW_type_argument_list_opt_in_member_access215755);
            type_argument_list_opt();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 372, member_access2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "member_access2"


    public static class method_invocation2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "method_invocation2"
    // CSharp4Tree.g:2103:1: method_invocation2 : ( argument_list )? ;
    public final IntegrityVariablesParserC_CSharp4Tree.method_invocation2_return method_invocation2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.method_invocation2_return retval = new IntegrityVariablesParserC_CSharp4Tree.method_invocation2_return();
        retval.start = input.LT(1);

        int method_invocation2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 373) ) { return retval; }

            // CSharp4Tree.g:2104:5: ( ( argument_list )? )
            // CSharp4Tree.g:2104:10: ( argument_list )?
            {
            // CSharp4Tree.g:2104:10: ( argument_list )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==ARGUMENT) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // CSharp4Tree.g:2104:10: argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_method_invocation215775);
                    argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 373, method_invocation2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "method_invocation2"


    public static class object_creation_expression2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };


    // $ANTLR start "object_creation_expression2"
    // CSharp4Tree.g:2107:1: object_creation_expression2 : ^( OBJECT_CREATION_EXPRESSION ( argument_list )? ( object_or_collection_initializer )? ) ;
    public final IntegrityVariablesParserC_CSharp4Tree.object_creation_expression2_return object_creation_expression2() throws RecognitionException {
        IntegrityVariablesParserC_CSharp4Tree.object_creation_expression2_return retval = new IntegrityVariablesParserC_CSharp4Tree.object_creation_expression2_return();
        retval.start = input.LT(1);

        int object_creation_expression2_StartIndex = input.index();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 374) ) { return retval; }

            // CSharp4Tree.g:2108:5: ( ^( OBJECT_CREATION_EXPRESSION ( argument_list )? ( object_or_collection_initializer )? ) )
            // CSharp4Tree.g:2108:10: ^( OBJECT_CREATION_EXPRESSION ( argument_list )? ( object_or_collection_initializer )? )
            {
            match(input,OBJECT_CREATION_EXPRESSION,FOLLOW_OBJECT_CREATION_EXPRESSION_in_object_creation_expression215797); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // CSharp4Tree.g:2108:39: ( argument_list )?
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==ARGUMENT) ) {
                    alt360=1;
                }
                switch (alt360) {
                    case 1 :
                        // CSharp4Tree.g:2108:39: argument_list
                        {
                        pushFollow(FOLLOW_argument_list_in_object_creation_expression215799);
                        argument_list();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                // CSharp4Tree.g:2108:54: ( object_or_collection_initializer )?
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==OPEN_BRACE) ) {
                    alt361=1;
                }
                switch (alt361) {
                    case 1 :
                        // CSharp4Tree.g:2108:54: object_or_collection_initializer
                        {
                        pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression215802);
                        object_or_collection_initializer();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 374, object_creation_expression2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "object_creation_expression2"

    // $ANTLR start synpred38_CSharp4Tree
    public final void synpred38_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:196:55: ( method_invocation2 )
        // CSharp4Tree.g:196:55: method_invocation2
        {
        pushFollow(FOLLOW_method_invocation2_in_synpred38_CSharp4Tree1155);
        method_invocation2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_CSharp4Tree

    // $ANTLR start synpred91_CSharp4Tree
    public final void synpred91_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:334:16: ( array_type array_initializer )
        // CSharp4Tree.g:334:16: array_type array_initializer
        {
        pushFollow(FOLLOW_array_type_in_synpred91_CSharp4Tree2356);
        array_type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_array_initializer_in_synpred91_CSharp4Tree2358);
        array_initializer();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred91_CSharp4Tree

    // $ANTLR start synpred94_CSharp4Tree
    public final void synpred94_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:335:16: ( non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )? )
        // CSharp4Tree.g:335:16: non_array_type OPEN_BRACKET expression_list CLOSE_BRACKET ( rank_specifiers )? ( array_initializer )?
        {
        pushFollow(FOLLOW_non_array_type_in_synpred94_CSharp4Tree2375);
        non_array_type();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACKET,FOLLOW_OPEN_BRACKET_in_synpred94_CSharp4Tree2377); if (state.failed) return ;

        pushFollow(FOLLOW_expression_list_in_synpred94_CSharp4Tree2379);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,CLOSE_BRACKET,FOLLOW_CLOSE_BRACKET_in_synpred94_CSharp4Tree2381); if (state.failed) return ;

        // CSharp4Tree.g:336:16: ( rank_specifiers )?
        int alt378=2;
        int LA378_0 = input.LA(1);

        if ( (LA378_0==RANK_SPECIFIER) ) {
            alt378=1;
        }
        switch (alt378) {
            case 1 :
                // CSharp4Tree.g:336:16: rank_specifiers
                {
                pushFollow(FOLLOW_rank_specifiers_in_synpred94_CSharp4Tree2398);
                rank_specifiers();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // CSharp4Tree.g:336:33: ( array_initializer )?
        int alt379=2;
        int LA379_0 = input.LA(1);

        if ( (LA379_0==OPEN_BRACE) ) {
            alt379=1;
        }
        switch (alt379) {
            case 1 :
                // CSharp4Tree.g:336:33: array_initializer
                {
                pushFollow(FOLLOW_array_initializer_in_synpred94_CSharp4Tree2401);
                array_initializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred94_CSharp4Tree

    // $ANTLR start synpred229_CSharp4Tree
    public final void synpred229_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:609:10: ( query_body_clauses )
        // CSharp4Tree.g:609:10: query_body_clauses
        {
        pushFollow(FOLLOW_query_body_clauses_in_synpred229_CSharp4Tree4776);
        query_body_clauses();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred229_CSharp4Tree

    // $ANTLR start synpred230_CSharp4Tree
    public final void synpred230_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:609:53: ( query_continuation )
        // CSharp4Tree.g:609:53: query_continuation
        {
        pushFollow(FOLLOW_query_continuation_in_synpred230_CSharp4Tree4781);
        query_continuation();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred230_CSharp4Tree

    // $ANTLR start synpred231_CSharp4Tree
    public final void synpred231_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:613:28: ( query_body_clause )
        // CSharp4Tree.g:613:28: query_body_clause
        {
        pushFollow(FOLLOW_query_body_clause_in_synpred231_CSharp4Tree4805);
        query_body_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred231_CSharp4Tree

    // $ANTLR start synpred232_CSharp4Tree
    public final void synpred232_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:617:10: ( from_clause )
        // CSharp4Tree.g:617:10: from_clause
        {
        pushFollow(FOLLOW_from_clause_in_synpred232_CSharp4Tree4827);
        from_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred232_CSharp4Tree

    // $ANTLR start synpred233_CSharp4Tree
    public final void synpred233_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:618:10: ( let_clause )
        // CSharp4Tree.g:618:10: let_clause
        {
        pushFollow(FOLLOW_let_clause_in_synpred233_CSharp4Tree4838);
        let_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred233_CSharp4Tree

    // $ANTLR start synpred234_CSharp4Tree
    public final void synpred234_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:619:10: ( where_clause )
        // CSharp4Tree.g:619:10: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred234_CSharp4Tree4849);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred234_CSharp4Tree

    // $ANTLR start synpred235_CSharp4Tree
    public final void synpred235_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:620:10: ( combined_join_clause )
        // CSharp4Tree.g:620:10: combined_join_clause
        {
        pushFollow(FOLLOW_combined_join_clause_in_synpred235_CSharp4Tree4860);
        combined_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred235_CSharp4Tree

    // $ANTLR start synpred241_CSharp4Tree
    public final void synpred241_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:660:21: ( ordering_direction )
        // CSharp4Tree.g:660:21: ordering_direction
        {
        pushFollow(FOLLOW_ordering_direction_in_synpred241_CSharp4Tree5175);
        ordering_direction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred241_CSharp4Tree

    // $ANTLR start synpred242_CSharp4Tree
    public final void synpred242_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:664:10: ( ascending_contextual_keyword )
        // CSharp4Tree.g:664:10: ascending_contextual_keyword
        {
        pushFollow(FOLLOW_ascending_contextual_keyword_in_synpred242_CSharp4Tree5197);
        ascending_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred242_CSharp4Tree

    // $ANTLR start synpred243_CSharp4Tree
    public final void synpred243_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:669:10: ( select_clause )
        // CSharp4Tree.g:669:10: select_clause
        {
        pushFollow(FOLLOW_select_clause_in_synpred243_CSharp4Tree5229);
        select_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred243_CSharp4Tree

    // $ANTLR start synpred273_CSharp4Tree
    public final void synpred273_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:785:12: ( ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator ) )
        // CSharp4Tree.g:785:12: ^( LOCAL_VARIABLE_DECLARATOR local_variable_declarator )
        {
        match(input,LOCAL_VARIABLE_DECLARATOR,FOLLOW_LOCAL_VARIABLE_DECLARATOR_in_synpred273_CSharp4Tree6007); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_local_variable_declarator_in_synpred273_CSharp4Tree6009);
        local_variable_declarator();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred273_CSharp4Tree

    // $ANTLR start synpred383_CSharp4Tree
    public final void synpred383_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1173:10: ( typed_member_declaration )
        // CSharp4Tree.g:1173:10: typed_member_declaration
        {
        pushFollow(FOLLOW_typed_member_declaration_in_synpred383_CSharp4Tree8808);
        typed_member_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred383_CSharp4Tree

    // $ANTLR start synpred387_CSharp4Tree
    public final void synpred387_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1177:10: ( ^( method_declaration2 type_void ) )
        // CSharp4Tree.g:1177:10: ^( method_declaration2 type_void )
        {
        pushFollow(FOLLOW_method_declaration2_in_synpred387_CSharp4Tree8858);
        method_declaration2();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_void_in_synpred387_CSharp4Tree8860);
        type_void();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred387_CSharp4Tree

    // $ANTLR start synpred392_CSharp4Tree
    public final void synpred392_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1187:10: ( ^( indexer_declaration2 interface_type type ) )
        // CSharp4Tree.g:1187:10: ^( indexer_declaration2 interface_type type )
        {
        pushFollow(FOLLOW_indexer_declaration2_in_synpred392_CSharp4Tree8940);
        indexer_declaration2();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_interface_type_in_synpred392_CSharp4Tree8942);
        interface_type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred392_CSharp4Tree8944);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred392_CSharp4Tree

    // $ANTLR start synpred395_CSharp4Tree
    public final void synpred395_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1190:10: ( ^( indexer_declaration2 type ) )
        // CSharp4Tree.g:1190:10: ^( indexer_declaration2 type )
        {
        pushFollow(FOLLOW_indexer_declaration2_in_synpred395_CSharp4Tree8987);
        indexer_declaration2();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred395_CSharp4Tree8989);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred395_CSharp4Tree

    // $ANTLR start synpred445_CSharp4Tree
    public final void synpred445_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1330:12: ( get_contextual_keyword accessor_body ( set_accessor_declaration )? )
        // CSharp4Tree.g:1330:12: get_contextual_keyword accessor_body ( set_accessor_declaration )?
        {
        pushFollow(FOLLOW_get_contextual_keyword_in_synpred445_CSharp4Tree9994);
        get_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_accessor_body_in_synpred445_CSharp4Tree9996);
        accessor_body();

        state._fsp--;
        if (state.failed) return ;

        // CSharp4Tree.g:1330:49: ( set_accessor_declaration )?
        int alt397=2;
        int LA397_0 = input.LA(1);

        if ( (LA397_0==IDENTIFIER||LA397_0==INTERNAL||(LA397_0 >= PRIVATE && LA397_0 <= PROTECTED)||LA397_0==ATTRIBUTES) ) {
            alt397=1;
        }
        switch (alt397) {
            case 1 :
                // CSharp4Tree.g:1330:49: set_accessor_declaration
                {
                pushFollow(FOLLOW_set_accessor_declaration_in_synpred445_CSharp4Tree9998);
                set_accessor_declaration();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred445_CSharp4Tree

    // $ANTLR start synpred468_CSharp4Tree
    public final void synpred468_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1376:5: ( add_contextual_keyword block remove_accessor_declaration )
        // CSharp4Tree.g:1376:5: add_contextual_keyword block remove_accessor_declaration
        {
        pushFollow(FOLLOW_add_contextual_keyword_in_synpred468_CSharp4Tree10361);
        add_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_block_in_synpred468_CSharp4Tree10363);
        block();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_remove_accessor_declaration_in_synpred468_CSharp4Tree10365);
        remove_accessor_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred468_CSharp4Tree

    // $ANTLR start synpred488_CSharp4Tree
    public final void synpred488_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1431:10: ( unary_operator_declarator )
        // CSharp4Tree.g:1431:10: unary_operator_declarator
        {
        pushFollow(FOLLOW_unary_operator_declarator_in_synpred488_CSharp4Tree10769);
        unary_operator_declarator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred488_CSharp4Tree

    // $ANTLR start synpred489_CSharp4Tree
    public final void synpred489_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1432:10: ( binary_operator_declarator )
        // CSharp4Tree.g:1432:10: binary_operator_declarator
        {
        pushFollow(FOLLOW_binary_operator_declarator_in_synpred489_CSharp4Tree10780);
        binary_operator_declarator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred489_CSharp4Tree

    // $ANTLR start synpred599_CSharp4Tree
    public final void synpred599_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1714:10: ( ^( interface_method_declaration2 ( attributes )? ( NEW )? type ) )
        // CSharp4Tree.g:1714:10: ^( interface_method_declaration2 ( attributes )? ( NEW )? type )
        {
        pushFollow(FOLLOW_interface_method_declaration2_in_synpred599_CSharp4Tree12724);
        interface_method_declaration2();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        // CSharp4Tree.g:1714:42: ( attributes )?
        int alt400=2;
        int LA400_0 = input.LA(1);

        if ( (LA400_0==ATTRIBUTES) ) {
            alt400=1;
        }
        switch (alt400) {
            case 1 :
                // CSharp4Tree.g:1714:42: attributes
                {
                pushFollow(FOLLOW_attributes_in_synpred599_CSharp4Tree12726);
                attributes();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // CSharp4Tree.g:1714:54: ( NEW )?
        int alt401=2;
        int LA401_0 = input.LA(1);

        if ( (LA401_0==NEW) ) {
            alt401=1;
        }
        switch (alt401) {
            case 1 :
                // CSharp4Tree.g:1714:54: NEW
                {
                match(input,NEW,FOLLOW_NEW_in_synpred599_CSharp4Tree12729); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_type_in_synpred599_CSharp4Tree12732);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred599_CSharp4Tree

    // $ANTLR start synpred608_CSharp4Tree
    public final void synpred608_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1717:10: ( ^( interface_method_declaration2 ( attributes )? ( NEW )? type_void ) )
        // CSharp4Tree.g:1717:10: ^( interface_method_declaration2 ( attributes )? ( NEW )? type_void )
        {
        pushFollow(FOLLOW_interface_method_declaration2_in_synpred608_CSharp4Tree12787);
        interface_method_declaration2();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        // CSharp4Tree.g:1717:42: ( attributes )?
        int alt406=2;
        int LA406_0 = input.LA(1);

        if ( (LA406_0==ATTRIBUTES) ) {
            alt406=1;
        }
        switch (alt406) {
            case 1 :
                // CSharp4Tree.g:1717:42: attributes
                {
                pushFollow(FOLLOW_attributes_in_synpred608_CSharp4Tree12789);
                attributes();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // CSharp4Tree.g:1717:54: ( NEW )?
        int alt407=2;
        int LA407_0 = input.LA(1);

        if ( (LA407_0==NEW) ) {
            alt407=1;
        }
        switch (alt407) {
            case 1 :
                // CSharp4Tree.g:1717:54: NEW
                {
                match(input,NEW,FOLLOW_NEW_in_synpred608_CSharp4Tree12792); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_type_void_in_synpred608_CSharp4Tree12795);
        type_void();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred608_CSharp4Tree

    // $ANTLR start synpred621_CSharp4Tree
    public final void synpred621_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1733:12: ( get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )? )
        // CSharp4Tree.g:1733:12: get_contextual_keyword SEMICOLON ( ( attributes )? set_contextual_keyword SEMICOLON )?
        {
        pushFollow(FOLLOW_get_contextual_keyword_in_synpred621_CSharp4Tree12947);
        get_contextual_keyword();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred621_CSharp4Tree12949); if (state.failed) return ;

        // CSharp4Tree.g:1733:45: ( ( attributes )? set_contextual_keyword SEMICOLON )?
        int alt410=2;
        int LA410_0 = input.LA(1);

        if ( (LA410_0==IDENTIFIER||LA410_0==ATTRIBUTES) ) {
            alt410=1;
        }
        switch (alt410) {
            case 1 :
                // CSharp4Tree.g:1733:46: ( attributes )? set_contextual_keyword SEMICOLON
                {
                // CSharp4Tree.g:1733:46: ( attributes )?
                int alt409=2;
                int LA409_0 = input.LA(1);

                if ( (LA409_0==ATTRIBUTES) ) {
                    alt409=1;
                }
                switch (alt409) {
                    case 1 :
                        // CSharp4Tree.g:1733:46: attributes
                        {
                        pushFollow(FOLLOW_attributes_in_synpred621_CSharp4Tree12952);
                        attributes();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                pushFollow(FOLLOW_set_contextual_keyword_in_synpred621_CSharp4Tree12955);
                set_contextual_keyword();

                state._fsp--;
                if (state.failed) return ;

                match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred621_CSharp4Tree12957); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred621_CSharp4Tree

    // $ANTLR start synpred656_CSharp4Tree
    public final void synpred656_CSharp4Tree_fragment() throws RecognitionException {
        // CSharp4Tree.g:1846:37: ( attribute_arguments )
        // CSharp4Tree.g:1846:37: attribute_arguments
        {
        pushFollow(FOLLOW_attribute_arguments_in_synpred656_CSharp4Tree13767);
        attribute_arguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred656_CSharp4Tree

    // Delegated rules

    public final boolean synpred91_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred488_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred488_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred599_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred599_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred621_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred621_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred468_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred489_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred489_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred656_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred656_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred608_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred608_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_CSharp4Tree() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_CSharp4Tree_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA57 dfa57 = new DFA57(this);
    static final String DFA57_eotS =
        "\115\uffff";
    static final String DFA57_eofS =
        "\115\uffff";
    static final String DFA57_minS =
        "\1\4\114\uffff";
    static final String DFA57_maxS =
        "\1\u00dd\114\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
        "\1\114";
    static final String DFA57_specialS =
        "\115\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\6\6\uffff\1\2\1\7\1\uffff\1\10\1\11\1\12\1\uffff\1\13\1\14"+
            "\1\15\1\5\1\16\1\17\5\uffff\1\20\1\21\4\uffff\1\22\1\uffff\1"+
            "\23\1\24\3\uffff\1\25\1\uffff\1\26\7\uffff\1\27\1\30\1\31\1"+
            "\32\1\33\1\uffff\1\5\1\34\1\uffff\1\35\1\36\1\37\4\uffff\1\40"+
            "\5\uffff\1\4\1\41\1\42\1\43\1\44\1\5\1\45\1\46\10\uffff\1\47"+
            "\1\50\5\uffff\1\51\1\52\2\uffff\1\5\2\uffff\1\53\2\uffff\1\3"+
            "\1\54\24\uffff\1\55\1\56\1\57\2\uffff\1\60\1\61\1\62\30\uffff"+
            "\1\63\1\5\1\64\1\65\3\uffff\1\66\1\67\2\uffff\1\70\2\uffff\1"+
            "\71\1\72\1\uffff\1\73\1\74\1\5\1\75\1\76\7\uffff\1\77\1\100"+
            "\1\1\1\5\1\101\1\102\1\uffff\1\103\1\104\1\105\14\uffff\1\106"+
            "\1\107\1\110\1\uffff\1\111\1\112\1\113\2\uffff\1\114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "427:7: ( TILDE | BANG | OPEN_PARENS | IDENTIFIER | literal | ABSTRACT | BASE | BOOL | BREAK | BYTE | CASE | CATCH | CHAR | CHECKED | CLASS | CONST | CONTINUE | DECIMAL | DEFAULT | DELEGATE | DO | DOUBLE | ELSE | ENUM | EVENT | EXPLICIT | EXTERN | FINALLY | FLOAT | FOR | FOREACH | GOTO | IF | IMPLICIT | IN | INT | INTERFACE | INTERNAL | LOCK | LONG | NAMESPACE | NEW | OBJECT | OPERATOR | OUT | OVERRIDE | PARAMS | PRIVATE | PROTECTED | PUBLIC | READONLY | REF | RETURN | SBYTE | SEALED | SHORT | SIZEOF | STACKALLOC | STATIC | STRING | STRUCT | SWITCH | THIS | THROW | TRY | TYPEOF | UINT | ULONG | UNCHECKED | UNSAFE | USHORT | USING | VIRTUAL | VOID | VOLATILE | WHILE )";
        }
    }
 

    public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_type_name129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_OR_TYPE_NAME_in_namespace_or_type_name151 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_namespace_or_type_name2_in_namespace_or_type_name154 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_or_type_name2177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_or_type_name2179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_qualified_alias_member_in_namespace_or_type_name2183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_namespace_part_in_namespace_or_type_name2196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_NAMESPACE_OR_TYPE_PART_in_namespace_part220 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_namespace_part222 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_namespace_part224 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_type_argument_list_in_type_argument_list_opt254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_type277 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type2_in_type279 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_base_type_in_type2302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERR_in_type2306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_type2310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_type2314 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_simple_type_in_base_type337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_base_type348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_base_type361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STAR_in_base_type363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_type_in_simple_type386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_simple_type397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integral_type_in_numeric_type418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floating_point_type_in_numeric_type429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numeric_type440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_nullable_type602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INTERR_in_nullable_type604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_type_in_non_nullable_value_type624 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_nullable_value_type627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_non_nullable_value_type631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_simple_type_in_reference_type657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_class_type_in_reference_type661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_VOID_in_reference_type665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STAR_in_reference_type667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_reference_type690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_name_in_class_type715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_class_type726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_contextual_keyword_in_class_type737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_class_type748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_interface_type771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_delegate_type794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_ARGUMENT_LIST_in_type_argument_list816 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_arguments_in_type_argument_list818 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_argument_in_type_arguments842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_type_argument864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_type_void886 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_VOID_in_type_void888 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_variable_reference914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_argument_list937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_ARGUMENT_in_argument959 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_argument_name_in_argument961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_argument_value_in_argument964 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_argument_name985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARGUMENT_VALUE_in_argument_value1007 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_argument_value2_in_argument_value1009 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_argument_value21030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_argument_value21041 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_variable_reference_in_argument_value21043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_argument_value21054 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_variable_reference_in_argument_value21056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_in_primary_expression1078 = new BitSet(new long[]{0x2400106800715002L,0x000109240800C400L,0x4018110400000000L,0x00000120002000EAL,0x0000000000000000L,0x010C000000008024L,0x0000000020000010L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression1092 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1094 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MEMBER_ACCESS_in_primary_expression1128 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_member_access2_in_primary_expression1132 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_METHOD_INVOCATION_in_primary_expression1151 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1153 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_method_invocation2_in_primary_expression1155 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POST_INC_in_primary_expression1175 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1177 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POST_DEC_in_primary_expression1196 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1198 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1216 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_OP_PTR_in_primary_expression1219 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary_expression1222 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_bracket_expression_in_primary_expression1249 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression1252 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_literal_in_primary_expression_start1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_name_in_primary_expression_start1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesized_expression_in_primary_expression_start1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_primary_expression_start1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_alias_member_in_primary_expression_start1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_access_in_primary_expression_start1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_access_in_primary_expression_start1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression2_in_primary_expression_start1370 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start1372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_primary_expression_start1374 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NEW_in_primary_expression_start1386 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_primary_expression_start1390 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_primary_expression_start1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_primary_expression_start1418 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_list_in_primary_expression_start1420 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_primary_expression_start1422 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start1446 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifiers_in_primary_expression_start1474 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_primary_expression_start1516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_primary_expression_start1534 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_primary_expression_start1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start1563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_expression_in_primary_expression_start1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_expression_in_primary_expression_start1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_value_expression_in_primary_expression_start1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression_start1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARRAY_ACCESS_in_bracket_expression1629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_list_in_bracket_expression1631 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLE_NAME_in_simple_name1657 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_simple_name1659 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_simple_name1661 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_parenthesized_expression1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_access1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_list1905 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_expression_list1908 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_expression_list1910 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_THIS_in_this_access1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access1955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_access1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_base_access1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_base_access1970 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_base_access1972 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_list_in_base_access1974 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_base_access1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_object_creation_expression1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_object_creation_expression2001 = new BitSet(new long[]{0x0000000000000000L,0x00000A0000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_object_creation_expression2005 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression2007 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_object_creation_expression2010 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer2132 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_object_initializer2145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_member_initializer_list_in_object_initializer2147 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_object_initializer2149 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_object_initializer2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2173 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_initializer_list2176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2178 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_initializer2201 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_initializer2203 = new BitSet(new long[]{0x0000000000000000L,0x00010A0000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_initializer_value_in_member_initializer2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_initializer_value2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection_initializer2260 = new BitSet(new long[]{0x0000000000000000L,0x00010A0000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer2262 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_collection_initializer2264 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection_initializer2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2288 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_element_initializer_list2291 = new BitSet(new long[]{0x0000000000000000L,0x00010A0000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2293 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_element_initializer2327 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_list_in_element_initializer2329 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_element_initializer2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_array_creation_expression2352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_array_type_in_array_creation_expression2356 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_array_type_in_array_creation_expression2375 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_array_creation_expression2377 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_list_in_array_creation_expression2379 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_array_creation_expression2381 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression2398 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_array_creation_expression2419 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression2421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_delegate_creation_expression2459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_delegate_type_in_delegate_creation_expression2461 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_creation_expression2463 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_delegate_creation_expression2465 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_creation_expression2467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_anonymous_object_creation_expression2490 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression2492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2515 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_anonymous_object_initializer2528 = new BitSet(new long[]{0x2400106800715000L,0x000109240800C400L,0x4018110400000000L,0x00000100002000EAL,0x0000000000000000L,0x0100000000008000L,0x0000000020000010L});
    public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer2530 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_anonymous_object_initializer2532 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_anonymous_object_initializer2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list2556 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_member_declarator_list2559 = new BitSet(new long[]{0x2400106800715000L,0x000109240800C400L,0x4018110400000000L,0x00000100002000EAL,0x0000000000000000L,0x0100000000008000L,0x0000000020000010L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list2561 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_primary_expression_in_member_declarator2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_declarator2595 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_member_declarator2597 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_member_declarator2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_typeof_expression2620 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_typeof_expression2622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression2628 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression2630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeof_expression2636 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_typeof_expression2644 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_typeof_expression2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name2671 = new BitSet(new long[]{0x0000480000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2675 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_unbound_type_name2700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name2702 = new BitSet(new long[]{0x0000080000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2704 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name2739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unbound_type_name2741 = new BitSet(new long[]{0x0000080000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2743 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_LT_in_generic_dimension_specifier2767 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_commas_in_generic_dimension_specifier2769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GT_in_generic_dimension_specifier2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_commas2793 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CHECKED_in_checked_expression2816 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_checked_expression2818 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_expression2841 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_unchecked_expression2843 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFAULT_in_default_value_expression2866 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_default_value_expression2868 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_EXPRESSION_in_unary_expression2891 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression2_in_unary_expression2893 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression22914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_unary_expression22925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unary_expression22936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression22938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression22949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression22951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_NOT_in_unary_expression22963 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression22965 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TILDE_in_unary_expression22977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression22979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression22990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression23001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_scan_for_cast_generic_precedence3025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_scan_for_cast_generic_precedence3027 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_scan_for_cast_generic_precedence3029 = new BitSet(new long[]{0xEDF0146860FDD810L,0x000019260C03FC10L,0xC07D931E000001CEL,0x00000000277000EFL});
    public static final BitSet FOLLOW_cast_disambiguation_token_in_scan_for_cast_generic_precedence3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_cast_disambiguation_token3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_cast_disambiguation_token3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_cast_disambiguation_token3059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_cast_disambiguation_token3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_cast_disambiguation_token3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_cast_disambiguation_token3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_in_cast_disambiguation_token3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_cast_disambiguation_token3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_cast_disambiguation_token3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTE_in_cast_disambiguation_token3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_cast_disambiguation_token3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_cast_disambiguation_token3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_cast_disambiguation_token3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHECKED_in_cast_disambiguation_token3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_cast_disambiguation_token3111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_cast_disambiguation_token3115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_cast_disambiguation_token3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_cast_disambiguation_token3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_cast_disambiguation_token3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_cast_disambiguation_token3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_cast_disambiguation_token3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_cast_disambiguation_token3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_cast_disambiguation_token3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_cast_disambiguation_token3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENT_in_cast_disambiguation_token3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPLICIT_in_cast_disambiguation_token3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_cast_disambiguation_token3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_cast_disambiguation_token3167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_cast_disambiguation_token3173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_cast_disambiguation_token3177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_cast_disambiguation_token3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_cast_disambiguation_token3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_cast_disambiguation_token3189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_cast_disambiguation_token3193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_cast_disambiguation_token3197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_cast_disambiguation_token3201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_cast_disambiguation_token3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_cast_disambiguation_token3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_in_cast_disambiguation_token3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_cast_disambiguation_token3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_cast_disambiguation_token3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_cast_disambiguation_token3229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_in_cast_disambiguation_token3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_cast_disambiguation_token3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_in_cast_disambiguation_token3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_cast_disambiguation_token3245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_cast_disambiguation_token3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_cast_disambiguation_token3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_cast_disambiguation_token3261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_cast_disambiguation_token3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_cast_disambiguation_token3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_cast_disambiguation_token3273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_cast_disambiguation_token3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SBYTE_in_cast_disambiguation_token3281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_cast_disambiguation_token3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHORT_in_cast_disambiguation_token3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_cast_disambiguation_token3293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STACKALLOC_in_cast_disambiguation_token3297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_cast_disambiguation_token3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_cast_disambiguation_token3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_cast_disambiguation_token3313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_cast_disambiguation_token3317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_cast_disambiguation_token3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_cast_disambiguation_token3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_cast_disambiguation_token3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_cast_disambiguation_token3333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UINT_in_cast_disambiguation_token3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ULONG_in_cast_disambiguation_token3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNCHECKED_in_cast_disambiguation_token3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_cast_disambiguation_token3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USHORT_in_cast_disambiguation_token3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_cast_disambiguation_token3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_cast_disambiguation_token3365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_cast_disambiguation_token3369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_cast_disambiguation_token3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_cast_disambiguation_token3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_pre_increment_expression3404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_pre_decrement_expression3427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_EXPRESSION_in_cast_expression3451 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_cast_expression3453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression3455 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3478 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0002000000000010L});
    public static final BitSet FOLLOW_STAR_in_multiplicative_expression3492 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplicative_expression_in_multiplicative_expression3494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3496 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_multiplicative_expression3511 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplicative_expression_in_multiplicative_expression3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3515 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENT_in_multiplicative_expression3530 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplicative_expression_in_multiplicative_expression3532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3534 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3568 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PLUS_in_additive_expression3582 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_additive_expression_in_additive_expression3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3586 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_additive_expression3601 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_additive_expression_in_additive_expression3603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3605 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3639 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_shift_expression3653 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_shift_expression_in_shift_expression3655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3657 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_right_shift_in_shift_expression3672 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_shift_expression_in_shift_expression3674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3676 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3710 = new BitSet(new long[]{0x0000000000000042L,0x0050000010080020L});
    public static final BitSet FOLLOW_LT_in_relational_expression3724 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3728 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GT_in_relational_expression3743 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3747 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OP_LE_in_relational_expression3762 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3766 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OP_GE_in_relational_expression3781 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3785 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_in_relational_expression3800 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3802 = new BitSet(new long[]{0x2000100800114000L,0x0000010008004400L,0x0008110000000000L,0x0000000002200060L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_isType_in_relational_expression3804 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AS_in_relational_expression3819 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relational_expression_in_relational_expression3821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_relational_expression3823 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_non_nullable_value_type_in_isType3857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_INTERR_in_isType3859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3925 = new BitSet(new long[]{0x0000000000000002L,0x0808000000000000L});
    public static final BitSet FOLLOW_OP_EQ_in_equality_expression3939 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_equality_expression_in_equality_expression3941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3943 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OP_NE_in_equality_expression3958 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_equality_expression_in_equality_expression3960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3962 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3996 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMP_in_and_expression4010 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_and_expression_in_and_expression4012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression4014 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression4048 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CARET_in_exclusive_or_expression4062 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_exclusive_or_expression4064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression4066 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression4100 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_inclusive_or_expression4114 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_inclusive_or_expression4116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression4118 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression4153 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_OP_AND_in_conditional_and_expression4168 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_and_expression4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression4172 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression4207 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_OP_OR_in_conditional_or_expression4221 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_conditional_or_expression_in_conditional_or_expression4223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression4225 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_COALESCING_in_null_coalescing_expression4270 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression4272 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_null_coalescing_expression4274 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression4297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_CONDITIONAL_EXPRESSION_in_conditional_expression4311 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_THEN_in_conditional_expression4314 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_conditional_expression4316 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSE_in_conditional_expression4320 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_conditional_expression4322 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression4350 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_right_arrow_in_lambda_expression4352 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0002010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELEGATE_in_anonymous_method_expression4378 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_anonymous_method_expression4383 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature4407 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature4420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature4422 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_anonymous_function_signature4435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature4437 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_anonymous_function_signature4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_anonymous_function_signature4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_explicit_anonymous_function_signature4471 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4473 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_explicit_anonymous_function_signature4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4497 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_explicit_anonymous_function_parameter_list4509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4511 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter4537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_explicit_anonymous_function_parameter4539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_implicit_anonymous_function_signature4592 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature4594 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_implicit_anonymous_function_signature4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature4608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4629 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_implicit_anonymous_function_parameter_list4641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4643 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_implicit_anonymous_function_parameter4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_anonymous_function_body4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymous_function_body4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_expression4723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_query_body_in_query_expression4725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_contextual_keyword_in_from_clause4746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_from_clause4748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_clause4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IN_in_from_clause4753 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_from_clause4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_query_body4776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_select_or_group_clause_in_query_body4779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_query_continuation_in_query_body4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses4803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses4805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_from_clause_in_query_body_clause4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_query_body_clause4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_query_body_clause4849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_combined_join_clause_in_query_body_clause4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_clause_in_query_body_clause4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_contextual_keyword_in_let_clause4892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_clause4894 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_let_clause4896 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_let_clause4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_contextual_keyword_in_where_clause4919 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_boolean_expression_in_where_clause4921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_clause4942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_join_clause4944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_clause4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IN_in_join_clause4949 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_clause4960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_clause4962 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_clause4964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_clause4966 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_clause4977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_join_into_clause4998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_join_into_clause5000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause5003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IN_in_join_into_clause5005 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_into_clause5016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_join_into_clause5018 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_into_clause5020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_join_into_clause5022 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_join_into_clause5033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_join_into_clause5035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_into_clause5037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_contextual_keyword_in_combined_join_clause5058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_combined_join_clause5060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_combined_join_clause5063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IN_in_combined_join_clause5065 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_combined_join_clause5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_on_contextual_keyword_in_combined_join_clause5078 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_combined_join_clause5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_equals_contextual_keyword_in_combined_join_clause5082 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_combined_join_clause5093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_combined_join_clause5096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_combined_join_clause5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_contextual_keyword_in_orderby_clause5121 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_orderings_in_orderby_clause5123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_in_orderings5144 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_orderings5147 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ordering_in_orderings5150 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_expression_in_ordering5173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_ordering_direction_in_ordering5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ascending_contextual_keyword_in_ordering_direction5197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descending_contextual_keyword_in_ordering_direction5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_select_or_group_clause5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_select_or_group_clause5240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_contextual_keyword_in_select_clause5261 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_select_clause5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_contextual_keyword_in_group_clause5284 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_group_clause5286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_by_contextual_keyword_in_group_clause5288 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_group_clause5290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_contextual_keyword_in_query_continuation5313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_query_continuation5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_query_body_in_query_continuation5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment5341 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_assignment5343 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_assignment5345 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGNMENT_OPERATOR_in_assignment_operator5367 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_assignment_operator2_in_assignment_operator5369 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_assignment_operator25390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_ADD_ASSIGNMENT_in_assignment_operator25401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_SUB_ASSIGNMENT_in_assignment_operator25412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MULT_ASSIGNMENT_in_assignment_operator25423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DIV_ASSIGNMENT_in_assignment_operator25434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_MOD_ASSIGNMENT_in_assignment_operator25445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_AND_ASSIGNMENT_in_assignment_operator25456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_OR_ASSIGNMENT_in_assignment_operator25467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_XOR_ASSIGNMENT_in_assignment_operator25478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_ASSIGNMENT_in_assignment_operator25489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_assignment_in_assignment_operator25500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_expression5521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_expression5532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_non_assignment_expression5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constant_expression5595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_boolean_expression5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_statement5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_statement5649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_in_statement5660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_embedded_statement5681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_empty_statement_in_embedded_statement5692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_embedded_statement5703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_embedded_statement5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_embedded_statement5725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_embedded_statement5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_statement_in_embedded_statement5747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_statement_in_embedded_statement5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_statement_in_embedded_statement5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_statement_in_embedded_statement5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_statement_in_embedded_statement5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLOCK_in_block5828 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_list_in_block5830 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_statement_in_statement_list5853 = new BitSet(new long[]{0xC000040040408002L,0x0000000004000C10L,0x8040041000000000L,0x0002000020400084L,0x1800000020000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_empty_statement5875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LABELED_STATEMENT_in_labeled_statement5899 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_labeled_statement5901 = new BitSet(new long[]{0xC000040040408000L,0x0000000004000C10L,0x8040041000000000L,0x0002000020400084L,0x1800000020000100L});
    public static final BitSet FOLLOW_statement_in_labeled_statement5903 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement5938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration5959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_local_variable_type5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_VARIABLE_DECLARATOR_in_local_variable_declarators6007 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators6009 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_local_variable_declarator6034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator6036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_VARIABLE_INITIALIZER_in_local_variable_initializer6058 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_local_variable_initializer2_in_local_variable_initializer6060 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_local_variable_initializer26081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer26092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration6115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSION_STATEMENT_in_expression_statement6136 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_expression_in_expression_statement6138 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_statement_expression6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_selection_statement6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_statement_in_selection_statement6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement6219 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONDITION_in_if_statement6222 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolean_expression_in_if_statement6224 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEN_in_if_statement6242 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement6244 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSE_in_if_statement6264 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement6266 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SWITCH_in_switch_statement6304 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_switch_statement6306 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_switch_statement6308 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_switch_statement6310 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_switch_block_in_switch_statement6312 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_switch_block6334 = new BitSet(new long[]{0x0000002001040000L});
    public static final BitSet FOLLOW_switch_sections_in_switch_block6336 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_switch_block6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections6360 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_switch_labels_in_switch_section6382 = new BitSet(new long[]{0xC000040040408000L,0x0000000004000C10L,0x8040041000000000L,0x0002000020400084L,0x1800000020000100L});
    public static final BitSet FOLLOW_statement_list_in_switch_section6384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels6405 = new BitSet(new long[]{0x0000002000040002L});
    public static final BitSet FOLLOW_CASE_in_switch_label6427 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_constant_expression_in_switch_label6429 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label6431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switch_label6442 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_switch_label6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_iteration_statement6467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_statement_in_iteration_statement6478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_iteration_statement6489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_iteration_statement6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_statement6522 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONDITION_in_while_statement6525 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolean_expression_in_while_statement6527 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOOP_BODY_in_while_statement6548 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_embedded_statement_in_while_statement6550 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_do_statement6585 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONDITION_in_do_statement6588 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolean_expression_in_do_statement6590 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOOP_BODY_in_do_statement6608 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_embedded_statement_in_do_statement6610 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOR_in_for_statement6645 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_FOR_INITIALIZER_in_for_statement6650 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_for_initializer_in_for_statement6652 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONDITION_in_for_statement6676 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_for_condition_in_for_statement6678 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOR_ITERATOR_in_for_statement6702 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_for_iterator_in_for_statement6705 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOOP_BODY_in_for_statement6727 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_embedded_statement_in_for_statement6729 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer6763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_initializer6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_expression_in_for_condition6795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_iterator6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list6837 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_statement_expression_list6840 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list6843 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_statement6867 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_local_variable_type_in_foreach_statement6869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_foreach_statement6871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IN_in_foreach_statement6874 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_foreach_statement6876 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_embedded_statement_in_foreach_statement6879 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_break_statement_in_jump_statement6901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_jump_statement6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_jump_statement6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_jump_statement6934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_statement_in_jump_statement6945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_break_statement6967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continue_statement6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement7011 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_goto_statement7013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement7015 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement7028 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CASE_in_goto_statement7030 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_constant_expression_in_goto_statement7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement7034 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GOTO_in_goto_statement7047 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_DEFAULT_in_goto_statement7049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_statement7051 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RETURN_in_return_statement7074 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_return_statement7076 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THROW_in_throw_statement7100 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_throw_statement7102 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRY_in_try_statement7126 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_try_statement7128 = new BitSet(new long[]{0x0800000000080008L});
    public static final BitSet FOLLOW_catch_clauses_in_try_statement7130 = new BitSet(new long[]{0x0800000000000008L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement7133 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses7156 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses7170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses7191 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_CATCH_in_specific_catch_clause7214 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_specific_catch_clause7216 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000400L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_class_type_in_specific_catch_clause7218 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_specific_catch_clause7220 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_specific_catch_clause7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_specific_catch_clause7225 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CATCH_in_general_catch_clause7248 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_general_catch_clause7250 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALLY_in_finally_clause7273 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_finally_clause7275 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CHECKED_in_checked_statement7298 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_checked_statement7300 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNCHECKED_in_unchecked_statement7323 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_unchecked_statement7325 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOCK_in_lock_statement7348 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_lock_statement7350 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_lock_statement7352 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_lock_statement7354 = new BitSet(new long[]{0xC000040040408000L,0x0000000004000C10L,0x8040041000000000L,0x0002000020400084L,0x0000000020000000L});
    public static final BitSet FOLLOW_embedded_statement_in_lock_statement7356 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_USING_in_using_statement7379 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_using_statement7381 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_resource_acquisition_in_using_statement7383 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_using_statement7385 = new BitSet(new long[]{0xC000040040408000L,0x0000000004000C10L,0x8040041000000000L,0x0002000020400084L,0x0000000020000000L});
    public static final BitSet FOLLOW_embedded_statement_in_using_statement7387 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition7409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource_acquisition7420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement7441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RETURN_in_yield_statement7443 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_yield_statement7445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement7447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_contextual_keyword_in_yield_statement7458 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BREAK_in_yield_statement7460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_yield_statement7462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespace_declaration7528 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration7530 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000200L,0x0000000800000000L});
    public static final BitSet FOLLOW_namespace_body_in_namespace_declaration7532 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUALIFIED_IDENTIFIER_in_qualified_identifier7555 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_identifier7557 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L});
    public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body7580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000800000000L});
    public static final BitSet FOLLOW_using_directives_in_namespace_body7583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_ALIAS_DIRECTIVES_in_extern_alias_directives7608 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives7610 = new BitSet(new long[]{0x0100000000000008L});
    public static final BitSet FOLLOW_EXTERN_in_extern_alias_directive7633 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_extern_alias_directive7635 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_USING_DIRECTIVES_in_using_directives7658 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_using_directive_in_using_directives7660 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001400000000L});
    public static final BitSet FOLLOW_using_alias_directive_in_using_directive7683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_namespace_directive_in_using_directive7694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_ALIAS_DIRECTIVE_in_using_alias_directive7716 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_using_alias_directive7718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive7720 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_USING_NAMESPACE_DIRECTIVE_in_using_namespace_directive7743 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive7745 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NAMESPACE_MEMBER_DECLARATIONS_in_namespace_member_declarations7768 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations7770 = new BitSet(new long[]{0x0020004000800008L,0x0000000200010000L,0x0020000000000000L});
    public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration7793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration7804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_definition_in_type_declaration7826 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_type_declaration7828 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration7831 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_struct_definition_in_type_declaration7845 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_type_declaration7847 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration7850 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_definition_in_type_declaration7864 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_type_declaration7866 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration7869 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_enum_definition_in_type_declaration7883 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_type_declaration7885 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration7888 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_delegate_definition_in_type_declaration7902 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_type_declaration7904 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_type_declaration7907 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUALIFIED_ALIAS_MEMBER_in_qualified_alias_member7933 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member7935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_alias_member7937 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_qualified_alias_member7939 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_class_declaration7964 = new BitSet(new long[]{0x0000000000800010L,0x0000000400020400L,0x00040000000001C0L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_class_modifiers_in_class_declaration7967 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000400L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_class_declaration7970 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLASS_in_class_declaration7973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_declaration7984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x4000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_declaration7986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x4000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_class_base_in_class_declaration7989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration8001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_body_in_class_declaration8004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_class_declaration8006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers8028 = new BitSet(new long[]{0x0000000000000012L,0x0000000400020000L,0x00040000000001C0L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_class_modifier_in_class_modifiers8032 = new BitSet(new long[]{0x0000000000000012L,0x0000000400020000L,0x00040000000001C0L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_parameters_in_type_parameter_list8155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_PARAMETERS_in_type_parameters8177 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributed_type_parameter_in_type_parameters8179 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TYPE_PARAM_in_attributed_type_parameter8201 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_attributed_type_parameter8203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_parameter_in_attributed_type_parameter8206 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_type_parameter8228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_OR_IMPLEMENTS_in_class_base8251 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_class_type_in_class_base8254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_interface_type_in_class_base8257 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_interface_type_list8281 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_interface_type_in_interface_type_list8283 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TYPE_PARAMETER_CONSTRAINTS_CLAUSES_in_type_parameter_constraints_clauses8307 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses8309 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_TYPE_PARAMETER_CONSTRAINTS_CLAUSE_in_type_parameter_constraints_clause8333 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_parameter_in_type_parameter_constraints_clause8335 = new BitSet(new long[]{0x0000000000800000L,0x0000010400000400L,0x0028000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_parameter_constraints_in_type_parameter_constraints_clause8337 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_constraint_in_type_parameter_constraints8370 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints8373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_secondary_constraints_in_type_parameter_constraints8375 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_type_parameter_constraints8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraints8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_type_in_primary_constraint8405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_primary_constraint8416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_in_primary_constraint8427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints8448 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_secondary_constraints8451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_interface_type_in_secondary_constraints8453 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_NEW_in_constructor_constraint8476 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_constraint8478 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_constraint8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_member_declarations_in_class_body8501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_MEMBER_DECLARATIONS_in_class_member_declarations8524 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations8526 = new BitSet(new long[]{0x00E0004000800008L,0x0000100000011000L,0x0020000000000000L,0x0000000000000001L,0x0008000400000500L,0x0020000000000010L});
    public static final BitSet FOLLOW_common_member_declaration_in_class_member_declaration8549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration8551 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration8554 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_destructor_definition_in_class_member_declaration8568 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration8570 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_class_member_declaration8573 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODIFIERS_in_all_member_modifiers8598 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_all_member_modifier_in_all_member_modifiers8600 = new BitSet(new long[]{0x0100000000000018L,0x0000000400020400L,0x00040202000001C4L,0x0000000005100000L});
    public static final BitSet FOLLOW_NEW_in_all_member_modifier8622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_all_member_modifier8633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_all_member_modifier8644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_all_member_modifier8655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_all_member_modifier8666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READONLY_in_all_member_modifier8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_all_member_modifier8688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_all_member_modifier8699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEALED_in_all_member_modifier8710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_all_member_modifier8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_all_member_modifier8732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_all_member_modifier8743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_all_member_modifier8754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERN_in_all_member_modifier8765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_all_member_modifier8776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declaration2_in_common_member_declaration8797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typed_member_declaration_in_common_member_declaration8808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration2_in_common_member_declaration8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_common_member_declaration8831 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_operator_body_in_common_member_declaration8833 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_constructor_declaration2_in_common_member_declaration8845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration2_in_common_member_declaration8858 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_void_in_common_member_declaration8860 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_class_definition_in_common_member_declaration8874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_definition_in_common_member_declaration8885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_definition_in_common_member_declaration8896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_definition_in_common_member_declaration8907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_definition_in_common_member_declaration8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration8940 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_interface_type_in_typed_member_declaration8942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration8944 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_method_declaration2_in_typed_member_declaration8957 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration8959 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_property_declaration2_in_typed_member_declaration8972 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration8974 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_indexer_declaration2_in_typed_member_declaration8987 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration8989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_operator_declaration2_in_typed_member_declaration9002 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration9004 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_field_declaration2_in_typed_member_declaration9017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typed_member_declaration9019 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTANT_DECLARATORS_in_constant_declarators9041 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators9043 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CONSTANT_DECLARATOR_in_constant_declarator9067 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constant_declarator9069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONSTANT_INITIALIZER_in_constant_declarator9072 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_constant_expression_in_constant_declarator9074 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators9098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators9100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_VARIABLE_DECLARATOR_in_variable_declarator9123 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declarator2_in_variable_declarator9125 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variable_declarator29146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_declarator29148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_INITIALIZER_in_variable_initializer9170 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_initializer2_in_variable_initializer9173 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_variable_initializer29191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_variable_initializer29199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_in_method_declaration9217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration9219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_method_header9240 = new BitSet(new long[]{0x0100000000000010L,0x0000000400020400L,0x00040200000001C4L,0x0000000003000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_method_modifiers_in_method_header9243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_method_header9246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_return_type_in_method_header9249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_member_name_in_method_header9260 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_header9262 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_method_header9265 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_header9267 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_method_header9279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header9281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifiers9303 = new BitSet(new long[]{0x0100000000000012L,0x0000000400020000L,0x00040200000001C4L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_in_return_type9459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_return_type9470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEMBER_NAME_in_member_name9494 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_interface_type_in_member_name9496 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_method_body9518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORMAL_PARAMETER_LIST_in_formal_parameter_list9540 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list9542 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORMAL_PARAMETER_LIST_in_formal_parameter_list9556 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_fixed_parameters_in_formal_parameter_list9559 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter_list9562 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters9585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters9587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_FIXED_PARAMETER_in_fixed_parameter9610 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_fixed_parameter9612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter9615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_fixed_parameter9618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fixed_parameter9620 = new BitSet(new long[]{0x0000000000000008L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_default_argument_in_fixed_parameter9622 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIXED_PARAMETER_in_fixed_parameter9636 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_arglist_in_fixed_parameter9638 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_default_argument9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMETER_MODIFIER_in_parameter_modifier9682 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_modifier2_in_parameter_modifier9684 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMETER_ARRAY_in_parameter_array9749 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_parameter_array9751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_array_type_in_parameter_array9754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_parameter_array9756 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_property_declaration9778 = new BitSet(new long[]{0x0100000000000010L,0x0000000400020000L,0x00040200000001C4L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_property_modifiers_in_property_declaration9781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_property_declaration9784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_member_name_in_property_declaration9786 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_property_declaration9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration9799 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_property_declaration9801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_modifier_in_property_modifiers9822 = new BitSet(new long[]{0x0100000000000012L,0x0000000400020000L,0x00040200000001C4L,0x0000000001000000L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations9976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L});
    public static final BitSet FOLLOW_accessor_modifier_in_accessor_declarations9979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_accessor_declarations9994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations9996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations9998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_accessor_declarations10012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_accessor_body_in_accessor_declarations10014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations10016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_get_accessor_declaration10040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L});
    public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration10043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_get_accessor_declaration10046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration10048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_set_accessor_declaration10069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L});
    public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration10072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_set_accessor_declaration10075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration10077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier10098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier10109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_accessor_modifier10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier10131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier10133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_accessor_modifier10144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PROTECTED_in_accessor_modifier10146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_accessor_body10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_accessor_body10178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_modifier_in_event_modifiers10199 = new BitSet(new long[]{0x0100000000000012L,0x0000000400020000L,0x00040200000001C4L,0x0000000001000000L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations10354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_event_accessor_declarations10361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations10363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations10365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_event_accessor_declarations10371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_event_accessor_declarations10373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations10375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_add_accessor_declaration10397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_add_accessor_declaration10400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_add_accessor_declaration10402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_remove_accessor_declaration10423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_remove_contextual_keyword_in_remove_accessor_declaration10426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_remove_accessor_declaration10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_indexer_declaration10449 = new BitSet(new long[]{0x0100000000000010L,0x0000000400020000L,0x00000200000001C4L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_indexer_modifiers_in_indexer_declaration10452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration10455 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_indexer_declaration10457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration10468 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_indexer_declaration10470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_modifier_in_indexer_modifiers10491 = new BitSet(new long[]{0x0100000000000012L,0x0000000400020000L,0x00000200000001C4L,0x0000000001000000L});
    public static final BitSet FOLLOW_indexer_modifier_in_indexer_modifiers10493 = new BitSet(new long[]{0x0100000000000012L,0x0000000400020000L,0x00000200000001C4L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_in_indexer_declarator10637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_interface_type_in_indexer_declarator10640 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_indexer_declarator10642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_THIS_in_indexer_declarator10646 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_indexer_declarator10648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator10650 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_indexer_declarator10652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_operator_declaration10673 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0004000000000100L});
    public static final BitSet FOLLOW_operator_modifiers_in_operator_declaration10676 = new BitSet(new long[]{0x0080000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_operator_declarator_in_operator_declaration10678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_modifier_in_operator_modifiers10701 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0004000000000100L});
    public static final BitSet FOLLOW_operator_modifier_in_operator_modifiers10703 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0004000000000100L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator10769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator10780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_operator_declarator10791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator10812 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_unary_operator_declarator10814 = new BitSet(new long[]{0x0400000000000800L,0x0022000100000000L,0x0000000000000020L,0x0000000000000003L});
    public static final BitSet FOLLOW_overloadable_unary_operator_in_unary_operator_declarator10816 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_unary_operator_declarator10818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_unary_operator_declarator10820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_unary_operator_declarator10822 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_unary_operator_declarator10824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator10943 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_OPERATOR_in_binary_operator_declarator10945 = new BitSet(new long[]{0x0000020000022020L,0x08D8000110000020L,0x0002000000000030L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_overloadable_binary_operator_in_binary_operator_declarator10947 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_binary_operator_declarator10949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator10951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator10953 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_binary_operator_declarator10964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator10966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_binary_operator_declarator10968 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_binary_operator_declarator10970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_binary_operator10991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_binary_operator11002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_binary_operator11013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_binary_operator11024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_binary_operator11035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_binary_operator11046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_binary_operator11057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_binary_operator11068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_binary_operator11079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_binary_operator11090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_binary_operator11101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_binary_operator11112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator11123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_binary_operator11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_binary_operator11145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_binary_operator11156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_overloadable_operator11179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_overloadable_operator11190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_overloadable_operator11201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_overloadable_operator11212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_INC_in_overloadable_operator11223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_DEC_in_overloadable_operator11234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_overloadable_operator11245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_overloadable_operator11256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_overloadable_operator11267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_overloadable_operator11278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_overloadable_operator11289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_overloadable_operator11300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISE_OR_in_overloadable_operator11311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_overloadable_operator11322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LEFT_SHIFT_in_overloadable_operator11333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_shift_in_overloadable_operator11344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_EQ_in_overloadable_operator11355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_NE_in_overloadable_operator11366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_operator11377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_overloadable_operator11388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_GE_in_overloadable_operator11399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_LE_in_overloadable_operator11410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_conversion_operator_declarator11433 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator11435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator11437 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator11439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator11441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator11443 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator11445 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPLICIT_in_conversion_operator_declarator11458 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OPERATOR_in_conversion_operator_declarator11460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator11462 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_conversion_operator_declarator11464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator11466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_conversion_operator_declarator11468 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_conversion_operator_declarator11470 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_operator_body11492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_operator_body11503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_constructor_declaration11524 = new BitSet(new long[]{0x0100000000000000L,0x0000000000020400L,0x00000000000001C0L});
    public static final BitSet FOLLOW_constructor_modifiers_in_constructor_declaration11527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration11530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_constructor_body_in_constructor_declaration11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_modifier_in_constructor_modifiers11553 = new BitSet(new long[]{0x0100000000000002L,0x0000000000020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declarator11642 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_declarator11644 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator11646 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_declarator11649 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator11660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer11682 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BASE_in_constructor_initializer11684 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer11686 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer11688 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer11691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_constructor_initializer11702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_THIS_in_constructor_initializer11704 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_constructor_initializer11706 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer11708 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_constructor_initializer11711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_constructor_body11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_constructor_body11743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_static_constructor_body11770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_static_constructor_body11781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_destructor_body11805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_destructor_body11816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_body11837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_body11848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_struct_declaration11872 = new BitSet(new long[]{0x0000000000000000L,0x0000000400020400L,0x00200000000001C0L});
    public static final BitSet FOLLOW_struct_modifiers_in_struct_declaration11875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0020000000000000L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_struct_declaration11878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STRUCT_in_struct_declaration11884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_declaration11886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000005001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_declaration11888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000004001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration11891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration11903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_struct_body_in_struct_declaration11906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_declaration11908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers11930 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers11932 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces12020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_member_declarations_in_struct_body12041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_MEMBER_DECLARATIONS_in_struct_member_declarations12064 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations12066 = new BitSet(new long[]{0x00E0004000800008L,0x0000100000011000L,0x0020000000000000L,0x0000000000000000L,0x0008000400000500L,0x0020000000000010L});
    public static final BitSet FOLLOW_common_member_declaration_in_struct_member_declaration12089 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_struct_member_declaration12091 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_all_member_modifiers_in_struct_member_declaration12094 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_array_type12123 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_array_type2_in_array_type12125 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_base_type_in_array_type212146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_array_type212158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_TYPE_in_non_array_type12184 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_non_array_type2_in_non_array_type12186 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_base_type_in_non_array_type212208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_non_array_type212211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERR_in_non_array_type212215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_non_array_type212219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers12244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_RANK_SPECIFIER_in_rank_specifier12269 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dim_separators_in_rank_specifier12271 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_dim_separators12294 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer12318 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer12320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_array_initializer12331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer12333 = new BitSet(new long[]{0x0000000011000000L});
    public static final BitSet FOLLOW_COMMA_in_array_initializer12335 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_array_initializer12338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list12359 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_initializer_list12362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list12365 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_attributes_in_interface_declaration12389 = new BitSet(new long[]{0x0000000000000000L,0x0000000400030400L,0x00000000000001C0L});
    public static final BitSet FOLLOW_interface_modifiers_in_interface_declaration12392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010400L});
    public static final BitSet FOLLOW_partial_contextual_keyword_in_interface_declaration12395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_declaration12407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_declaration12409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0081000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_declaration12411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0081000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interface_base_in_interface_declaration12414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration12426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_declaration12429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_declaration12431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_modifier_in_interface_modifiers12453 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_interface_modifier_in_interface_modifiers12455 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_variant_type_parameters_in_variant_type_parameter_list12543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIANT_TYPE_PARAMETERS_in_variant_type_parameters12565 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributed_variance_type_parameter_in_variant_type_parameters12567 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_attributes_in_attributed_variance_type_parameter12587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_variance_annotation_in_attributed_variance_type_parameter12590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_parameter_in_attributed_variance_type_parameter12593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIANCE_ANNOTATION_in_variance_annotation12615 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IN_in_variance_annotation12617 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VARIANCE_ANNOTATION_in_variance_annotation12630 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OUT_in_variance_annotation12632 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_type_list_in_interface_base12654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_member_declarations_in_interface_body12675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_MEMBER_DECLARATIONS_in_interface_member_declarations12698 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations12700 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0020000000000010L});
    public static final BitSet FOLLOW_interface_method_declaration2_in_interface_member_declaration12724 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration12726 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration12729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration12732 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_property_declaration2_in_interface_member_declaration12745 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration12747 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration12750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration12753 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_indexer_declaration2_in_interface_member_declaration12766 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration12768 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration12771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration12774 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_method_declaration2_in_interface_member_declaration12787 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration12789 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration12792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_void_in_interface_member_declaration12795 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_event_declaration2_in_interface_member_declaration12808 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration12810 = new BitSet(new long[]{0x0000000000000008L,0x0000000400000000L});
    public static final BitSet FOLLOW_NEW_in_interface_member_declaration12813 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_interface_method_declaration12836 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_method_declaration12839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_return_type_in_interface_method_declaration12842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_method_declaration12844 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration12846 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_interface_method_declaration12858 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration12860 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_interface_method_declaration12863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration12874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_method_declaration12877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_property_declaration12898 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_property_declaration12901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_property_declaration12904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_property_declaration12906 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_property_declaration12908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration12910 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_property_declaration12912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors12933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors12947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors12949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors12952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors12955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors12957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_interface_accessors12972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors12974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessors12977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_interface_accessors12980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_accessors12982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_event_declaration13007 = new BitSet(new long[]{0x0040000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NEW_in_interface_event_declaration13010 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration13013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration13015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration13017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_event_declaration13019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_indexer_declaration13040 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_interface_indexer_declaration13043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_interface_indexer_declaration13046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_THIS_in_interface_indexer_declaration13048 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_interface_indexer_declaration13050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration13052 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_interface_indexer_declaration13063 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_interface_indexer_declaration13065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration13067 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_interface_indexer_declaration13069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_enum_declaration13091 = new BitSet(new long[]{0x0020000000000000L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_enum_modifiers_in_enum_declaration13094 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_ENUM_in_enum_declaration13097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_declaration13099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_enum_base_in_enum_declaration13101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_declaration13104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_declaration13106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_EXTENDS_in_enum_base13129 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_integral_type_in_enum_base13131 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_enum_member_declarations_in_enum_body13153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_modifier_in_enum_modifiers13174 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_ENUM_MEMBER_DECLARATIONS_in_enum_member_declarations13262 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations13264 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ENUM_MEMBER_DECLARATION_in_enum_member_declaration13288 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_enum_member_declaration13290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_member_declaration13293 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_ENUM_MEMBER_INITIALIZER_in_enum_member_declaration13311 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_constant_expression_in_enum_member_declaration13313 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_attributes_in_delegate_declaration13353 = new BitSet(new long[]{0x0000004000000000L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_delegate_modifiers_in_delegate_declaration13356 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_declaration13359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_return_type_in_delegate_declaration13361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_declaration13363 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_declaration13374 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_declaration13377 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration13379 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_declaration13391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration13393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_delegate_declaration13396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers13417 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_delegate_modifier_in_delegate_modifiers13419 = new BitSet(new long[]{0x0000000000000002L,0x0000000400020000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_global_attribute_section_in_global_attribute_sections13509 = new BitSet(new long[]{0xEDF0146860DDD052L,0x000011260C0B7C10L,0xC06D931A000001CEL,0x00000000277000EEL});
    public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute_section13531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_attribute_list_in_global_attribute_section13533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier13554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_in_global_attribute_target13575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_global_attribute_target13586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_sections_in_attributes13607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTES_in_attribute_sections13629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_section_in_attribute_sections13631 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section13654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_section13657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_TARGET_in_attribute_target_specifier13679 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier13681 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_keyword_in_attribute_target13703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_attribute_target13714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_LIST_in_attribute_list13736 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_in_attribute_list13739 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attribute13763 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_name_in_attribute13765 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_attribute_arguments_in_attribute13767 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name13791 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_attribute_name13793 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_positional_argument_list_in_attribute_arguments13818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POSITIONAL_ARGUMENT_LIST_in_positional_argument_list13841 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list13844 = new BitSet(new long[]{0x0000000000000008L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument13869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list13892 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_named_argument_list13895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list13897 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_named_argument13922 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_named_argument13924 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument13926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attribute_argument_expression13947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_from_contextual_keyword13976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_let_contextual_keyword13995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_where_contextual_keyword14014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_join_contextual_keyword14033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_on_contextual_keyword14052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_equals_contextual_keyword14071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_into_contextual_keyword14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_orderby_contextual_keyword14109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ascending_contextual_keyword14128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_descending_contextual_keyword14147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_select_contextual_keyword14166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_group_contextual_keyword14185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_by_contextual_keyword14204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_partial_contextual_keyword14223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_contextual_keyword14242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_yield_contextual_keyword14261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_get_contextual_keyword14280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_set_contextual_keyword14299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_add_contextual_keyword14318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_remove_contextual_keyword14337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_dynamic_contextual_keyword14356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_arglist14375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNMENT_in_right_arrow14395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GT_in_right_arrow14397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_RIGHT_SHIFT_in_right_shift14417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OP_RIGHT_SHIFT_ASSIGNMENT_in_right_shift_assignment14437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_literal14457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_LITERAL_in_literal14468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LITERAL_in_literal14479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal14490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal14501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal14512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_class_definition14954 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_class_definition14956 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_class_definition14958 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_class_base_in_class_definition14961 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_definition14975 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_body_in_class_definition14978 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STRUCT_in_struct_definition15000 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_struct_definition15002 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000005001000L});
    public static final BitSet FOLLOW_type_parameter_list_in_struct_definition15004 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000004001000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_definition15007 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004001000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_definition15021 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_struct_body_in_struct_definition15024 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INTERFACE_in_interface_definition15046 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_definition15048 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0081000000000000L,0x0000000000000000L,0x0000010004000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_interface_definition15050 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0081000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interface_base_in_interface_definition15053 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_definition15067 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_definition15070 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENUM_in_enum_definition15092 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enum_definition15094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_enum_base_in_enum_definition15096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_enum_body_in_enum_definition15099 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DELEGATE_in_delegate_definition15121 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_return_type_in_delegate_definition15123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_delegate_definition15125 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_variant_type_parameter_list_in_delegate_definition15127 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_OPEN_PARENS_in_delegate_definition15141 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_definition15143 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_CLOSE_PARENS_in_delegate_definition15146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_definition15159 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EVENT_in_event_declaration215183 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration215185 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EVENT_in_event_declaration215198 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_event_declaration215200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_member_name_in_event_declaration215202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration215204 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DECL_in_field_declaration215226 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declarators_in_field_declaration215228 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_DECL_in_property_declaration215250 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_member_name_in_property_declaration215253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration215256 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_constant_declarators_in_constant_declaration215278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEXER_DECL_in_indexer_declaration215299 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declaration215301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration215304 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TILDE_in_destructor_definition15326 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_destructor_definition15328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_definition15330 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTRUCTOR_DECL_in_constructor_declaration215352 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_constructor_declaration215354 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declaration215356 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declaration215370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_body_in_constructor_declaration215374 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_METHOD_DECL_in_method_declaration215396 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_method_member_name_in_method_declaration215398 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_method_declaration215400 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_declaration215414 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_declaration215417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_method_body_in_method_declaration215431 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MEMBER_NAME_in_method_member_name15456 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAMESPACE_OR_TYPE_NAME_in_method_member_name15459 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_method_member_name2_in_method_member_name15461 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name215484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name215488 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_DOUBLE_COLON_in_method_member_name215490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name215492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_method_member_name215505 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_method_member_name215507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_method_member_name215509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_OPERATOR_in_operator_declaration215532 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_overloadable_operator_in_operator_declaration215534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_FIRST_OP_in_operator_declaration215537 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_operator_declaration215539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration215541 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SECOND_OP_in_operator_declaration215587 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_operator_declaration215589 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_operator_declaration215592 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration215606 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_METHOD_DECL_in_interface_method_declaration215629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MEMBER_NAME_in_interface_method_declaration215631 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_type_parameter_list_in_interface_method_declaration215633 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration215636 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration215650 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_DECL_in_interface_property_declaration215674 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MEMBER_NAME_in_interface_property_declaration215676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_property_declaration215678 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EVENT_in_interface_event_declaration215700 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration215702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interface_event_declaration215704 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDEXER_DECL_in_interface_indexer_declaration215726 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration215728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interface_accessors_in_interface_indexer_declaration215730 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_member_access215753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_argument_list_opt_in_member_access215755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_list_in_method_invocation215775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OBJECT_CREATION_EXPRESSION_in_object_creation_expression215797 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression215799 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression215802 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_method_invocation2_in_synpred38_CSharp4Tree1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_type_in_synpred91_CSharp4Tree2356 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_synpred91_CSharp4Tree2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_array_type_in_synpred94_CSharp4Tree2375 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_OPEN_BRACKET_in_synpred94_CSharp4Tree2377 = new BitSet(new long[]{0x0000000000000000L,0x0001080000000400L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_list_in_synpred94_CSharp4Tree2379 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_BRACKET_in_synpred94_CSharp4Tree2381 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_synpred94_CSharp4Tree2398 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_array_initializer_in_synpred94_CSharp4Tree2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_synpred229_CSharp4Tree4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_continuation_in_synpred230_CSharp4Tree4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_synpred231_CSharp4Tree4805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_synpred232_CSharp4Tree4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_synpred233_CSharp4Tree4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred234_CSharp4Tree4849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_combined_join_clause_in_synpred235_CSharp4Tree4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_direction_in_synpred241_CSharp4Tree5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ascending_contextual_keyword_in_synpred242_CSharp4Tree5197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_synpred243_CSharp4Tree5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_VARIABLE_DECLARATOR_in_synpred273_CSharp4Tree6007 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_local_variable_declarator_in_synpred273_CSharp4Tree6009 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_typed_member_declaration_in_synpred383_CSharp4Tree8808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration2_in_synpred387_CSharp4Tree8858 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_void_in_synpred387_CSharp4Tree8860 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_indexer_declaration2_in_synpred392_CSharp4Tree8940 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_interface_type_in_synpred392_CSharp4Tree8942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_synpred392_CSharp4Tree8944 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_indexer_declaration2_in_synpred395_CSharp4Tree8987 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred395_CSharp4Tree8989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_synpred445_CSharp4Tree9994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_accessor_body_in_synpred445_CSharp4Tree9996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020400L,0x00000000000000C0L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_synpred445_CSharp4Tree9998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_contextual_keyword_in_synpred468_CSharp4Tree10361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_block_in_synpred468_CSharp4Tree10363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_synpred468_CSharp4Tree10365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_synpred488_CSharp4Tree10769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_synpred489_CSharp4Tree10780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_method_declaration2_in_synpred599_CSharp4Tree12724 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_synpred599_CSharp4Tree12726 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_synpred599_CSharp4Tree12729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_in_synpred599_CSharp4Tree12732 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_interface_method_declaration2_in_synpred608_CSharp4Tree12787 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attributes_in_synpred608_CSharp4Tree12789 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NEW_in_synpred608_CSharp4Tree12792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_type_void_in_synpred608_CSharp4Tree12795 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_get_contextual_keyword_in_synpred621_CSharp4Tree12947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred621_CSharp4Tree12949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_attributes_in_synpred621_CSharp4Tree12952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_contextual_keyword_in_synpred621_CSharp4Tree12955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred621_CSharp4Tree12957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_arguments_in_synpred656_CSharp4Tree13767 = new BitSet(new long[]{0x0000000000000002L});

}