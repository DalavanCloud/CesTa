// $ANTLR 3.2 Sep 23, 2009 12:02:23 D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g 2010-05-22 11:43:29

package org.cesta.parsers.java;

import java.util.logging.Logger;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/**
 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.
 *
 * This grammar is based on grammar by Dieter Habelitz and contains only few small 
 * changes. 
 *
 * This grammar is published under the ...
 *
 * BSD licence
 * 
 * Copyright (c) 2007-2008 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "BLOCK_SCOPE", "CAST_EXPR", "CATCH_CLAUSE_LIST", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "CONSTRUCTOR_DECL", "ENUM_TOP_LEVEL_SCOPE", "EXPR", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "INTERFACE_TOP_LEVEL_SCOPE", "IMPLEMENTS_CLAUSE", "LABELED_STATEMENT", "LOCAL_MODIFIER_LIST", "JAVA_SOURCE", "METHOD_CALL", "MODIFIER_LIST", "PARENTESIZED_EXPR", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "QUALIFIED_TYPE_IDENT", "STATIC_ARRAY_CREATOR", "SUPER_CONSTRUCTOR_CALL", "SWITCH_BLOCK_LABEL_LIST", "THIS_CONSTRUCTOR_CALL", "THROWS_CLAUSE", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID_METHOD_DECL", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "NEWLINE", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=173;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int MOD_ASSIGN=33;
    public static final int CASE=58;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int DO=64;
    public static final int GENERIC_TYPE_PARAM_LIST=138;
    public static final int CLASS_INSTANCE_INITIALIZER=121;
    public static final int ARRAY_ELEMENT_ACCESS=115;
    public static final int FOR_CONDITION=129;
    public static final int NOT=34;
    public static final int VAR_DECLARATION=160;
    public static final int ANNOTATION_METHOD_DECL=109;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int UNARY_PLUS=159;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=157;
    public static final int RPAREN=43;
    public static final int INC=21;
    public static final int FINAL=70;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=170;
    public static final int FOR_UPDATE=132;
    public static final int FLOATING_POINT_LITERAL=168;
    public static final int CAST_EXPR=118;
    public static final int NOT_EQUAL=35;
    public static final int VOID_METHOD_DECL=163;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int ENUM_TOP_LEVEL_SCOPE=125;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=182;
    public static final int ANNOTATION_INIT_KEY_LIST=107;
    public static final int JAVA_ID_START=178;
    public static final int FLOAT_TYPE_SUFFIX=174;
    public static final int PRE_DEC=149;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=140;
    public static final int SWITCH_BLOCK_LABEL_LIST=154;
    public static final int LINE_COMMENT=183;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=117;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=106;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int VAR_DECLARATOR=161;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int STRICTFP=91;
    public static final int CHARACTER_LITERAL=169;
    public static final int PRE_INC=150;
    public static final int ANNOTATION_LIST=108;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=177;
    public static final int UNARY_MINUS=158;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INT=79;
    public static final int FORMAL_PARAM_VARARG_DECL=135;
    public static final int METHOD_CALL=144;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=139;
    public static final int SHIFT_LEFT=45;
    public static final int WS=180;
    public static final int SHIFT_RIGHT=47;
    public static final int FORMAL_PARAM_STD_DECL=134;
    public static final int LOCAL_MODIFIER_LIST=142;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int EXTENDS_BOUND_LIST=127;
    public static final int JAVA_SOURCE=143;
    public static final int CATCH=59;
    public static final int FALSE=69;
    public static final int INTEGER_TYPE_SUFFIX=172;
    public static final int DECIMAL_LITERAL=167;
    public static final int THROW=96;
    public static final int FOR_INIT=131;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=156;
    public static final int GREATER_OR_EQUAL=19;
    public static final int FOR=73;
    public static final int THIS_CONSTRUCTOR_CALL=155;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int POST_DEC=147;
    public static final int AND_ASSIGN=5;
    public static final int STATIC_ARRAY_CREATOR=152;
    public static final int MODIFIER_LIST=145;
    public static final int ANNOTATION_SCOPE=110;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=175;
    public static final int CONSTRUCTOR_DECL=124;
    public static final int LABELED_STATEMENT=141;
    public static final int UNICODE_ESCAPE=176;
    public static final int EXPR=126;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int CLASS_TOP_LEVEL_SCOPE=123;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=164;
    public static final int QUALIFIED_TYPE_IDENT=151;
    public static final int ARGUMENT_LIST=112;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=165;
    public static final int ANNOTATION_INIT_BLOCK=105;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=133;
    public static final int GENERIC_TYPE_ARG_LIST=137;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=111;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=179;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int PARENTESIZED_EXPR=146;
    public static final int CLASS_STATIC_INITIALIZER=122;
    public static final int ARRAY_DECLARATOR_LIST=114;
    public static final int LESS_OR_EQUAL=24;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=166;
    public static final int HEX_DIGIT=171;
    public static final int SHORT=89;
    public static final int INSTANCEOF=76;
    public static final int MINUS=30;
    public static final int EXTENDS_CLAUSE=128;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int VAR_DECLARATOR_LIST=162;
    public static final int ARRAY_DECLARATOR=113;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int NEWLINE=181;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=104;
    public static final int FUNCTION_METHOD_DECL=136;
    public static final int INTERFACE=77;
    public static final int POST_INC=148;
    public static final int DIV=13;
    public static final int CLASS_CONSTRUCTOR_CALL=120;
    public static final int LONG=80;
    public static final int FOR_EACH=130;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int ARRAY_INITIALIZER=116;
    public static final int CATCH_CLAUSE_LIST=119;
    public static final int SUPER_CONSTRUCTOR_CALL=153;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[358+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g"; }


        private boolean hasErrors = false;
        private boolean enableErrorMessageCollection = true;
    	
        private Logger logger = Logger.getLogger(this.getClass().getName());
        private List<String> errorMessages = new ArrayList<String>();
    	
        public void setLogger(Logger newLogger){
            logger = newLogger;
        }

        public void enableErrorMessageCollection(boolean pNewState) {
            enableErrorMessageCollection = pNewState;
        }

        @Override
        public void emitErrorMessage(String message) {
            hasErrors = true;
    	if (logger!=null) logger.warning(message);
            if (enableErrorMessageCollection) {
                errorMessages.add(message);			
            } else {
                super.emitErrorMessage(message);
            }
        }
        
        public List<String> getErrorMessages() {
            return errorMessages;
        }    
        public boolean hasErrors(){
            return hasErrors;
        }


    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "javaSource"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:271:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final JavaParser.javaSource_return javaSource() throws RecognitionException {
        JavaParser.javaSource_return retval = new JavaParser.javaSource_return();
        retval.start = input.LT(1);
        int javaSource_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.compilationUnit_return compilationUnit1 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:272:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:272:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource4504);
            compilationUnit1=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit1.getTree());


            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 273:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:273:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, javaSource_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "javaSource"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:276:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.annotationList_return annotationList2 = null;

        JavaParser.packageDeclaration_return packageDeclaration3 = null;

        JavaParser.importDeclaration_return importDeclaration4 = null;

        JavaParser.typeDecls_return typeDecls5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:277:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:277:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_compilationUnit4540);
            annotationList2=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList2.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:278:9: ( packageDeclaration )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==PACKAGE) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4551);
                    packageDeclaration3=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration3.getTree());

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:279:9: ( importDeclaration )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==IMPORT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit4563);
            	    importDeclaration4=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:280:9: ( typeDecls )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==AT||LA3_0==SEMI||LA3_0==ABSTRACT||LA3_0==CLASS||LA3_0==ENUM||LA3_0==FINAL||LA3_0==INTERFACE||LA3_0==NATIVE||(LA3_0>=PRIVATE && LA3_0<=PUBLIC)||(LA3_0>=STATIC && LA3_0<=STRICTFP)||LA3_0==SYNCHRONIZED||LA3_0==TRANSIENT||LA3_0==VOLATILE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit4575);
            	    typeDecls5=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecls5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDecls"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:283:1: typeDecls : ( typeDeclaration | SEMI );
    public final JavaParser.typeDecls_return typeDecls() throws RecognitionException {
        JavaParser.typeDecls_return retval = new JavaParser.typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI7=null;
        JavaParser.typeDeclaration_return typeDeclaration6 = null;


        CommonTree SEMI7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:284:5: ( typeDeclaration | SEMI )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==AT||LA4_0==ABSTRACT||LA4_0==CLASS||LA4_0==ENUM||LA4_0==FINAL||LA4_0==INTERFACE||LA4_0==NATIVE||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=STATIC && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||LA4_0==VOLATILE) ) {
                alt4=1;
            }
            else if ( (LA4_0==SEMI) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:284:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls4595);
                    typeDeclaration6=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration6.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:285:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI7=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls4605); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecls"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:288:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE8=null;
        Token SEMI10=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier9 = null;


        CommonTree PACKAGE8_tree=null;
        CommonTree SEMI10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:289:5: ( PACKAGE qualifiedIdentifier SEMI )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:289:9: PACKAGE qualifiedIdentifier SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            PACKAGE8=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration4625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE8_tree = (CommonTree)adaptor.create(PACKAGE8);
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE8_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration4628);
            qualifiedIdentifier9=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier9.getTree());
            SEMI10=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration4630); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:292:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT11=null;
        Token STATIC12=null;
        Token DOTSTAR14=null;
        Token SEMI15=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier13 = null;


        CommonTree IMPORT11_tree=null;
        CommonTree STATIC12_tree=null;
        CommonTree DOTSTAR14_tree=null;
        CommonTree SEMI15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:293:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:293:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT11=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration4656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT11_tree = (CommonTree)adaptor.create(IMPORT11);
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT11_tree, root_0);
            }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:293:17: ( STATIC )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==STATIC) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: STATIC
                    {
                    STATIC12=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration4659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC12_tree = (CommonTree)adaptor.create(STATIC12);
                    adaptor.addChild(root_0, STATIC12_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration4662);
            qualifiedIdentifier13=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier13.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:293:45: ( DOTSTAR )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DOTSTAR) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: DOTSTAR
                    {
                    DOTSTAR14=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration4664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTSTAR14_tree = (CommonTree)adaptor.create(DOTSTAR14);
                    adaptor.addChild(root_0, DOTSTAR14_tree);
                    }

                    }
                    break;

            }

            SEMI15=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration4667); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:296:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.modifierList_return modifierList16 = null;

        JavaParser.classTypeDeclaration_return classTypeDeclaration17 = null;

        JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration18 = null;

        JavaParser.enumTypeDeclaration_return enumTypeDeclaration19 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration20 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:297:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:297:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration4691);
            modifierList16=modifierList();

            state._fsp--;
            if (state.failed) return retval;
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:298:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt7=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt7=1;
                }
                break;
            case INTERFACE:
                {
                alt7=2;
                }
                break;
            case ENUM:
                {
                alt7=3;
                }
                break;
            case AT:
                {
                alt7=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:298:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration4706);
                    classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration17.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:299:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4721);
                    interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration18.getTree());

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:300:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration4736);
                    enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration19.getTree());

                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:301:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration4751);
                    annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classTypeDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:305:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JavaParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.classTypeDeclaration_return retval = new JavaParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS21=null;
        Token IDENT22=null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList23 = null;

        JavaParser.classExtendsClause_return classExtendsClause24 = null;

        JavaParser.implementsClause_return implementsClause25 = null;

        JavaParser.classBody_return classBody26 = null;


        CommonTree CLASS21_tree=null;
        CommonTree IDENT22_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:306:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:306:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS21=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration4786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS21);

            IDENT22=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration4788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT22);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:306:21: ( genericTypeParameterList )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LESS_THAN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration4790);
                    genericTypeParameterList23=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList23.getTree());

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:306:47: ( classExtendsClause )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==EXTENDS) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration4793);
                    classExtendsClause24=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause24.getTree());

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:306:67: ( implementsClause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPLEMENTS) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration4796);
                    implementsClause25=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause25.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration4799);
            classBody26=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody26.getTree());


            // AST REWRITE
            // elements: classBody, classExtendsClause, implementsClause, CLASS, genericTypeParameterList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 307:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:307:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:307:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:307:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:307:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:310:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final JavaParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
        JavaParser.classExtendsClause_return retval = new JavaParser.classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS27=null;
        JavaParser.type_return type28 = null;


        CommonTree EXTENDS27_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:311:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:311:9: EXTENDS type
            {
            EXTENDS27=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause4852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS27);

            pushFollow(FOLLOW_type_in_classExtendsClause4854);
            type28=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type28.getTree());


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 312:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:312:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:315:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JavaParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        JavaParser.interfaceExtendsClause_return retval = new JavaParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS29=null;
        JavaParser.typeList_return typeList30 = null;


        CommonTree EXTENDS29_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:316:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:316:9: EXTENDS typeList
            {
            EXTENDS29=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause4898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS29);

            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause4900);
            typeList30=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList30.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 317:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:317:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:320:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final JavaParser.implementsClause_return implementsClause() throws RecognitionException {
        JavaParser.implementsClause_return retval = new JavaParser.implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS31=null;
        JavaParser.typeList_return typeList32 = null;


        CommonTree IMPLEMENTS31_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:321:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:321:9: IMPLEMENTS typeList
            {
            IMPLEMENTS31=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause4944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS31);

            pushFollow(FOLLOW_typeList_in_implementsClause4946);
            typeList32=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList32.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 322:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:322:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameterList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:325:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JavaParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
        JavaParser.genericTypeParameterList_return retval = new JavaParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN33=null;
        Token COMMA35=null;
        JavaParser.genericTypeParameter_return genericTypeParameter34 = null;

        JavaParser.genericTypeParameter_return genericTypeParameter36 = null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing37 = null;


        CommonTree LESS_THAN33_tree=null;
        CommonTree COMMA35_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:326:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:326:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN33=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList4991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN33);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4993);
            genericTypeParameter34=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter34.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:326:40: ( COMMA genericTypeParameter )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:326:41: COMMA genericTypeParameter
            	    {
            	    COMMA35=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList4996); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA35);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4998);
            	    genericTypeParameter36=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter36.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5002);
            genericTypeListClosing37=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing37.getTree());


            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 327:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:327:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"), root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeListClosing"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:330:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final JavaParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
        JavaParser.genericTypeListClosing_return retval = new JavaParser.genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN38=null;
        Token SHIFT_RIGHT39=null;
        Token BIT_SHIFT_RIGHT40=null;

        CommonTree GREATER_THAN38_tree=null;
        CommonTree SHIFT_RIGHT39_tree=null;
        CommonTree BIT_SHIFT_RIGHT40_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:334:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt12=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA12_1 = input.LA(2);

                if ( (synpred14_Java()) ) {
                    alt12=1;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA12_2 = input.LA(2);

                if ( (synpred15_Java()) ) {
                    alt12=2;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA12_3 = input.LA(2);

                if ( (synpred16_Java()) ) {
                    alt12=3;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:334:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN38=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN38_tree = (CommonTree)adaptor.create(GREATER_THAN38);
                    adaptor.addChild(root_0, GREATER_THAN38_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:335:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT39=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT39_tree = (CommonTree)adaptor.create(SHIFT_RIGHT39);
                    adaptor.addChild(root_0, SHIFT_RIGHT39_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:336:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT40=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT40);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT40_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:338:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameter"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:340:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final JavaParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
        JavaParser.genericTypeParameter_return retval = new JavaParser.genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT41=null;
        JavaParser.bound_return bound42 = null;


        CommonTree IDENT41_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:341:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:341:9: IDENT ( bound )?
            {
            IDENT41=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT41);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:341:15: ( bound )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==EXTENDS) ) {
                int LA13_1 = input.LA(2);

                if ( (LA13_1==BOOLEAN||LA13_1==BYTE||LA13_1==CHAR||LA13_1==DOUBLE||LA13_1==FLOAT||(LA13_1>=INT && LA13_1<=LONG)||LA13_1==SHORT) ) {
                    int LA13_3 = input.LA(3);

                    if ( (synpred17_Java()) ) {
                        alt13=1;
                    }
                }
                else if ( (LA13_1==IDENT) ) {
                    int LA13_4 = input.LA(3);

                    if ( (synpred17_Java()) ) {
                        alt13=1;
                    }
                }
            }
            switch (alt13) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter5167);
                    bound42=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound42.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 342:9: -> ^( IDENT ( bound )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:342:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENT.nextNode(), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:342:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.nextTree());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:345:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS43=null;
        Token AND45=null;
        JavaParser.type_return type44 = null;

        JavaParser.type_return type46 = null;


        CommonTree EXTENDS43_tree=null;
        CommonTree AND45_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:346:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:346:9: EXTENDS type ( AND type )*
            {
            EXTENDS43=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound5213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS43);

            pushFollow(FOLLOW_type_in_bound5215);
            type44=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type44.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:346:22: ( AND type )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==AND) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:346:23: AND type
            	    {
            	    AND45=(Token)match(input,AND,FOLLOW_AND_in_bound5218); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND45);

            	    pushFollow(FOLLOW_type_in_bound5220);
            	    type46=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type46.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 347:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:347:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumTypeDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:350:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final JavaParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.enumTypeDeclaration_return retval = new JavaParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM47=null;
        Token IDENT48=null;
        JavaParser.implementsClause_return implementsClause49 = null;

        JavaParser.enumBody_return enumBody50 = null;


        CommonTree ENUM47_tree=null;
        CommonTree IDENT48_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:351:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:351:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM47=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration5261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM47);

            IDENT48=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration5263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT48);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:351:20: ( implementsClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IMPLEMENTS) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration5265);
                    implementsClause49=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause49.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration5268);
            enumBody50=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody50.getTree());


            // AST REWRITE
            // elements: ENUM, implementsClause, enumBody, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 352:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:352:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:352:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:355:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY51=null;
        Token RCURLY53=null;
        JavaParser.enumScopeDeclarations_return enumScopeDeclarations52 = null;


        CommonTree LCURLY51_tree=null;
        CommonTree RCURLY53_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:356:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:356:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY51=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody5315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY51);

            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5317);
            enumScopeDeclarations52=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations52.getTree());
            RCURLY53=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody5319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY53);



            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 357:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:357:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"), root_1);

                adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumScopeDeclarations"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:360:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final JavaParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
        JavaParser.enumScopeDeclarations_return retval = new JavaParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA55=null;
        JavaParser.enumConstants_return enumConstants54 = null;

        JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations56 = null;


        CommonTree COMMA55_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:361:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:361:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations5356);
            enumConstants54=enumConstants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants54.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:361:23: ( COMMA )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:361:24: COMMA
                    {
                    COMMA55=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations5359); if (state.failed) return retval;

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:361:33: ( enumClassScopeDeclarations )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==SEMI) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5364);
                    enumClassScopeDeclarations56=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations56.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumClassScopeDeclarations"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:364:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
        JavaParser.enumClassScopeDeclarations_return retval = new JavaParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI57=null;
        JavaParser.classScopeDeclarations_return classScopeDeclarations58 = null;


        CommonTree SEMI57_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:365:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:365:9: SEMI ( classScopeDeclarations )*
            {
            SEMI57=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations5384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI57);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:365:14: ( classScopeDeclarations )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==AT||LA18_0==LCURLY||LA18_0==LESS_THAN||LA18_0==SEMI||LA18_0==ABSTRACT||LA18_0==BOOLEAN||LA18_0==BYTE||(LA18_0>=CHAR && LA18_0<=CLASS)||LA18_0==DOUBLE||LA18_0==ENUM||LA18_0==FINAL||LA18_0==FLOAT||LA18_0==INTERFACE||(LA18_0>=INT && LA18_0<=NATIVE)||(LA18_0>=PRIVATE && LA18_0<=PUBLIC)||(LA18_0>=SHORT && LA18_0<=STRICTFP)||LA18_0==SYNCHRONIZED||LA18_0==TRANSIENT||(LA18_0>=VOID && LA18_0<=VOLATILE)||LA18_0==IDENT) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5386);
            	    classScopeDeclarations58=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations58.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 366:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:366:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:366:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:369:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA60=null;
        JavaParser.enumConstant_return enumConstant59 = null;

        JavaParser.enumConstant_return enumConstant61 = null;


        CommonTree COMMA60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:370:5: ( enumConstant ( COMMA enumConstant )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:370:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants5425);
            enumConstant59=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant59.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:370:22: ( COMMA enumConstant )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    int LA19_1 = input.LA(2);

                    if ( (LA19_1==AT||LA19_1==IDENT) ) {
                        alt19=1;
                    }


                }


                switch (alt19) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:370:23: COMMA enumConstant
            	    {
            	    COMMA60=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants5428); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants5431);
            	    enumConstant61=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant61.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:373:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT63=null;
        JavaParser.annotationList_return annotationList62 = null;

        JavaParser.arguments_return arguments64 = null;

        JavaParser.classBody_return classBody65 = null;


        CommonTree IDENT63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:374:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:374:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant5456);
            annotationList62=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList62.getTree());
            IDENT63=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant5458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT63_tree = (CommonTree)adaptor.create(IDENT63);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT63_tree, root_0);
            }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:374:31: ( arguments )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LPAREN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant5461);
                    arguments64=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments64.getTree());

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:374:42: ( classBody )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==LCURLY) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant5464);
                    classBody65=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody65.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceTypeDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:377:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.interfaceTypeDeclaration_return retval = new JavaParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE66=null;
        Token IDENT67=null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList68 = null;

        JavaParser.interfaceExtendsClause_return interfaceExtendsClause69 = null;

        JavaParser.interfaceBody_return interfaceBody70 = null;


        CommonTree INTERFACE66_tree=null;
        CommonTree IDENT67_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:378:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:378:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE66=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration5489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE66);

            IDENT67=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration5491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT67);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:378:25: ( genericTypeParameterList )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LESS_THAN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5493);
                    genericTypeParameterList68=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList68.getTree());

                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:378:51: ( interfaceExtendsClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==EXTENDS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5496);
                    interfaceExtendsClause69=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5499);
            interfaceBody70=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody70.getTree());


            // AST REWRITE
            // elements: genericTypeParameterList, IDENT, INTERFACE, interfaceExtendsClause, interfaceBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 379:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:379:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:379:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:379:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:382:1: typeList : type ( COMMA type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA72=null;
        JavaParser.type_return type71 = null;

        JavaParser.type_return type73 = null;


        CommonTree COMMA72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:383:5: ( type ( COMMA type )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:383:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5549);
            type71=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type71.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:383:14: ( COMMA type )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:383:15: COMMA type
            	    {
            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5552); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList5555);
            	    type73=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type73.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:386:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY74=null;
        Token RCURLY76=null;
        JavaParser.classScopeDeclarations_return classScopeDeclarations75 = null;


        CommonTree LCURLY74_tree=null;
        CommonTree RCURLY76_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:387:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:387:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY74=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody5580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY74);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:387:16: ( classScopeDeclarations )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==AT||LA25_0==LCURLY||LA25_0==LESS_THAN||LA25_0==SEMI||LA25_0==ABSTRACT||LA25_0==BOOLEAN||LA25_0==BYTE||(LA25_0>=CHAR && LA25_0<=CLASS)||LA25_0==DOUBLE||LA25_0==ENUM||LA25_0==FINAL||LA25_0==FLOAT||LA25_0==INTERFACE||(LA25_0>=INT && LA25_0<=NATIVE)||(LA25_0>=PRIVATE && LA25_0<=PUBLIC)||(LA25_0>=SHORT && LA25_0<=STRICTFP)||LA25_0==SYNCHRONIZED||LA25_0==TRANSIENT||(LA25_0>=VOID && LA25_0<=VOLATILE)||LA25_0==IDENT) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody5582);
            	    classScopeDeclarations75=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations75.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            RCURLY76=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody5585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY76);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 388:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:388:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:388:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:391:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY77=null;
        Token RCURLY79=null;
        JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations78 = null;


        CommonTree LCURLY77_tree=null;
        CommonTree RCURLY79_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:392:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:392:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY77=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody5627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY77);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:392:16: ( interfaceScopeDeclarations )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==AT||LA26_0==LESS_THAN||LA26_0==SEMI||LA26_0==ABSTRACT||LA26_0==BOOLEAN||LA26_0==BYTE||(LA26_0>=CHAR && LA26_0<=CLASS)||LA26_0==DOUBLE||LA26_0==ENUM||LA26_0==FINAL||LA26_0==FLOAT||LA26_0==INTERFACE||(LA26_0>=INT && LA26_0<=NATIVE)||(LA26_0>=PRIVATE && LA26_0<=PUBLIC)||(LA26_0>=SHORT && LA26_0<=STRICTFP)||LA26_0==SYNCHRONIZED||LA26_0==TRANSIENT||(LA26_0>=VOID && LA26_0<=VOLATILE)||LA26_0==IDENT) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5629);
            	    interfaceScopeDeclarations78=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations78.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            RCURLY79=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody5632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY79);



            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 393:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:393:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:393:75: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classScopeDeclarations"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:396:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JavaParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
        JavaParser.classScopeDeclarations_return retval = new JavaParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC81=null;
        Token IDENT86=null;
        Token SEMI91=null;
        Token VOID92=null;
        Token IDENT93=null;
        Token SEMI97=null;
        Token SEMI103=null;
        Token SEMI105=null;
        JavaParser.block_return block80 = null;

        JavaParser.block_return block82 = null;

        JavaParser.modifierList_return modifierList83 = null;

        JavaParser.genericTypeParameterList_return genericTypeParameterList84 = null;

        JavaParser.type_return type85 = null;

        JavaParser.formalParameterList_return formalParameterList87 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList88 = null;

        JavaParser.throwsClause_return throwsClause89 = null;

        JavaParser.block_return block90 = null;

        JavaParser.formalParameterList_return formalParameterList94 = null;

        JavaParser.throwsClause_return throwsClause95 = null;

        JavaParser.block_return block96 = null;

        JavaParser.formalParameterList_return formalParameterList98 = null;

        JavaParser.throwsClause_return throwsClause99 = null;

        JavaParser.block_return block100 = null;

        JavaParser.type_return type101 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList102 = null;

        JavaParser.typeDeclaration_return typeDeclaration104 = null;


        CommonTree ident_tree=null;
        CommonTree STATIC81_tree=null;
        CommonTree IDENT86_tree=null;
        CommonTree SEMI91_tree=null;
        CommonTree VOID92_tree=null;
        CommonTree IDENT93_tree=null;
        CommonTree SEMI97_tree=null;
        CommonTree SEMI103_tree=null;
        CommonTree SEMI105_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:397:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt36=5;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:397:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5670);
                    block80=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block80.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 397:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:397:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:398:9: STATIC block
                    {
                    STATIC81=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations5699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC81);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations5701);
                    block82=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block82.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 398:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:398:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:399:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5724);
                    modifierList83=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList83.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt35=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt35=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA35_2 = input.LA(2);

                        if ( (synpred42_Java()) ) {
                            alt35=1;
                        }
                        else if ( (true) ) {
                            alt35=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 35, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA35_3 = input.LA(2);

                        if ( (synpred42_Java()) ) {
                            alt35=1;
                        }
                        else if ( (true) ) {
                            alt35=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 35, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 0, input);

                        throw nvae;
                    }

                    switch (alt35) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==LESS_THAN) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5738);
                                    genericTypeParameterList84=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList84.getTree());

                                    }
                                    break;

                            }

                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt34=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt34=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA34_2 = input.LA(2);

                                if ( (LA34_2==LPAREN) ) {
                                    alt34=3;
                                }
                                else if ( (LA34_2==DOT||LA34_2==LBRACK||LA34_2==LESS_THAN||LA34_2==IDENT) ) {
                                    alt34=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 34, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt34=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 34, 0, input);

                                throw nvae;
                            }

                            switch (alt34) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5757);
                                    type85=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type85.getTree());
                                    IDENT86=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5759); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT86);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5761);
                                    formalParameterList87=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList87.getTree());
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:48: ( arrayDeclaratorList )?
                                    int alt28=2;
                                    int LA28_0 = input.LA(1);

                                    if ( (LA28_0==LBRACK) ) {
                                        alt28=1;
                                    }
                                    switch (alt28) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5763);
                                            arrayDeclaratorList88=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList88.getTree());

                                            }
                                            break;

                                    }

                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:69: ( throwsClause )?
                                    int alt29=2;
                                    int LA29_0 = input.LA(1);

                                    if ( (LA29_0==THROWS) ) {
                                        alt29=1;
                                    }
                                    switch (alt29) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5766);
                                            throwsClause89=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause89.getTree());

                                            }
                                            break;

                                    }

                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:83: ( block | SEMI )
                                    int alt30=2;
                                    int LA30_0 = input.LA(1);

                                    if ( (LA30_0==LCURLY) ) {
                                        alt30=1;
                                    }
                                    else if ( (LA30_0==SEMI) ) {
                                        alt30=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 30, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt30) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5770);
                                            block90=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block90.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:92: SEMI
                                            {
                                            SEMI91=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5774); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI91);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: formalParameterList, IDENT, block, type, genericTypeParameterList, modifierList, throwsClause, arrayDeclaratorList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 402:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:402:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:402:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:402:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:402:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:402:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID92=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations5836); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID92);

                                    IDENT93=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5838); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT93);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5840);
                                    formalParameterList94=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList94.getTree());
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:48: ( throwsClause )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( (LA31_0==THROWS) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5842);
                                            throwsClause95=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause95.getTree());

                                            }
                                            break;

                                    }

                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:62: ( block | SEMI )
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==LCURLY) ) {
                                        alt32=1;
                                    }
                                    else if ( (LA32_0==SEMI) ) {
                                        alt32=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 32, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5846);
                                            block96=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block96.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:71: SEMI
                                            {
                                            SEMI97=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5850); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI97);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: formalParameterList, IDENT, throwsClause, block, modifierList, genericTypeParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 404:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:404:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:404:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:404:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:404:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5909); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5911);
                                    formalParameterList98=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList98.getTree());
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:49: ( throwsClause )?
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==THROWS) ) {
                                        alt33=1;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5913);
                                            throwsClause99=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause99.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations5916);
                                    block100=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block100.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, throwsClause, block, formalParameterList, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 406:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:406:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:406:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:406:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:408:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations5980);
                            type101=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type101.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations5982);
                            classFieldDeclaratorList102=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList102.getTree());
                            SEMI103=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI103);



                            // AST REWRITE
                            // elements: classFieldDeclaratorList, modifierList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 409:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:409:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:411:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6029);
                    typeDeclaration104=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration104.getTree());

                    }
                    break;
                case 5 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:412:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI105=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6039); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceScopeDeclarations"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:415:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
        JavaParser.interfaceScopeDeclarations_return retval = new JavaParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT109=null;
        Token SEMI113=null;
        Token VOID114=null;
        Token IDENT115=null;
        Token SEMI118=null;
        Token SEMI121=null;
        Token SEMI123=null;
        JavaParser.modifierList_return modifierList106 = null;

        JavaParser.genericTypeParameterList_return genericTypeParameterList107 = null;

        JavaParser.type_return type108 = null;

        JavaParser.formalParameterList_return formalParameterList110 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList111 = null;

        JavaParser.throwsClause_return throwsClause112 = null;

        JavaParser.formalParameterList_return formalParameterList116 = null;

        JavaParser.throwsClause_return throwsClause117 = null;

        JavaParser.type_return type119 = null;

        JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList120 = null;

        JavaParser.typeDeclaration_return typeDeclaration122 = null;


        CommonTree IDENT109_tree=null;
        CommonTree SEMI113_tree=null;
        CommonTree VOID114_tree=null;
        CommonTree IDENT115_tree=null;
        CommonTree SEMI118_tree=null;
        CommonTree SEMI121_tree=null;
        CommonTree SEMI123_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:416:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt43=3;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:416:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6071);
                    modifierList106=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList106.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt42=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt42=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA42_2 = input.LA(2);

                        if ( (synpred50_Java()) ) {
                            alt42=1;
                        }
                        else if ( (true) ) {
                            alt42=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 42, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA42_3 = input.LA(2);

                        if ( (synpred50_Java()) ) {
                            alt42=1;
                        }
                        else if ( (true) ) {
                            alt42=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 42, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }

                    switch (alt42) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )?
                            int alt37=2;
                            int LA37_0 = input.LA(1);

                            if ( (LA37_0==LESS_THAN) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6085);
                                    genericTypeParameterList107=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList107.getTree());

                                    }
                                    break;

                            }

                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==BOOLEAN||LA41_0==BYTE||LA41_0==CHAR||LA41_0==DOUBLE||LA41_0==FLOAT||(LA41_0>=INT && LA41_0<=LONG)||LA41_0==SHORT||LA41_0==IDENT) ) {
                                alt41=1;
                            }
                            else if ( (LA41_0==VOID) ) {
                                alt41=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 41, 0, input);

                                throw nvae;
                            }
                            switch (alt41) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6104);
                                    type108=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type108.getTree());
                                    IDENT109=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6106); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT109);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6108);
                                    formalParameterList110=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList110.getTree());
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:48: ( arrayDeclaratorList )?
                                    int alt38=2;
                                    int LA38_0 = input.LA(1);

                                    if ( (LA38_0==LBRACK) ) {
                                        alt38=1;
                                    }
                                    switch (alt38) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6110);
                                            arrayDeclaratorList111=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList111.getTree());

                                            }
                                            break;

                                    }

                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:69: ( throwsClause )?
                                    int alt39=2;
                                    int LA39_0 = input.LA(1);

                                    if ( (LA39_0==THROWS) ) {
                                        alt39=1;
                                    }
                                    switch (alt39) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6113);
                                            throwsClause112=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause112.getTree());

                                            }
                                            break;

                                    }

                                    SEMI113=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6116); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI113);



                                    // AST REWRITE
                                    // elements: arrayDeclaratorList, modifierList, throwsClause, IDENT, genericTypeParameterList, type, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 419:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:419:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:419:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:419:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:419:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID114=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations6174); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID114);

                                    IDENT115=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6176); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT115);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6178);
                                    formalParameterList116=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList116.getTree());
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:48: ( throwsClause )?
                                    int alt40=2;
                                    int LA40_0 = input.LA(1);

                                    if ( (LA40_0==THROWS) ) {
                                        alt40=1;
                                    }
                                    switch (alt40) {
                                        case 1 :
                                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6180);
                                            throwsClause117=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause117.getTree());

                                            }
                                            break;

                                    }

                                    SEMI118=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6183); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI118);



                                    // AST REWRITE
                                    // elements: modifierList, IDENT, genericTypeParameterList, throwsClause, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 421:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:421:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:421:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:421:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:423:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6246);
                            type119=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type119.getTree());
                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6248);
                            interfaceFieldDeclaratorList120=interfaceFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList120.getTree());
                            SEMI121=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6250); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI121);



                            // AST REWRITE
                            // elements: modifierList, type, interfaceFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 424:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:424:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:426:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6295);
                    typeDeclaration122=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration122.getTree());

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:427:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI123=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6305); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclaratorList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:430:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
        JavaParser.classFieldDeclaratorList_return retval = new JavaParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA125=null;
        JavaParser.classFieldDeclarator_return classFieldDeclarator124 = null;

        JavaParser.classFieldDeclarator_return classFieldDeclarator126 = null;


        CommonTree COMMA125_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:431:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:431:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6325);
            classFieldDeclarator124=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator124.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:431:30: ( COMMA classFieldDeclarator )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:431:31: COMMA classFieldDeclarator
            	    {
            	    COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList6328); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA125);

            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6330);
            	    classFieldDeclarator126=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator126.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);



            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 432:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:432:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclarator"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:435:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final JavaParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
        JavaParser.classFieldDeclarator_return retval = new JavaParser.classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN128=null;
        JavaParser.variableDeclaratorId_return variableDeclaratorId127 = null;

        JavaParser.variableInitializer_return variableInitializer129 = null;


        CommonTree ASSIGN128_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:436:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:436:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator6369);
            variableDeclaratorId127=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId127.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:436:30: ( ASSIGN variableInitializer )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==ASSIGN) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:436:31: ASSIGN variableInitializer
                    {
                    ASSIGN128=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator6372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN128);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator6374);
                    variableInitializer129=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer129.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableDeclaratorId, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 437:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:437:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:437:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"

    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaratorList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:440:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
        JavaParser.interfaceFieldDeclaratorList_return retval = new JavaParser.interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA131=null;
        JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator130 = null;

        JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator132 = null;


        CommonTree COMMA131_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:441:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:441:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6419);
            interfaceFieldDeclarator130=interfaceFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator130.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:441:34: ( COMMA interfaceFieldDeclarator )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==COMMA) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:441:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList6422); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA131);

            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6424);
            	    interfaceFieldDeclarator132=interfaceFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator132.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);



            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 442:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:442:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaratorList"

    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclarator"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:445:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
        JavaParser.interfaceFieldDeclarator_return retval = new JavaParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN134=null;
        JavaParser.variableDeclaratorId_return variableDeclaratorId133 = null;

        JavaParser.variableInitializer_return variableInitializer135 = null;


        CommonTree ASSIGN134_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:446:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:446:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6463);
            variableDeclaratorId133=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId133.getTree());
            ASSIGN134=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator6465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN134);

            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6467);
            variableInitializer135=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer135.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 447:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:447:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, interfaceFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:450:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT136=null;
        JavaParser.arrayDeclaratorList_return arrayDeclaratorList137 = null;


        CommonTree IDENT136_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:451:5: ( IDENT ( arrayDeclaratorList )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:451:9: IDENT ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT136=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId6509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT136_tree = (CommonTree)adaptor.create(IDENT136);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT136_tree, root_0);
            }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:451:16: ( arrayDeclaratorList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LBRACK) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6512);
                    arrayDeclaratorList137=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:454:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer138 = null;

        JavaParser.expression_return expression139 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:455:5: ( arrayInitializer | expression )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LCURLY) ) {
                alt48=1;
            }
            else if ( (LA48_0==DEC||LA48_0==INC||LA48_0==LESS_THAN||LA48_0==LOGICAL_NOT||(LA48_0>=LPAREN && LA48_0<=MINUS)||LA48_0==NOT||LA48_0==PLUS||LA48_0==BOOLEAN||LA48_0==BYTE||LA48_0==CHAR||LA48_0==DOUBLE||LA48_0==FALSE||LA48_0==FLOAT||(LA48_0>=INT && LA48_0<=LONG)||(LA48_0>=NEW && LA48_0<=NULL)||LA48_0==SHORT||LA48_0==SUPER||LA48_0==THIS||LA48_0==TRUE||LA48_0==VOID||(LA48_0>=IDENT && LA48_0<=STRING_LITERAL)) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:455:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6532);
                    arrayInitializer138=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer138.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:456:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6542);
                    expression139=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclarator"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:459:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JavaParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
        JavaParser.arrayDeclarator_return retval = new JavaParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK140=null;
        Token RBRACK141=null;

        CommonTree LBRACK140_tree=null;
        CommonTree RBRACK141_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:460:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:460:9: LBRACK RBRACK
            {
            LBRACK140=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator6561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK140);

            RBRACK141=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator6563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK141);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 461:9: -> ^( ARRAY_DECLARATOR )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:461:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclaratorList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:464:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JavaParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
        JavaParser.arrayDeclaratorList_return retval = new JavaParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator142 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:465:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:465:9: ( arrayDeclarator )+
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:465:9: ( arrayDeclarator )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==LBRACK) ) {
                    int LA49_2 = input.LA(2);

                    if ( (synpred58_Java()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6597);
            	    arrayDeclarator142=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator142.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);



            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 466:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:466:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:469:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY143=null;
        Token COMMA145=null;
        Token COMMA147=null;
        Token RCURLY148=null;
        JavaParser.variableInitializer_return variableInitializer144 = null;

        JavaParser.variableInitializer_return variableInitializer146 = null;


        CommonTree LCURLY143_tree=null;
        CommonTree COMMA145_tree=null;
        CommonTree COMMA147_tree=null;
        CommonTree RCURLY148_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY143=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer6642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY143);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==DEC||LA52_0==INC||LA52_0==LCURLY||LA52_0==LESS_THAN||LA52_0==LOGICAL_NOT||(LA52_0>=LPAREN && LA52_0<=MINUS)||LA52_0==NOT||LA52_0==PLUS||LA52_0==BOOLEAN||LA52_0==BYTE||LA52_0==CHAR||LA52_0==DOUBLE||LA52_0==FALSE||LA52_0==FLOAT||(LA52_0>=INT && LA52_0<=LONG)||(LA52_0>=NEW && LA52_0<=NULL)||LA52_0==SHORT||LA52_0==SUPER||LA52_0==THIS||LA52_0==TRUE||LA52_0==VOID||(LA52_0>=IDENT && LA52_0<=STRING_LITERAL)) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6645);
                    variableInitializer144=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer144.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:37: ( COMMA variableInitializer )*
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==COMMA) ) {
                            int LA50_1 = input.LA(2);

                            if ( (LA50_1==DEC||LA50_1==INC||LA50_1==LCURLY||LA50_1==LESS_THAN||LA50_1==LOGICAL_NOT||(LA50_1>=LPAREN && LA50_1<=MINUS)||LA50_1==NOT||LA50_1==PLUS||LA50_1==BOOLEAN||LA50_1==BYTE||LA50_1==CHAR||LA50_1==DOUBLE||LA50_1==FALSE||LA50_1==FLOAT||(LA50_1>=INT && LA50_1<=LONG)||(LA50_1>=NEW && LA50_1<=NULL)||LA50_1==SHORT||LA50_1==SUPER||LA50_1==THIS||LA50_1==TRUE||LA50_1==VOID||(LA50_1>=IDENT && LA50_1<=STRING_LITERAL)) ) {
                                alt50=1;
                            }


                        }


                        switch (alt50) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:38: COMMA variableInitializer
                    	    {
                    	    COMMA145=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6648); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA145);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6650);
                    	    variableInitializer146=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer146.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop50;
                        }
                    } while (true);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:470:66: ( COMMA )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==COMMA) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: COMMA
                            {
                            COMMA147=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA147);


                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY148=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer6659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY148);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 471:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:471:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_INITIALIZER, LCURLY143, "ARRAY_INITIALIZER"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:471:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwsClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:474:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final JavaParser.throwsClause_return throwsClause() throws RecognitionException {
        JavaParser.throwsClause_return retval = new JavaParser.throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS149=null;
        JavaParser.qualifiedIdentList_return qualifiedIdentList150 = null;


        CommonTree THROWS149_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:475:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:475:9: THROWS qualifiedIdentList
            {
            THROWS149=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause6697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS149);

            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause6699);
            qualifiedIdentList150=qualifiedIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList150.getTree());


            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 476:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:476:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS_CLAUSE, THROWS149, "THROWS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwsClause"

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifierList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:479:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final JavaParser.modifierList_return modifierList() throws RecognitionException {
        JavaParser.modifierList_return retval = new JavaParser.modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.modifier_return modifier151 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:480:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:480:9: ( modifier )*
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:480:9: ( modifier )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==AT) ) {
                    int LA53_2 = input.LA(2);

                    if ( (LA53_2==IDENT) ) {
                        alt53=1;
                    }


                }
                else if ( (LA53_0==ABSTRACT||LA53_0==FINAL||LA53_0==NATIVE||(LA53_0>=PRIVATE && LA53_0<=PUBLIC)||(LA53_0>=STATIC && LA53_0<=STRICTFP)||LA53_0==SYNCHRONIZED||LA53_0==TRANSIENT||LA53_0==VOLATILE) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList6736);
            	    modifier151=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier151.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 481:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:481:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:481:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifierList"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:484:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PUBLIC152=null;
        Token PROTECTED153=null;
        Token PRIVATE154=null;
        Token STATIC155=null;
        Token ABSTRACT156=null;
        Token NATIVE157=null;
        Token SYNCHRONIZED158=null;
        Token TRANSIENT159=null;
        Token VOLATILE160=null;
        Token STRICTFP161=null;
        JavaParser.localModifier_return localModifier162 = null;


        CommonTree PUBLIC152_tree=null;
        CommonTree PROTECTED153_tree=null;
        CommonTree PRIVATE154_tree=null;
        CommonTree STATIC155_tree=null;
        CommonTree ABSTRACT156_tree=null;
        CommonTree NATIVE157_tree=null;
        CommonTree SYNCHRONIZED158_tree=null;
        CommonTree TRANSIENT159_tree=null;
        CommonTree VOLATILE160_tree=null;
        CommonTree STRICTFP161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:485:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt54=11;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:485:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC152=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier6777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC152_tree = (CommonTree)adaptor.create(PUBLIC152);
                    adaptor.addChild(root_0, PUBLIC152_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:486:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED153=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier6787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED153_tree = (CommonTree)adaptor.create(PROTECTED153);
                    adaptor.addChild(root_0, PROTECTED153_tree);
                    }

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:487:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE154=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier6797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE154_tree = (CommonTree)adaptor.create(PRIVATE154);
                    adaptor.addChild(root_0, PRIVATE154_tree);
                    }

                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:488:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC155=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier6807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC155_tree = (CommonTree)adaptor.create(STATIC155);
                    adaptor.addChild(root_0, STATIC155_tree);
                    }

                    }
                    break;
                case 5 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:489:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT156=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier6817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT156_tree = (CommonTree)adaptor.create(ABSTRACT156);
                    adaptor.addChild(root_0, ABSTRACT156_tree);
                    }

                    }
                    break;
                case 6 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:490:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE157=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier6827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE157_tree = (CommonTree)adaptor.create(NATIVE157);
                    adaptor.addChild(root_0, NATIVE157_tree);
                    }

                    }
                    break;
                case 7 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:491:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED158=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier6837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED158_tree = (CommonTree)adaptor.create(SYNCHRONIZED158);
                    adaptor.addChild(root_0, SYNCHRONIZED158_tree);
                    }

                    }
                    break;
                case 8 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:492:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT159=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier6847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT159_tree = (CommonTree)adaptor.create(TRANSIENT159);
                    adaptor.addChild(root_0, TRANSIENT159_tree);
                    }

                    }
                    break;
                case 9 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:493:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE160=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier6857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE160_tree = (CommonTree)adaptor.create(VOLATILE160);
                    adaptor.addChild(root_0, VOLATILE160_tree);
                    }

                    }
                    break;
                case 10 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:494:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP161=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier6867); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP161_tree = (CommonTree)adaptor.create(STRICTFP161);
                    adaptor.addChild(root_0, STRICTFP161_tree);
                    }

                    }
                    break;
                case 11 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:495:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier6877);
                    localModifier162=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier162.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifierList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:498:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final JavaParser.localModifierList_return localModifierList() throws RecognitionException {
        JavaParser.localModifierList_return retval = new JavaParser.localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.localModifier_return localModifier163 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:499:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:499:9: ( localModifier )*
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:499:9: ( localModifier )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==AT||LA55_0==FINAL) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList6896);
            	    localModifier163=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier163.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 500:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:500:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:500:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifierList"

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifier"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:503:1: localModifier : ( FINAL | annotation );
    public final JavaParser.localModifier_return localModifier() throws RecognitionException {
        JavaParser.localModifier_return retval = new JavaParser.localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL164=null;
        JavaParser.annotation_return annotation165 = null;


        CommonTree FINAL164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:504:5: ( FINAL | annotation )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==FINAL) ) {
                alt56=1;
            }
            else if ( (LA56_0==AT) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:504:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL164=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier6937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL164_tree = (CommonTree)adaptor.create(FINAL164);
                    adaptor.addChild(root_0, FINAL164_tree);
                    }

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:505:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier6947);
                    annotation165=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation165.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifier"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:508:1: type : ( simpleType | objectType );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.simpleType_return simpleType166 = null;

        JavaParser.objectType_return objectType167 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:509:5: ( simpleType | objectType )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==BOOLEAN||LA57_0==BYTE||LA57_0==CHAR||LA57_0==DOUBLE||LA57_0==FLOAT||(LA57_0>=INT && LA57_0<=LONG)||LA57_0==SHORT) ) {
                alt57=1;
            }
            else if ( (LA57_0==IDENT) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:509:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type6966);
                    simpleType166=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType166.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:510:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type6976);
                    objectType167=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleType"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:513:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final JavaParser.simpleType_return simpleType() throws RecognitionException {
        JavaParser.simpleType_return retval = new JavaParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.primitiveType_return primitiveType168 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList169 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:514:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:514:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType6996);
            primitiveType168=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType168.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:514:23: ( arrayDeclaratorList )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LBRACK) ) {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==RBRACK) ) {
                    int LA58_3 = input.LA(3);

                    if ( (synpred76_Java()) ) {
                        alt58=1;
                    }
                }
            }
            switch (alt58) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType6998);
                    arrayDeclaratorList169=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList169.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: primitiveType, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 515:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:515:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:515:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectType"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:518:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final JavaParser.objectType_return objectType() throws RecognitionException {
        JavaParser.objectType_return retval = new JavaParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent170 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList171 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:519:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:519:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7045);
            qualifiedTypeIdent170=qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent170.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:519:28: ( arrayDeclaratorList )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==LBRACK) ) {
                int LA59_1 = input.LA(2);

                if ( (synpred77_Java()) ) {
                    alt59=1;
                }
            }
            switch (alt59) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7047);
                    arrayDeclaratorList171=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList171.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 520:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:520:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:520:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectTypeSimplified"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:523:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JavaParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
        JavaParser.objectTypeSimplified_return retval = new JavaParser.objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified172 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList173 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:524:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:524:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7087);
            qualifiedTypeIdentSimplified172=qualifiedTypeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified172.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:524:38: ( arrayDeclaratorList )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LBRACK) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7089);
                    arrayDeclaratorList173=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifiedTypeIdentSimplified, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 525:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:525:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:525:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, objectTypeSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdent"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:528:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
        JavaParser.qualifiedTypeIdent_return retval = new JavaParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT175=null;
        JavaParser.typeIdent_return typeIdent174 = null;

        JavaParser.typeIdent_return typeIdent176 = null;


        CommonTree DOT175_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7129);
            typeIdent174=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent174.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:19: ( DOT typeIdent )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==DOT) ) {
                    int LA61_2 = input.LA(2);

                    if ( (synpred79_Java()) ) {
                        alt61=1;
                    }


                }


                switch (alt61) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:20: DOT typeIdent
            	    {
            	    DOT175=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT175);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7134);
            	    typeIdent176=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent176.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 530:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:530:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdentSimplified"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:533:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
        JavaParser.qualifiedTypeIdentSimplified_return retval = new JavaParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT178=null;
        JavaParser.typeIdentSimplified_return typeIdentSimplified177 = null;

        JavaParser.typeIdentSimplified_return typeIdentSimplified179 = null;


        CommonTree DOT178_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:534:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:534:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7174);
            typeIdentSimplified177=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified177.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:534:29: ( DOT typeIdentSimplified )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==DOT) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:534:30: DOT typeIdentSimplified
            	    {
            	    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified7177); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT178);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7179);
            	    typeIdentSimplified179=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified179.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 535:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:535:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:538:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
    public final JavaParser.typeIdent_return typeIdent() throws RecognitionException {
        JavaParser.typeIdent_return retval = new JavaParser.typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT180=null;
        JavaParser.genericTypeArgumentList_return genericTypeArgumentList181 = null;


        CommonTree IDENT180_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:539:5: ( IDENT ( genericTypeArgumentList )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:539:9: IDENT ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT180=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent7219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT180_tree = (CommonTree)adaptor.create(IDENT180);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT180_tree, root_0);
            }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:539:16: ( genericTypeArgumentList )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LESS_THAN) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7222);
                    genericTypeArgumentList181=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList181.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdentSimplified"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:542:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? ;
    public final JavaParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
        JavaParser.typeIdentSimplified_return retval = new JavaParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT182=null;
        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified183 = null;


        CommonTree IDENT182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:543:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:543:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT182=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified7242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT182_tree = (CommonTree)adaptor.create(IDENT182);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT182_tree, root_0);
            }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:543:16: ( genericTypeArgumentListSimplified )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LESS_THAN) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7245);
                    genericTypeArgumentListSimplified183=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified183.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:546:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set184=null;

        CommonTree set184_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:547:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set184=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set184));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:557:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JavaParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
        JavaParser.genericTypeArgumentList_return retval = new JavaParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN185=null;
        Token COMMA187=null;
        JavaParser.genericTypeArgument_return genericTypeArgument186 = null;

        JavaParser.genericTypeArgument_return genericTypeArgument188 = null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing189 = null;


        CommonTree LESS_THAN185_tree=null;
        CommonTree COMMA187_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN185=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList7354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN185);

            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7356);
            genericTypeArgument186=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument186.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:39: ( COMMA genericTypeArgument )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==COMMA) ) {
                    int LA65_2 = input.LA(2);

                    if ( (synpred90_Java()) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:40: COMMA genericTypeArgument
            	    {
            	    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList7359); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA187);

            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7361);
            	    genericTypeArgument188=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument188.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7365);
            genericTypeListClosing189=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing189.getTree());


            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 559:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:559:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN185, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgument"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:562:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JavaParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
        JavaParser.genericTypeArgument_return retval = new JavaParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION191=null;
        JavaParser.type_return type190 = null;

        JavaParser.genericWildcardBoundType_return genericWildcardBoundType192 = null;


        CommonTree QUESTION191_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:563:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==BOOLEAN||LA67_0==BYTE||LA67_0==CHAR||LA67_0==DOUBLE||LA67_0==FLOAT||(LA67_0>=INT && LA67_0<=LONG)||LA67_0==SHORT||LA67_0==IDENT) ) {
                alt67=1;
            }
            else if ( (LA67_0==QUESTION) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:563:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument7403);
                    type190=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type190.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:564:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION191=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument7413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION191);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:564:18: ( genericWildcardBoundType )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==EXTENDS) ) {
                        int LA66_1 = input.LA(2);

                        if ( (LA66_1==BOOLEAN||LA66_1==BYTE||LA66_1==CHAR||LA66_1==DOUBLE||LA66_1==FLOAT||(LA66_1>=INT && LA66_1<=LONG)||LA66_1==SHORT) ) {
                            int LA66_4 = input.LA(3);

                            if ( (synpred92_Java()) ) {
                                alt66=1;
                            }
                        }
                        else if ( (LA66_1==IDENT) ) {
                            int LA66_5 = input.LA(3);

                            if ( (synpred92_Java()) ) {
                                alt66=1;
                            }
                        }
                    }
                    else if ( (LA66_0==SUPER) ) {
                        int LA66_3 = input.LA(2);

                        if ( (LA66_3==BOOLEAN||LA66_3==BYTE||LA66_3==CHAR||LA66_3==DOUBLE||LA66_3==FLOAT||(LA66_3>=INT && LA66_3<=LONG)||LA66_3==SHORT||LA66_3==IDENT) ) {
                            alt66=1;
                        }
                    }
                    switch (alt66) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7415);
                            genericWildcardBoundType192=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType192.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: QUESTION, genericWildcardBoundType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 565:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:565:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:565:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericWildcardBoundType"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:568:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final JavaParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
        JavaParser.genericWildcardBoundType_return retval = new JavaParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set193=null;
        JavaParser.type_return type194 = null;


        CommonTree set193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:569:5: ( ( EXTENDS | SUPER ) type )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:569:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set193=(Token)input.LT(1);
            set193=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set193), root_0);
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType7466);
            type194=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type194.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentListSimplified"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:572:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
        JavaParser.genericTypeArgumentListSimplified_return retval = new JavaParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN195=null;
        Token COMMA197=null;
        JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified196 = null;

        JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified198 = null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing199 = null;


        CommonTree LESS_THAN195_tree=null;
        CommonTree COMMA197_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:573:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:573:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN195=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN195);

            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7487);
            genericTypeArgumentSimplified196=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified196.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:573:49: ( COMMA genericTypeArgumentSimplified )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:573:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified7490); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);

            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7492);
            	    genericTypeArgumentSimplified198=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified198.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7496);
            genericTypeListClosing199=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing199.getTree());


            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 574:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:574:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentSimplified"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:577:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
        JavaParser.genericTypeArgumentSimplified_return retval = new JavaParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION201=null;
        JavaParser.type_return type200 = null;


        CommonTree QUESTION201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:578:5: ( type | QUESTION )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==BOOLEAN||LA69_0==BYTE||LA69_0==CHAR||LA69_0==DOUBLE||LA69_0==FLOAT||(LA69_0>=INT && LA69_0<=LONG)||LA69_0==SHORT||LA69_0==IDENT) ) {
                alt69=1;
            }
            else if ( (LA69_0==QUESTION) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:578:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified7538);
                    type200=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type200.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:579:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION201=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified7548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION201_tree = (CommonTree)adaptor.create(QUESTION201);
                    adaptor.addChild(root_0, QUESTION201_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"

    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:582:1: qualifiedIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* ;
    public final JavaParser.qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
        JavaParser.qualifiedIdentList_return retval = new JavaParser.qualifiedIdentList_return();
        retval.start = input.LT(1);
        int qualifiedIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA203=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier202 = null;

        JavaParser.qualifiedIdentifier_return qualifiedIdentifier204 = null;


        CommonTree COMMA203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:583:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:583:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7571);
            qualifiedIdentifier202=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier202.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:583:29: ( COMMA qualifiedIdentifier )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:583:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA203=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList7574); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7577);
            	    qualifiedIdentifier204=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier204.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, qualifiedIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentList"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:586:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final JavaParser.formalParameterList_return formalParameterList() throws RecognitionException {
        JavaParser.formalParameterList_return retval = new JavaParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN205=null;
        Token COMMA207=null;
        Token COMMA209=null;
        Token RPAREN212=null;
        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl206 = null;

        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl208 = null;

        JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl210 = null;

        JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl211 = null;


        CommonTree LPAREN205_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree COMMA209_tree=null;
        CommonTree RPAREN212_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:587:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:587:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN205=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN205);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:588:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt73=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA73_1 = input.LA(2);

                if ( (synpred99_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred100_Java()) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA73_2 = input.LA(2);

                if ( (synpred99_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred100_Java()) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA73_3 = input.LA(2);

                if ( (synpred99_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred100_Java()) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA73_4 = input.LA(2);

                if ( (synpred99_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred100_Java()) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt73=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7630);
                    formalParameterStandardDecl206=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl206.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:41: ( COMMA formalParameterStandardDecl )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==COMMA) ) {
                            int LA71_1 = input.LA(2);

                            if ( (synpred97_Java()) ) {
                                alt71=1;
                            }


                        }


                        switch (alt71) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7633); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7635);
                    	    formalParameterStandardDecl208=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl208.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:78: ( COMMA formalParameterVarArgDecl )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==COMMA) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7640); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7642);
                            formalParameterVarArgDecl210=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl210.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterVarArgDecl, formalParameterStandardDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 590:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:590:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:590:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:592:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7699);
                    formalParameterVarArgDecl211=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl211.getTree());


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 593:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:593:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:595:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 595:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:595:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RPAREN212=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN212);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterStandardDecl"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:600:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
        JavaParser.formalParameterStandardDecl_return retval = new JavaParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.localModifierList_return localModifierList213 = null;

        JavaParser.type_return type214 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId215 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:601:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:601:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl7799);
            localModifierList213=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList213.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl7801);
            type214=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type214.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7803);
            variableDeclaratorId215=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId215.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, type, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 602:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:602:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterVarArgDecl"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:605:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
        JavaParser.formalParameterVarArgDecl_return retval = new JavaParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS218=null;
        JavaParser.localModifierList_return localModifierList216 = null;

        JavaParser.type_return type217 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId219 = null;


        CommonTree ELLIPSIS218_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:606:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:606:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl7847);
            localModifierList216=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList216.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl7849);
            type217=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type217.getTree());
            ELLIPSIS218=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl7851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS218);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl7853);
            variableDeclaratorId219=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId219.getTree());


            // AST REWRITE
            // elements: type, localModifierList, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 607:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:607:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:610:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JavaParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        JavaParser.qualifiedIdentifier_return retval = new JavaParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT220=null;
        Token DOT221=null;

        CommonTree ident_tree=null;
        CommonTree IDENT220_tree=null;
        CommonTree DOT221_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:611:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:611:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:611:9: ( IDENT -> IDENT )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:611:13: IDENT
            {
            IDENT220=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier7901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT220);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 611:33: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:613:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==DOT) ) {
                    int LA74_2 = input.LA(2);

                    if ( (LA74_2==IDENT) ) {
                        int LA74_3 = input.LA(3);

                        if ( (synpred101_Java()) ) {
                            alt74=1;
                        }


                    }


                }


                switch (alt74) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:613:13: DOT ident= IDENT
            	    {
            	    DOT221=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier7944); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT221);

            	    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier7948); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(ident);



            	    // AST REWRITE
            	    // elements: DOT, qualifiedIdentifier, ident
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 613:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:613:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_ident.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:619:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final JavaParser.annotationList_return annotationList() throws RecognitionException {
        JavaParser.annotationList_return retval = new JavaParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.annotation_return annotation222 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:620:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:620:9: ( annotation )*
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:620:9: ( annotation )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==AT) ) {
                    int LA75_2 = input.LA(2);

                    if ( (LA75_2==IDENT) ) {
                        int LA75_3 = input.LA(3);

                        if ( (synpred102_Java()) ) {
                            alt75=1;
                        }


                    }


                }


                switch (alt75) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList8001);
            	    annotation222=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation222.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 621:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:621:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:621:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:624:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT223=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier224 = null;

        JavaParser.annotationInit_return annotationInit225 = null;


        CommonTree AT223_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:625:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:625:9: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT223=(Token)match(input,AT,FOLLOW_AT_in_annotation8039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT223_tree = (CommonTree)adaptor.create(AT223);
            root_0 = (CommonTree)adaptor.becomeRoot(AT223_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8042);
            qualifiedIdentifier224=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier224.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:625:33: ( annotationInit )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LPAREN) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8044);
                    annotationInit225=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit225.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInit"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:628:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final JavaParser.annotationInit_return annotationInit() throws RecognitionException {
        JavaParser.annotationInit_return retval = new JavaParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN226=null;
        Token RPAREN228=null;
        JavaParser.annotationInitializers_return annotationInitializers227 = null;


        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN228_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:629:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:629:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN226=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN226);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit8070);
            annotationInitializers227=annotationInitializers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers227.getTree());
            RPAREN228=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN228);



            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 630:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:630:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN226, "ANNOTATION_INIT_BLOCK"), root_1);

                adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializers"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:633:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final JavaParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
        JavaParser.annotationInitializers_return retval = new JavaParser.annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA230=null;
        JavaParser.annotationInitializer_return annotationInitializer229 = null;

        JavaParser.annotationInitializer_return annotationInitializer231 = null;

        JavaParser.annotationElementValue_return annotationElementValue232 = null;


        CommonTree COMMA230_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:634:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==IDENT) ) {
                int LA78_1 = input.LA(2);

                if ( (LA78_1==ASSIGN) ) {
                    alt78=1;
                }
                else if ( (LA78_1==AND||LA78_1==BIT_SHIFT_RIGHT||(LA78_1>=DEC && LA78_1<=DIV)||LA78_1==DOT||(LA78_1>=EQUAL && LA78_1<=LBRACK)||(LA78_1>=LESS_OR_EQUAL && LA78_1<=LOGICAL_AND)||(LA78_1>=LOGICAL_OR && LA78_1<=MINUS)||LA78_1==MOD||(LA78_1>=NOT_EQUAL && LA78_1<=OR)||LA78_1==PLUS||LA78_1==QUESTION||LA78_1==RPAREN||LA78_1==SHIFT_LEFT||LA78_1==SHIFT_RIGHT||LA78_1==STAR||LA78_1==XOR||LA78_1==INSTANCEOF) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA78_0==AT||LA78_0==DEC||LA78_0==INC||LA78_0==LCURLY||LA78_0==LESS_THAN||LA78_0==LOGICAL_NOT||(LA78_0>=LPAREN && LA78_0<=MINUS)||LA78_0==NOT||LA78_0==PLUS||LA78_0==BOOLEAN||LA78_0==BYTE||LA78_0==CHAR||LA78_0==DOUBLE||LA78_0==FALSE||LA78_0==FLOAT||(LA78_0>=INT && LA78_0<=LONG)||(LA78_0>=NEW && LA78_0<=NULL)||LA78_0==SHORT||LA78_0==SUPER||LA78_0==THIS||LA78_0==TRUE||LA78_0==VOID||(LA78_0>=HEX_LITERAL && LA78_0<=STRING_LITERAL)) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:634:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8109);
                    annotationInitializer229=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer229.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:634:31: ( COMMA annotationInitializer )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:634:32: COMMA annotationInitializer
                    	    {
                    	    COMMA230=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8112); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA230);

                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8114);
                    	    annotationInitializer231=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer231.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 635:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:635:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.nextTree());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:636:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8144);
                    annotationElementValue232=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue232.getTree());


                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 637:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:637:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializer"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:640:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final JavaParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
        JavaParser.annotationInitializer_return retval = new JavaParser.annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT233=null;
        Token ASSIGN234=null;
        JavaParser.annotationElementValue_return annotationElementValue235 = null;


        CommonTree IDENT233_tree=null;
        CommonTree ASSIGN234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:641:5: ( IDENT ASSIGN annotationElementValue )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:641:9: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT233=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer8185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT233_tree = (CommonTree)adaptor.create(IDENT233);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT233_tree, root_0);
            }
            ASSIGN234=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer8188); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer8191);
            annotationElementValue235=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValue"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:644:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final JavaParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
        JavaParser.annotationElementValue_return retval = new JavaParser.annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.annotationElementValueExpression_return annotationElementValueExpression236 = null;

        JavaParser.annotation_return annotation237 = null;

        JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer238 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:645:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt79=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt79=1;
                }
                break;
            case AT:
                {
                alt79=2;
                }
                break;
            case LCURLY:
                {
                alt79=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:645:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8214);
                    annotationElementValueExpression236=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression236.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:646:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue8224);
                    annotation237=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation237.getTree());

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:647:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8234);
                    annotationElementValueArrayInitializer238=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:650:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final JavaParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
        JavaParser.annotationElementValueExpression_return retval = new JavaParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression239 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:651:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:651:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8257);
            conditionalExpression239=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression239.getTree());


            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 652:9: -> ^( EXPR conditionalExpression )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:652:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueArrayInitializer"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:655:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
        JavaParser.annotationElementValueArrayInitializer_return retval = new JavaParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY240=null;
        Token COMMA242=null;
        Token COMMA244=null;
        Token RCURLY245=null;
        JavaParser.annotationElementValue_return annotationElementValue241 = null;

        JavaParser.annotationElementValue_return annotationElementValue243 = null;


        CommonTree LCURLY240_tree=null;
        CommonTree COMMA242_tree=null;
        CommonTree COMMA244_tree=null;
        CommonTree RCURLY245_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY240=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY240);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==AT||LA81_0==DEC||LA81_0==INC||LA81_0==LCURLY||LA81_0==LESS_THAN||LA81_0==LOGICAL_NOT||(LA81_0>=LPAREN && LA81_0<=MINUS)||LA81_0==NOT||LA81_0==PLUS||LA81_0==BOOLEAN||LA81_0==BYTE||LA81_0==CHAR||LA81_0==DOUBLE||LA81_0==FALSE||LA81_0==FLOAT||(LA81_0>=INT && LA81_0<=LONG)||(LA81_0>=NEW && LA81_0<=NULL)||LA81_0==SHORT||LA81_0==SUPER||LA81_0==THIS||LA81_0==TRUE||LA81_0==VOID||(LA81_0>=IDENT && LA81_0<=STRING_LITERAL)) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8300);
                    annotationElementValue241=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue241.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:40: ( COMMA annotationElementValue )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            int LA80_1 = input.LA(2);

                            if ( (LA80_1==AT||LA80_1==DEC||LA80_1==INC||LA80_1==LCURLY||LA80_1==LESS_THAN||LA80_1==LOGICAL_NOT||(LA80_1>=LPAREN && LA80_1<=MINUS)||LA80_1==NOT||LA80_1==PLUS||LA80_1==BOOLEAN||LA80_1==BYTE||LA80_1==CHAR||LA80_1==DOUBLE||LA80_1==FALSE||LA80_1==FLOAT||(LA80_1>=INT && LA80_1<=LONG)||(LA80_1>=NEW && LA80_1<=NULL)||LA80_1==SHORT||LA80_1==SUPER||LA80_1==THIS||LA80_1==TRUE||LA80_1==VOID||(LA80_1>=IDENT && LA80_1<=STRING_LITERAL)) ) {
                                alt80=1;
                            }


                        }


                        switch (alt80) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:41: COMMA annotationElementValue
                    	    {
                    	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8303); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);

                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8305);
                    	    annotationElementValue243=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue243.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:74: ( COMMA )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==COMMA) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:656:75: COMMA
                    {
                    COMMA244=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA244);


                    }
                    break;

            }

            RCURLY245=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY245);



            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 657:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:657:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:657:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:660:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT246=null;
        Token INTERFACE247=null;
        Token IDENT248=null;
        JavaParser.annotationBody_return annotationBody249 = null;


        CommonTree AT246_tree=null;
        CommonTree INTERFACE247_tree=null;
        CommonTree IDENT248_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:661:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:661:9: AT INTERFACE IDENT annotationBody
            {
            AT246=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration8359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT246);

            INTERFACE247=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration8361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE247);

            IDENT248=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration8363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT248);

            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8365);
            annotationBody249=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationBody.add(annotationBody249.getTree());


            // AST REWRITE
            // elements: annotationBody, AT, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 662:9: -> ^( AT IDENT annotationBody )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:662:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_annotationBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationBody"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:665:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final JavaParser.annotationBody_return annotationBody() throws RecognitionException {
        JavaParser.annotationBody_return retval = new JavaParser.annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY250=null;
        Token RCURLY252=null;
        JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations251 = null;


        CommonTree LCURLY250_tree=null;
        CommonTree RCURLY252_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:666:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:666:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY250=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody8408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY250);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:666:16: ( annotationScopeDeclarations )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==AT||LA83_0==ABSTRACT||LA83_0==BOOLEAN||LA83_0==BYTE||(LA83_0>=CHAR && LA83_0<=CLASS)||LA83_0==DOUBLE||LA83_0==ENUM||LA83_0==FINAL||LA83_0==FLOAT||LA83_0==INTERFACE||(LA83_0>=INT && LA83_0<=NATIVE)||(LA83_0>=PRIVATE && LA83_0<=PUBLIC)||(LA83_0>=SHORT && LA83_0<=STRICTFP)||LA83_0==SYNCHRONIZED||LA83_0==TRANSIENT||LA83_0==VOLATILE||LA83_0==IDENT) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8410);
            	    annotationScopeDeclarations251=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations251.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            RCURLY252=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody8413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY252);



            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 667:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:667:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:667:76: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationBody"

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationScopeDeclarations"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:670:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
        JavaParser.annotationScopeDeclarations_return retval = new JavaParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT255=null;
        Token LPAREN256=null;
        Token RPAREN257=null;
        Token SEMI259=null;
        Token SEMI261=null;
        JavaParser.modifierList_return modifierList253 = null;

        JavaParser.type_return type254 = null;

        JavaParser.annotationDefaultValue_return annotationDefaultValue258 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList260 = null;

        JavaParser.typeDeclaration_return typeDeclaration262 = null;


        CommonTree IDENT255_tree=null;
        CommonTree LPAREN256_tree=null;
        CommonTree RPAREN257_tree=null;
        CommonTree SEMI259_tree=null;
        CommonTree SEMI261_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:671:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:671:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8455);
                    modifierList253=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList253.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8457);
                    type254=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type254.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==IDENT) ) {
                        int LA85_1 = input.LA(2);

                        if ( (LA85_1==LPAREN) ) {
                            alt85=1;
                        }
                        else if ( (LA85_1==ASSIGN||LA85_1==COMMA||LA85_1==LBRACK||LA85_1==SEMI) ) {
                            alt85=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 85, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT255=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations8471); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT255);

                            LPAREN256=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations8473); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN256);

                            RPAREN257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations8475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN257);

                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:33: ( annotationDefaultValue )?
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==DEFAULT) ) {
                                alt84=1;
                            }
                            switch (alt84) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8477);
                                    annotationDefaultValue258=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue258.getTree());

                                    }
                                    break;

                            }

                            SEMI259=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8480); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI259);



                            // AST REWRITE
                            // elements: modifierList, type, annotationDefaultValue, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 673:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:673:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:673:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:674:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8522);
                            classFieldDeclaratorList260=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList260.getTree());
                            SEMI261=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8524); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI261);



                            // AST REWRITE
                            // elements: modifierList, type, classFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 675:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:675:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:677:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8569);
                    typeDeclaration262=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationDefaultValue"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:680:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final JavaParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
        JavaParser.annotationDefaultValue_return retval = new JavaParser.annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT263=null;
        JavaParser.annotationElementValue_return annotationElementValue264 = null;


        CommonTree DEFAULT263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:681:5: ( DEFAULT annotationElementValue )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:681:9: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT263=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue8592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT263_tree = (CommonTree)adaptor.create(DEFAULT263);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT263_tree, root_0);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue8595);
            annotationElementValue264=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue264.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:686:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY265=null;
        Token RCURLY267=null;
        JavaParser.blockStatement_return blockStatement266 = null;


        CommonTree LCURLY265_tree=null;
        CommonTree RCURLY267_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:687:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:687:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY265=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block8616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY265);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:687:16: ( blockStatement )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AT||LA87_0==DEC||LA87_0==INC||LA87_0==LCURLY||LA87_0==LESS_THAN||LA87_0==LOGICAL_NOT||(LA87_0>=LPAREN && LA87_0<=MINUS)||LA87_0==NOT||LA87_0==PLUS||LA87_0==SEMI||(LA87_0>=ABSTRACT && LA87_0<=BYTE)||(LA87_0>=CHAR && LA87_0<=CONTINUE)||(LA87_0>=DO && LA87_0<=DOUBLE)||LA87_0==ENUM||(LA87_0>=FALSE && LA87_0<=FINAL)||(LA87_0>=FLOAT && LA87_0<=IF)||LA87_0==INTERFACE||(LA87_0>=INT && LA87_0<=NULL)||(LA87_0>=PRIVATE && LA87_0<=THROW)||(LA87_0>=TRANSIENT && LA87_0<=WHILE)||(LA87_0>=IDENT && LA87_0<=STRING_LITERAL)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8618);
            	    blockStatement266=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement266.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            RCURLY267=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block8621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY267);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 688:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:688:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, LCURLY265, "BLOCK_SCOPE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:688:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:691:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI269=null;
        JavaParser.localVariableDeclaration_return localVariableDeclaration268 = null;

        JavaParser.typeDeclaration_return typeDeclaration270 = null;

        JavaParser.statement_return statement271 = null;


        CommonTree SEMI269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:692:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt88=3;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:692:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement8659);
                    localVariableDeclaration268=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration268.getTree());
                    SEMI269=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement8661); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:693:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement8672);
                    typeDeclaration270=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration270.getTree());

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:694:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement8682);
                    statement271=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:697:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.localModifierList_return localModifierList272 = null;

        JavaParser.type_return type273 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList274 = null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:698:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:698:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8705);
            localModifierList272=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList272.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration8707);
            type273=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type273.getTree());
            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8709);
            classFieldDeclaratorList274=classFieldDeclaratorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList274.getTree());


            // AST REWRITE
            // elements: localModifierList, classFieldDeclaratorList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 699:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:699:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:703:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT276=null;
        Token COLON277=null;
        Token SEMI278=null;
        Token SEMI279=null;
        Token IF280=null;
        Token ELSE282=null;
        Token FOR283=null;
        Token LPAREN284=null;
        Token SEMI286=null;
        Token SEMI288=null;
        Token RPAREN290=null;
        Token IDENT294=null;
        Token COLON295=null;
        Token RPAREN297=null;
        Token WHILE299=null;
        Token DO302=null;
        Token WHILE304=null;
        Token SEMI306=null;
        Token TRY307=null;
        Token SWITCH312=null;
        Token LCURLY314=null;
        Token RCURLY316=null;
        Token SYNCHRONIZED317=null;
        Token RETURN320=null;
        Token SEMI322=null;
        Token THROW323=null;
        Token SEMI325=null;
        Token BREAK326=null;
        Token IDENT327=null;
        Token SEMI328=null;
        Token CONTINUE329=null;
        Token IDENT330=null;
        Token SEMI331=null;
        Token IDENT332=null;
        Token COLON333=null;
        Token SEMI336=null;
        Token SEMI337=null;
        JavaParser.expression_return expr1 = null;

        JavaParser.expression_return expr2 = null;

        JavaParser.statement_return ifStat = null;

        JavaParser.statement_return elseStat = null;

        JavaParser.block_return block275 = null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression281 = null;

        JavaParser.forInit_return forInit285 = null;

        JavaParser.forCondition_return forCondition287 = null;

        JavaParser.forUpdater_return forUpdater289 = null;

        JavaParser.statement_return statement291 = null;

        JavaParser.localModifierList_return localModifierList292 = null;

        JavaParser.type_return type293 = null;

        JavaParser.expression_return expression296 = null;

        JavaParser.statement_return statement298 = null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression300 = null;

        JavaParser.statement_return statement301 = null;

        JavaParser.statement_return statement303 = null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression305 = null;

        JavaParser.block_return block308 = null;

        JavaParser.catches_return catches309 = null;

        JavaParser.finallyClause_return finallyClause310 = null;

        JavaParser.finallyClause_return finallyClause311 = null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression313 = null;

        JavaParser.switchBlockLabels_return switchBlockLabels315 = null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression318 = null;

        JavaParser.block_return block319 = null;

        JavaParser.expression_return expression321 = null;

        JavaParser.expression_return expression324 = null;

        JavaParser.statement_return statement334 = null;

        JavaParser.expression_return expression335 = null;


        CommonTree ASSERT276_tree=null;
        CommonTree COLON277_tree=null;
        CommonTree SEMI278_tree=null;
        CommonTree SEMI279_tree=null;
        CommonTree IF280_tree=null;
        CommonTree ELSE282_tree=null;
        CommonTree FOR283_tree=null;
        CommonTree LPAREN284_tree=null;
        CommonTree SEMI286_tree=null;
        CommonTree SEMI288_tree=null;
        CommonTree RPAREN290_tree=null;
        CommonTree IDENT294_tree=null;
        CommonTree COLON295_tree=null;
        CommonTree RPAREN297_tree=null;
        CommonTree WHILE299_tree=null;
        CommonTree DO302_tree=null;
        CommonTree WHILE304_tree=null;
        CommonTree SEMI306_tree=null;
        CommonTree TRY307_tree=null;
        CommonTree SWITCH312_tree=null;
        CommonTree LCURLY314_tree=null;
        CommonTree RCURLY316_tree=null;
        CommonTree SYNCHRONIZED317_tree=null;
        CommonTree RETURN320_tree=null;
        CommonTree SEMI322_tree=null;
        CommonTree THROW323_tree=null;
        CommonTree SEMI325_tree=null;
        CommonTree BREAK326_tree=null;
        CommonTree IDENT327_tree=null;
        CommonTree SEMI328_tree=null;
        CommonTree CONTINUE329_tree=null;
        CommonTree IDENT330_tree=null;
        CommonTree SEMI331_tree=null;
        CommonTree IDENT332_tree=null;
        CommonTree COLON333_tree=null;
        CommonTree SEMI336_tree=null;
        CommonTree SEMI337_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:704:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
            int alt97=16;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:704:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement8762);
                    block275=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block275.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:705:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT276=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement8772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT276);

                    pushFollow(FOLLOW_expression_in_statement8776);
                    expr1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:706:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==COLON) ) {
                        alt89=1;
                    }
                    else if ( (LA89_0==SEMI) ) {
                        alt89=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;
                    }
                    switch (alt89) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:706:13: COLON expr2= expression SEMI
                            {
                            COLON277=(Token)match(input,COLON,FOLLOW_COLON_in_statement8791); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON277);

                            pushFollow(FOLLOW_expression_in_statement8795);
                            expr2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI278=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement8797); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI278);



                            // AST REWRITE
                            // elements: expr2, ASSERT, expr1
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 706:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:706:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());
                                adaptor.addChild(root_1, stream_expr2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:707:13: SEMI
                            {
                            SEMI279=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement8860); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI279);



                            // AST REWRITE
                            // elements: ASSERT, expr1
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 707:77: -> ^( ASSERT $expr1)
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:707:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:709:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    {
                    IF280=(Token)match(input,IF,FOLLOW_IF_in_statement8949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF280);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement8951);
                    parenthesizedExpression281=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression281.getTree());
                    pushFollow(FOLLOW_statement_in_statement8955);
                    ifStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:710:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==ELSE) ) {
                        int LA90_1 = input.LA(2);

                        if ( (synpred121_Java()) ) {
                            alt90=1;
                        }
                        else if ( (true) ) {
                            alt90=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA90_0==EOF||LA90_0==AT||LA90_0==DEC||LA90_0==INC||LA90_0==LCURLY||LA90_0==LESS_THAN||LA90_0==LOGICAL_NOT||(LA90_0>=LPAREN && LA90_0<=MINUS)||LA90_0==NOT||LA90_0==PLUS||LA90_0==RCURLY||LA90_0==SEMI||(LA90_0>=ABSTRACT && LA90_0<=CASE)||(LA90_0>=CHAR && LA90_0<=DOUBLE)||LA90_0==ENUM||(LA90_0>=FALSE && LA90_0<=FINAL)||(LA90_0>=FLOAT && LA90_0<=IF)||LA90_0==INTERFACE||(LA90_0>=INT && LA90_0<=NULL)||(LA90_0>=PRIVATE && LA90_0<=THROW)||(LA90_0>=TRANSIENT && LA90_0<=WHILE)||(LA90_0>=IDENT && LA90_0<=STRING_LITERAL)) ) {
                        alt90=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:710:13: ELSE elseStat= statement
                            {
                            ELSE282=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement8970); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(ELSE282);

                            pushFollow(FOLLOW_statement_in_statement8974);
                            elseStat=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());


                            // AST REWRITE
                            // elements: elseStat, ifStat, parenthesizedExpression, IF
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 710:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:710:81: ^( IF parenthesizedExpression $ifStat $elseStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());
                                adaptor.addChild(root_1, stream_elseStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:711:77: 
                            {

                            // AST REWRITE
                            // elements: parenthesizedExpression, IF, ifStat
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 711:77: -> ^( IF parenthesizedExpression $ifStat)
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:711:81: ^( IF parenthesizedExpression $ifStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:713:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    {
                    FOR283=(Token)match(input,FOR,FOLLOW_FOR_in_statement9140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR283);

                    LPAREN284=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_statement9142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN284);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:714:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:714:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
                            {
                            pushFollow(FOLLOW_forInit_in_statement9157);
                            forInit285=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit285.getTree());
                            SEMI286=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9159); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI286);

                            pushFollow(FOLLOW_forCondition_in_statement9161);
                            forCondition287=forCondition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forCondition.add(forCondition287.getTree());
                            SEMI288=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9163); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI288);

                            pushFollow(FOLLOW_forUpdater_in_statement9165);
                            forUpdater289=forUpdater();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater289.getTree());
                            RPAREN290=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN290);

                            pushFollow(FOLLOW_statement_in_statement9169);
                            statement291=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement291.getTree());


                            // AST REWRITE
                            // elements: forInit, statement, forCondition, forUpdater, FOR
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 714:77: -> ^( FOR forInit forCondition forUpdater statement )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:714:81: ^( FOR forInit forCondition forUpdater statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_forInit.nextTree());
                                adaptor.addChild(root_1, stream_forCondition.nextTree());
                                adaptor.addChild(root_1, stream_forUpdater.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:715:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement9204);
                            localModifierList292=localModifierList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList292.getTree());
                            pushFollow(FOLLOW_type_in_statement9206);
                            type293=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type293.getTree());
                            IDENT294=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9208); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT294);

                            COLON295=(Token)match(input,COLON,FOLLOW_COLON_in_statement9210); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON295);

                            pushFollow(FOLLOW_expression_in_statement9212);
                            expression296=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression296.getTree());
                            RPAREN297=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN297);

                            pushFollow(FOLLOW_statement_in_statement9216);
                            statement298=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement298.getTree());


                            // AST REWRITE
                            // elements: localModifierList, statement, expression, type, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 716:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:716:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EACH, FOR283, "FOR_EACH"), root_1);

                                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_expression.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:718:9: WHILE parenthesizedExpression statement
                    {
                    WHILE299=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE299);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9333);
                    parenthesizedExpression300=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression300.getTree());
                    pushFollow(FOLLOW_statement_in_statement9335);
                    statement301=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement301.getTree());


                    // AST REWRITE
                    // elements: parenthesizedExpression, WHILE, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 718:77: -> ^( WHILE parenthesizedExpression statement )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:718:81: ^( WHILE parenthesizedExpression statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:719:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO302=(Token)match(input,DO,FOLLOW_DO_in_statement9384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO302);

                    pushFollow(FOLLOW_statement_in_statement9386);
                    statement303=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement303.getTree());
                    WHILE304=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE304);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9390);
                    parenthesizedExpression305=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression305.getTree());
                    SEMI306=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI306);



                    // AST REWRITE
                    // elements: parenthesizedExpression, DO, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 719:77: -> ^( DO statement parenthesizedExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:719:81: ^( DO statement parenthesizedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());
                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY307=(Token)match(input,TRY,FOLLOW_TRY_in_statement9433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY307);

                    pushFollow(FOLLOW_block_in_statement9435);
                    block308=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block308.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:19: ( catches ( finallyClause )? | finallyClause )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==CATCH) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==FINALLY) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement9438);
                            catches309=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches309.getTree());
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:28: ( finallyClause )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==FINALLY) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement9440);
                                    finallyClause310=finallyClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause310.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement9445);
                            finallyClause311=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause311.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: finallyClause, TRY, catches, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 720:77: -> ^( TRY block ( catches )? ( finallyClause )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:81: ^( TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:93: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.nextTree());

                        }
                        stream_catches.reset();
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:720:102: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.nextTree());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:721:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH312=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement9488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH312);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9490);
                    parenthesizedExpression313=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression313.getTree());
                    LCURLY314=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_statement9492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY314);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement9494);
                    switchBlockLabels315=switchBlockLabels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels315.getTree());
                    RCURLY316=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_statement9496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY316);



                    // AST REWRITE
                    // elements: switchBlockLabels, parenthesizedExpression, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 721:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:721:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:722:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED317=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement9522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED317);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9524);
                    parenthesizedExpression318=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression318.getTree());
                    pushFollow(FOLLOW_block_in_statement9526);
                    block319=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block319.getTree());


                    // AST REWRITE
                    // elements: parenthesizedExpression, SYNCHRONIZED, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 722:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:722:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:723:9: RETURN ( expression )? SEMI
                    {
                    RETURN320=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement9572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(RETURN320);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:723:16: ( expression )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==DEC||LA94_0==INC||LA94_0==LESS_THAN||LA94_0==LOGICAL_NOT||(LA94_0>=LPAREN && LA94_0<=MINUS)||LA94_0==NOT||LA94_0==PLUS||LA94_0==BOOLEAN||LA94_0==BYTE||LA94_0==CHAR||LA94_0==DOUBLE||LA94_0==FALSE||LA94_0==FLOAT||(LA94_0>=INT && LA94_0<=LONG)||(LA94_0>=NEW && LA94_0<=NULL)||LA94_0==SHORT||LA94_0==SUPER||LA94_0==THIS||LA94_0==TRUE||LA94_0==VOID||(LA94_0>=IDENT && LA94_0<=STRING_LITERAL)) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9574);
                            expression321=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression321.getTree());

                            }
                            break;

                    }

                    SEMI322=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI322);



                    // AST REWRITE
                    // elements: expression, RETURN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 723:77: -> ^( RETURN ( expression )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:723:81: ^( RETURN ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:723:90: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:724:9: THROW expression SEMI
                    {
                    THROW323=(Token)match(input,THROW,FOLLOW_THROW_in_statement9641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(THROW323);

                    pushFollow(FOLLOW_expression_in_statement9643);
                    expression324=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression324.getTree());
                    SEMI325=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI325);



                    // AST REWRITE
                    // elements: THROW, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 724:77: -> ^( THROW expression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:724:81: ^( THROW expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:725:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK326=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement9710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(BREAK326);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:725:15: ( IDENT )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==IDENT) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: IDENT
                            {
                            IDENT327=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9712); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT327);


                            }
                            break;

                    }

                    SEMI328=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI328);



                    // AST REWRITE
                    // elements: IDENT, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 725:77: -> ^( BREAK ( IDENT )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:725:81: ^( BREAK ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:725:89: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:726:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE329=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement9785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE329);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:726:18: ( IDENT )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==IDENT) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: IDENT
                            {
                            IDENT330=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9787); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT330);


                            }
                            break;

                    }

                    SEMI331=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI331);



                    // AST REWRITE
                    // elements: IDENT, CONTINUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 726:77: -> ^( CONTINUE ( IDENT )? )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:726:81: ^( CONTINUE ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:726:92: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:727:9: IDENT COLON statement
                    {
                    IDENT332=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT332);

                    COLON333=(Token)match(input,COLON,FOLLOW_COLON_in_statement9859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON333);

                    pushFollow(FOLLOW_statement_in_statement9861);
                    statement334=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement334.getTree());


                    // AST REWRITE
                    // elements: IDENT, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 727:77: -> ^( LABELED_STATEMENT IDENT statement )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:727:81: ^( LABELED_STATEMENT IDENT statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:728:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement9928);
                    expression335=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression335.getTree());
                    SEMI336=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9930); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:729:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI337=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI337_tree = (CommonTree)adaptor.create(SEMI337);
                    adaptor.addChild(root_0, SEMI337_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:732:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.catchClause_return catchClause338 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:733:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:733:9: ( catchClause )+
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:733:9: ( catchClause )+
            int cnt98=0;
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==CATCH) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches9980);
            	    catchClause338=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause338.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);



            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 734:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:734:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:737:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH339=null;
        Token LPAREN340=null;
        Token RPAREN342=null;
        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl341 = null;

        JavaParser.block_return block343 = null;


        CommonTree CATCH339_tree=null;
        CommonTree LPAREN340_tree=null;
        CommonTree RPAREN342_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:738:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:738:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH339=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause10022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH339_tree = (CommonTree)adaptor.create(CATCH339);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH339_tree, root_0);
            }
            LPAREN340=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause10025); if (state.failed) return retval;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause10028);
            formalParameterStandardDecl341=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl341.getTree());
            RPAREN342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause10030); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause10033);
            block343=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block343.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:741:1: finallyClause : FINALLY block -> block ;
    public final JavaParser.finallyClause_return finallyClause() throws RecognitionException {
        JavaParser.finallyClause_return retval = new JavaParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY344=null;
        JavaParser.block_return block345 = null;


        CommonTree FINALLY344_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:742:5: ( FINALLY block -> block )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:742:9: FINALLY block
            {
            FINALLY344=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause10052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY344);

            pushFollow(FOLLOW_block_in_finallyClause10054);
            block345=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block345.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 743:9: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockLabels"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:746:1: switchBlockLabels : switchLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchLabels ) ;
    public final JavaParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
        JavaParser.switchBlockLabels_return retval = new JavaParser.switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.switchLabels_return switchLabels346 = null;


        RewriteRuleSubtreeStream stream_switchLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchLabels");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:747:5: ( switchLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchLabels ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:747:9: switchLabels
            {
            pushFollow(FOLLOW_switchLabels_in_switchBlockLabels10086);
            switchLabels346=switchLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabels.add(switchLabels346.getTree());


            // AST REWRITE
            // elements: switchLabels
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 747:22: -> ^( SWITCH_BLOCK_LABEL_LIST switchLabels )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:747:26: ^( SWITCH_BLOCK_LABEL_LIST switchLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                adaptor.addChild(root_1, stream_switchLabels.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"

    public static class switchLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabels"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:750:1: switchLabels : ( switchLabel )* ;
    public final JavaParser.switchLabels_return switchLabels() throws RecognitionException {
        JavaParser.switchLabels_return retval = new JavaParser.switchLabels_return();
        retval.start = input.LT(1);
        int switchLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.switchLabel_return switchLabel347 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:751:2: ( ( switchLabel )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:751:4: ( switchLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:751:4: ( switchLabel )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==CASE||LA99_0==DEFAULT) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: switchLabel
            	    {
            	    pushFollow(FOLLOW_switchLabel_in_switchLabels10106);
            	    switchLabel347=switchLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchLabel347.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, switchLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabels"

    public static class switchLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:754:1: switchLabel : ( switchCaseLabel | switchDefaultLabel );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.switchCaseLabel_return switchCaseLabel348 = null;

        JavaParser.switchDefaultLabel_return switchDefaultLabel349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:755:2: ( switchCaseLabel | switchDefaultLabel )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==CASE) ) {
                alt100=1;
            }
            else if ( (LA100_0==DEFAULT) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:755:4: switchCaseLabel
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switchCaseLabel_in_switchLabel10119);
                    switchCaseLabel348=switchCaseLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel348.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:756:5: switchDefaultLabel
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switchDefaultLabel_in_switchLabel10126);
                    switchDefaultLabel349=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDefaultLabel349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:759:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final JavaParser.switchCaseLabels_return switchCaseLabels() throws RecognitionException {
        JavaParser.switchCaseLabels_return retval = new JavaParser.switchCaseLabels_return();
        retval.start = input.LT(1);
        int switchCaseLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.switchCaseLabel_return switchCaseLabel350 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:760:5: ( ( switchCaseLabel )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:760:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:760:9: ( switchCaseLabel )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==CASE) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10142);
            	    switchCaseLabel350=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel350.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, switchCaseLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels"

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabel"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:763:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
    public final JavaParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
        JavaParser.switchCaseLabel_return retval = new JavaParser.switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE351=null;
        Token COLON353=null;
        JavaParser.expression_return expression352 = null;

        JavaParser.blockStatement_return blockStatement354 = null;


        CommonTree CASE351_tree=null;
        CommonTree COLON353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:764:5: ( CASE expression COLON ( blockStatement )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:764:9: CASE expression COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            CASE351=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel10166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE351_tree = (CommonTree)adaptor.create(CASE351);
            root_0 = (CommonTree)adaptor.becomeRoot(CASE351_tree, root_0);
            }
            pushFollow(FOLLOW_expression_in_switchCaseLabel10169);
            expression352=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression352.getTree());
            COLON353=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel10171); if (state.failed) return retval;
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:764:33: ( blockStatement )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==AT||LA102_0==DEC||LA102_0==INC||LA102_0==LCURLY||LA102_0==LESS_THAN||LA102_0==LOGICAL_NOT||(LA102_0>=LPAREN && LA102_0<=MINUS)||LA102_0==NOT||LA102_0==PLUS||LA102_0==SEMI||(LA102_0>=ABSTRACT && LA102_0<=BYTE)||(LA102_0>=CHAR && LA102_0<=CONTINUE)||(LA102_0>=DO && LA102_0<=DOUBLE)||LA102_0==ENUM||(LA102_0>=FALSE && LA102_0<=FINAL)||(LA102_0>=FLOAT && LA102_0<=IF)||LA102_0==INTERFACE||(LA102_0>=INT && LA102_0<=NULL)||(LA102_0>=PRIVATE && LA102_0<=THROW)||(LA102_0>=TRANSIENT && LA102_0<=WHILE)||(LA102_0>=IDENT && LA102_0<=STRING_LITERAL)) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10174);
            	    blockStatement354=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement354.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchDefaultLabel"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:767:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
    public final JavaParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
        JavaParser.switchDefaultLabel_return retval = new JavaParser.switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT355=null;
        Token COLON356=null;
        JavaParser.blockStatement_return blockStatement357 = null;


        CommonTree DEFAULT355_tree=null;
        CommonTree COLON356_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:768:5: ( DEFAULT COLON ( blockStatement )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:768:9: DEFAULT COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT355=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel10198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT355_tree = (CommonTree)adaptor.create(DEFAULT355);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT355_tree, root_0);
            }
            COLON356=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel10201); if (state.failed) return retval;
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:768:25: ( blockStatement )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==AT||LA103_0==DEC||LA103_0==INC||LA103_0==LCURLY||LA103_0==LESS_THAN||LA103_0==LOGICAL_NOT||(LA103_0>=LPAREN && LA103_0<=MINUS)||LA103_0==NOT||LA103_0==PLUS||LA103_0==SEMI||(LA103_0>=ABSTRACT && LA103_0<=BYTE)||(LA103_0>=CHAR && LA103_0<=CONTINUE)||(LA103_0>=DO && LA103_0<=DOUBLE)||LA103_0==ENUM||(LA103_0>=FALSE && LA103_0<=FINAL)||(LA103_0>=FLOAT && LA103_0<=IF)||LA103_0==INTERFACE||(LA103_0>=INT && LA103_0<=NULL)||(LA103_0>=PRIVATE && LA103_0<=THROW)||(LA103_0>=TRANSIENT && LA103_0<=WHILE)||(LA103_0>=IDENT && LA103_0<=STRING_LITERAL)) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10204);
            	    blockStatement357=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement357.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:771:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration358 = null;

        JavaParser.expressionList_return expressionList359 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:772:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt104=3;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:772:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10228);
                    localVariableDeclaration358=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration358.getTree());


                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 772:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:772:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:773:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10250);
                    expressionList359=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList359.getTree());


                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 773:37: -> ^( FOR_INIT expressionList )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:773:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:774:37: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 774:37: -> ^( FOR_INIT )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:774:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCondition"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:777:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final JavaParser.forCondition_return forCondition() throws RecognitionException {
        JavaParser.forCondition_return retval = new JavaParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.expression_return expression360 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:778:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:778:9: ( expression )?
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:778:9: ( expression )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==DEC||LA105_0==INC||LA105_0==LESS_THAN||LA105_0==LOGICAL_NOT||(LA105_0>=LPAREN && LA105_0<=MINUS)||LA105_0==NOT||LA105_0==PLUS||LA105_0==BOOLEAN||LA105_0==BYTE||LA105_0==CHAR||LA105_0==DOUBLE||LA105_0==FALSE||LA105_0==FLOAT||(LA105_0>=INT && LA105_0<=LONG)||(LA105_0>=NEW && LA105_0<=NULL)||LA105_0==SHORT||LA105_0==SUPER||LA105_0==THIS||LA105_0==TRUE||LA105_0==VOID||(LA105_0>=IDENT && LA105_0<=STRING_LITERAL)) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition10338);
                    expression360=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression360.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 779:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:779:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:779:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdater"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:782:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final JavaParser.forUpdater_return forUpdater() throws RecognitionException {
        JavaParser.forUpdater_return retval = new JavaParser.forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.expressionList_return expressionList361 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:783:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:783:9: ( expressionList )?
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:783:9: ( expressionList )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==DEC||LA106_0==INC||LA106_0==LESS_THAN||LA106_0==LOGICAL_NOT||(LA106_0>=LPAREN && LA106_0<=MINUS)||LA106_0==NOT||LA106_0==PLUS||LA106_0==BOOLEAN||LA106_0==BYTE||LA106_0==CHAR||LA106_0==DOUBLE||LA106_0==FALSE||LA106_0==FLOAT||(LA106_0>=INT && LA106_0<=LONG)||(LA106_0>=NEW && LA106_0<=NULL)||LA106_0==SHORT||LA106_0==SUPER||LA106_0==THIS||LA106_0==TRUE||LA106_0==VOID||(LA106_0>=IDENT && LA106_0<=STRING_LITERAL)) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater10380);
                    expressionList361=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList361.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:784:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:784:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdater"

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:789:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final JavaParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
        JavaParser.parenthesizedExpression_return retval = new JavaParser.parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN362=null;
        Token RPAREN364=null;
        JavaParser.expression_return expression363 = null;


        CommonTree LPAREN362_tree=null;
        CommonTree RPAREN364_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:790:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:790:9: LPAREN expression RPAREN
            {
            LPAREN362=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression10420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN362);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression10422);
            expression363=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression363.getTree());
            RPAREN364=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression10424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN364);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 791:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:791:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTESIZED_EXPR, LPAREN362, "PARENTESIZED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:794:1: expressionList : expression ( COMMA expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA366=null;
        JavaParser.expression_return expression365 = null;

        JavaParser.expression_return expression367 = null;


        CommonTree COMMA366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:795:5: ( expression ( COMMA expression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:795:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList10465);
            expression365=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression365.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:795:20: ( COMMA expression )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:795:21: COMMA expression
            	    {
            	    COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10468); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10471);
            	    expression367=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression367.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:798:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.assignmentExpression_return assignmentExpression368 = null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:799:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:799:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression10492);
            assignmentExpression368=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression368.getTree());


            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 800:9: -> ^( EXPR assignmentExpression )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:800:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:803:1: assignmentExpression : conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? ;
    public final JavaParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
        JavaParser.assignmentExpression_return retval = new JavaParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN370=null;
        Token PLUS_ASSIGN371=null;
        Token MINUS_ASSIGN372=null;
        Token STAR_ASSIGN373=null;
        Token DIV_ASSIGN374=null;
        Token AND_ASSIGN375=null;
        Token OR_ASSIGN376=null;
        Token XOR_ASSIGN377=null;
        Token MOD_ASSIGN378=null;
        Token SHIFT_LEFT_ASSIGN379=null;
        Token SHIFT_RIGHT_ASSIGN380=null;
        Token BIT_SHIFT_RIGHT_ASSIGN381=null;
        JavaParser.conditionalExpression_return conditionalExpression369 = null;

        JavaParser.assignmentExpression_return assignmentExpression382 = null;


        CommonTree ASSIGN370_tree=null;
        CommonTree PLUS_ASSIGN371_tree=null;
        CommonTree MINUS_ASSIGN372_tree=null;
        CommonTree STAR_ASSIGN373_tree=null;
        CommonTree DIV_ASSIGN374_tree=null;
        CommonTree AND_ASSIGN375_tree=null;
        CommonTree OR_ASSIGN376_tree=null;
        CommonTree XOR_ASSIGN377_tree=null;
        CommonTree MOD_ASSIGN378_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN379_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN380_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:804:5: ( conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:804:9: conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression10528);
            conditionalExpression369=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression369.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:805:9: ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=AND_ASSIGN && LA109_0<=ASSIGN)||LA109_0==BIT_SHIFT_RIGHT_ASSIGN||LA109_0==DIV_ASSIGN||LA109_0==MINUS_ASSIGN||LA109_0==MOD_ASSIGN||LA109_0==OR_ASSIGN||LA109_0==PLUS_ASSIGN||LA109_0==SHIFT_LEFT_ASSIGN||LA109_0==SHIFT_RIGHT_ASSIGN||LA109_0==STAR_ASSIGN||LA109_0==XOR_ASSIGN) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:805:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:805:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
                    int alt108=12;
                    alt108 = dfa108.predict(input);
                    switch (alt108) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:805:17: ASSIGN
                            {
                            ASSIGN370=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression10547); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASSIGN370_tree = (CommonTree)adaptor.create(ASSIGN370);
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN370_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:806:17: PLUS_ASSIGN
                            {
                            PLUS_ASSIGN371=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression10566); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PLUS_ASSIGN371_tree = (CommonTree)adaptor.create(PLUS_ASSIGN371);
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN371_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:807:17: MINUS_ASSIGN
                            {
                            MINUS_ASSIGN372=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression10585); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MINUS_ASSIGN372_tree = (CommonTree)adaptor.create(MINUS_ASSIGN372);
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN372_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:808:17: STAR_ASSIGN
                            {
                            STAR_ASSIGN373=(Token)match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression10604); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STAR_ASSIGN373_tree = (CommonTree)adaptor.create(STAR_ASSIGN373);
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN373_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:809:17: DIV_ASSIGN
                            {
                            DIV_ASSIGN374=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression10623); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DIV_ASSIGN374_tree = (CommonTree)adaptor.create(DIV_ASSIGN374);
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN374_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:810:17: AND_ASSIGN
                            {
                            AND_ASSIGN375=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression10642); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_ASSIGN375_tree = (CommonTree)adaptor.create(AND_ASSIGN375);
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN375_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:811:17: OR_ASSIGN
                            {
                            OR_ASSIGN376=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression10661); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OR_ASSIGN376_tree = (CommonTree)adaptor.create(OR_ASSIGN376);
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN376_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:812:17: XOR_ASSIGN
                            {
                            XOR_ASSIGN377=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression10680); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            XOR_ASSIGN377_tree = (CommonTree)adaptor.create(XOR_ASSIGN377);
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN377_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:813:17: MOD_ASSIGN
                            {
                            MOD_ASSIGN378=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression10699); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MOD_ASSIGN378_tree = (CommonTree)adaptor.create(MOD_ASSIGN378);
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN378_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:814:17: SHIFT_LEFT_ASSIGN
                            {
                            SHIFT_LEFT_ASSIGN379=(Token)match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10718); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN379_tree = (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN379);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN379_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:815:17: SHIFT_RIGHT_ASSIGN
                            {
                            SHIFT_RIGHT_ASSIGN380=(Token)match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10737); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN380_tree = (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN380);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN380_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:816:17: BIT_SHIFT_RIGHT_ASSIGN
                            {
                            BIT_SHIFT_RIGHT_ASSIGN381=(Token)match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10756); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN381_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN381);
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN381_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression10778);
                    assignmentExpression382=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression382.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:821:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION384=null;
        Token COLON386=null;
        JavaParser.logicalOrExpression_return logicalOrExpression383 = null;

        JavaParser.assignmentExpression_return assignmentExpression385 = null;

        JavaParser.conditionalExpression_return conditionalExpression387 = null;


        CommonTree QUESTION384_tree=null;
        CommonTree COLON386_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:822:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:822:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression10803);
            logicalOrExpression383=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression383.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:822:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==QUESTION) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:822:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION384=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression10806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION384_tree = (CommonTree)adaptor.create(QUESTION384);
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION384_tree, root_0);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression10809);
                    assignmentExpression385=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression385.getTree());
                    COLON386=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression10811); if (state.failed) return retval;
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression10814);
                    conditionalExpression387=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:825:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR logicalAndExpression )* ;
    public final JavaParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        JavaParser.logicalOrExpression_return retval = new JavaParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR389=null;
        JavaParser.logicalAndExpression_return logicalAndExpression388 = null;

        JavaParser.logicalAndExpression_return logicalAndExpression390 = null;


        CommonTree LOGICAL_OR389_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:826:5: ( logicalAndExpression ( LOGICAL_OR logicalAndExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:826:9: logicalAndExpression ( LOGICAL_OR logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10835);
            logicalAndExpression388=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression388.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:826:30: ( LOGICAL_OR logicalAndExpression )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==LOGICAL_OR) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:826:31: LOGICAL_OR logicalAndExpression
            	    {
            	    LOGICAL_OR389=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression10838); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR389_tree = (CommonTree)adaptor.create(LOGICAL_OR389);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR389_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10841);
            	    logicalAndExpression390=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression390.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:829:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* ;
    public final JavaParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
        JavaParser.logicalAndExpression_return retval = new JavaParser.logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND392=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression391 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression393 = null;


        CommonTree LOGICAL_AND392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:830:5: ( inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:830:9: inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10862);
            inclusiveOrExpression391=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression391.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:830:31: ( LOGICAL_AND inclusiveOrExpression )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==LOGICAL_AND) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:830:32: LOGICAL_AND inclusiveOrExpression
            	    {
            	    LOGICAL_AND392=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression10865); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND392_tree = (CommonTree)adaptor.create(LOGICAL_AND392);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND392_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10868);
            	    inclusiveOrExpression393=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression393.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:833:1: inclusiveOrExpression : exclusiveOrExpression ( OR exclusiveOrExpression )* ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR395=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression394 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression396 = null;


        CommonTree OR395_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:834:5: ( exclusiveOrExpression ( OR exclusiveOrExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:834:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10889);
            exclusiveOrExpression394=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression394.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:834:31: ( OR exclusiveOrExpression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==OR) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:834:32: OR exclusiveOrExpression
            	    {
            	    OR395=(Token)match(input,OR,FOLLOW_OR_in_inclusiveOrExpression10892); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR395_tree = (CommonTree)adaptor.create(OR395);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR395_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10895);
            	    exclusiveOrExpression396=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression396.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:837:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR398=null;
        JavaParser.andExpression_return andExpression397 = null;

        JavaParser.andExpression_return andExpression399 = null;


        CommonTree XOR398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:838:5: ( andExpression ( XOR andExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:838:9: andExpression ( XOR andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10916);
            andExpression397=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression397.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:838:23: ( XOR andExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==XOR) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:838:24: XOR andExpression
            	    {
            	    XOR398=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression10919); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR398_tree = (CommonTree)adaptor.create(XOR398);
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR398_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10922);
            	    andExpression399=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression399.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:841:1: andExpression : equalityExpression ( AND equalityExpression )* ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND401=null;
        JavaParser.equalityExpression_return equalityExpression400 = null;

        JavaParser.equalityExpression_return equalityExpression402 = null;


        CommonTree AND401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:842:5: ( equalityExpression ( AND equalityExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:842:9: equalityExpression ( AND equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression10943);
            equalityExpression400=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression400.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:842:28: ( AND equalityExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==AND) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:842:29: AND equalityExpression
            	    {
            	    AND401=(Token)match(input,AND,FOLLOW_AND_in_andExpression10946); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND401_tree = (CommonTree)adaptor.create(AND401);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND401_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression10949);
            	    equalityExpression402=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression402.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:845:1: equalityExpression : instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL404=null;
        Token NOT_EQUAL405=null;
        JavaParser.instanceOfExpression_return instanceOfExpression403 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression406 = null;


        CommonTree EQUAL404_tree=null;
        CommonTree NOT_EQUAL405_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:846:5: ( instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:846:9: instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression10970);
            instanceOfExpression403=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression403.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:847:9: ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==EQUAL||LA117_0==NOT_EQUAL) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:847:13: ( EQUAL | NOT_EQUAL ) instanceOfExpression
            	    {
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:847:13: ( EQUAL | NOT_EQUAL )
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==EQUAL) ) {
            	        alt116=1;
            	    }
            	    else if ( (LA116_0==NOT_EQUAL) ) {
            	        alt116=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 116, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:847:17: EQUAL
            	            {
            	            EQUAL404=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression10989); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL404_tree = (CommonTree)adaptor.create(EQUAL404);
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL404_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:848:17: NOT_EQUAL
            	            {
            	            NOT_EQUAL405=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression11008); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NOT_EQUAL405_tree = (CommonTree)adaptor.create(NOT_EQUAL405);
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL405_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11038);
            	    instanceOfExpression406=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression406.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:854:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF408=null;
        JavaParser.relationalExpression_return relationalExpression407 = null;

        JavaParser.type_return type409 = null;


        CommonTree INSTANCEOF408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:855:5: ( relationalExpression ( INSTANCEOF type )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:855:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11068);
            relationalExpression407=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression407.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:855:30: ( INSTANCEOF type )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==INSTANCEOF) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:855:31: INSTANCEOF type
                    {
                    INSTANCEOF408=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression11071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF408_tree = (CommonTree)adaptor.create(INSTANCEOF408);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF408_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression11074);
                    type409=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type409.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:858:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL411=null;
        Token GREATER_OR_EQUAL412=null;
        Token LESS_THAN413=null;
        Token GREATER_THAN414=null;
        JavaParser.shiftExpression_return shiftExpression410 = null;

        JavaParser.shiftExpression_return shiftExpression415 = null;


        CommonTree LESS_OR_EQUAL411_tree=null;
        CommonTree GREATER_OR_EQUAL412_tree=null;
        CommonTree LESS_THAN413_tree=null;
        CommonTree GREATER_THAN414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:859:5: ( shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:859:9: shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11095);
            shiftExpression410=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression410.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:860:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0>=GREATER_OR_EQUAL && LA120_0<=GREATER_THAN)||(LA120_0>=LESS_OR_EQUAL && LA120_0<=LESS_THAN)) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:860:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
            	    {
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:860:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )
            	    int alt119=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt119=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt119=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt119=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt119=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 119, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt119) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:860:17: LESS_OR_EQUAL
            	            {
            	            LESS_OR_EQUAL411=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression11114); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_OR_EQUAL411_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL411);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL411_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:861:17: GREATER_OR_EQUAL
            	            {
            	            GREATER_OR_EQUAL412=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11133); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_OR_EQUAL412_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL412);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL412_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:862:17: LESS_THAN
            	            {
            	            LESS_THAN413=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression11152); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN413_tree = (CommonTree)adaptor.create(LESS_THAN413);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN413_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:863:17: GREATER_THAN
            	            {
            	            GREATER_THAN414=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression11171); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN414_tree = (CommonTree)adaptor.create(GREATER_THAN414);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN414_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11200);
            	    shiftExpression415=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression415.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:869:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT417=null;
        Token SHIFT_RIGHT418=null;
        Token SHIFT_LEFT419=null;
        JavaParser.additiveExpression_return additiveExpression416 = null;

        JavaParser.additiveExpression_return additiveExpression420 = null;


        CommonTree BIT_SHIFT_RIGHT417_tree=null;
        CommonTree SHIFT_RIGHT418_tree=null;
        CommonTree SHIFT_LEFT419_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:870:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:870:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11234);
            additiveExpression416=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression416.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:871:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==BIT_SHIFT_RIGHT||LA122_0==SHIFT_LEFT||LA122_0==SHIFT_RIGHT) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:871:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:871:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt121=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt121=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt121=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt121=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt121) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:871:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT417=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11252); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT417_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT417);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT417_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:872:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT418=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression11271); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT418_tree = (CommonTree)adaptor.create(SHIFT_RIGHT418);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT418_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:873:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT419=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression11290); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT419_tree = (CommonTree)adaptor.create(SHIFT_LEFT419);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT419_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11319);
            	    additiveExpression420=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression420.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:879:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS422=null;
        Token MINUS423=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression421 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression424 = null;


        CommonTree PLUS422_tree=null;
        CommonTree MINUS423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:880:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:880:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11349);
            multiplicativeExpression421=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression421.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:881:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==MINUS||LA124_0==PLUS) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:881:13: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:881:13: ( PLUS | MINUS )
            	    int alt123=2;
            	    int LA123_0 = input.LA(1);

            	    if ( (LA123_0==PLUS) ) {
            	        alt123=1;
            	    }
            	    else if ( (LA123_0==MINUS) ) {
            	        alt123=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt123) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:881:17: PLUS
            	            {
            	            PLUS422=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression11367); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS422_tree = (CommonTree)adaptor.create(PLUS422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS422_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:882:17: MINUS
            	            {
            	            MINUS423=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression11386); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS423_tree = (CommonTree)adaptor.create(MINUS423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS423_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11415);
            	    multiplicativeExpression424=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression424.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:888:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR426=null;
        Token DIV427=null;
        Token MOD428=null;
        JavaParser.unaryExpression_return unaryExpression425 = null;

        JavaParser.unaryExpression_return unaryExpression429 = null;


        CommonTree STAR426_tree=null;
        CommonTree DIV427_tree=null;
        CommonTree MOD428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:889:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:889:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11445);
            unaryExpression425=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression425.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:890:9: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==DIV||LA126_0==MOD||LA126_0==STAR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:890:13: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:890:13: ( STAR | DIV | MOD )
            	    int alt125=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt125=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt125=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt125=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 125, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt125) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:890:17: STAR
            	            {
            	            STAR426=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression11464); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR426_tree = (CommonTree)adaptor.create(STAR426);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR426_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:891:17: DIV
            	            {
            	            DIV427=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression11483); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV427_tree = (CommonTree)adaptor.create(DIV427);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV427_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:892:17: MOD
            	            {
            	            MOD428=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression11502); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD428_tree = (CommonTree)adaptor.create(MOD428);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD428_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11531);
            	    unaryExpression429=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression429.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:898:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS430=null;
        Token MINUS432=null;
        Token INC434=null;
        Token DEC436=null;
        JavaParser.unaryExpression_return unaryExpression431 = null;

        JavaParser.unaryExpression_return unaryExpression433 = null;

        JavaParser.postfixedExpression_return postfixedExpression435 = null;

        JavaParser.postfixedExpression_return postfixedExpression437 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus438 = null;


        CommonTree PLUS430_tree=null;
        CommonTree MINUS432_tree=null;
        CommonTree INC434_tree=null;
        CommonTree DEC436_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:899:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt127=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt127=1;
                }
                break;
            case MINUS:
                {
                alt127=2;
                }
                break;
            case INC:
                {
                alt127=3;
                }
                break;
            case DEC:
                {
                alt127=4;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt127=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:899:9: PLUS unaryExpression
                    {
                    PLUS430=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression11565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS430);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11567);
                    unaryExpression431=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression431.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 899:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:899:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_PLUS, PLUS430, "UNARY_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:900:9: MINUS unaryExpression
                    {
                    MINUS432=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression11594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS432);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11596);
                    unaryExpression433=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression433.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 900:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:900:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, MINUS432, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:901:9: INC postfixedExpression
                    {
                    INC434=(Token)match(input,INC,FOLLOW_INC_in_unaryExpression11622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC434);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11624);
                    postfixedExpression435=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression435.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 901:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:901:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INC, INC434, "PRE_INC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:902:9: DEC postfixedExpression
                    {
                    DEC436=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpression11648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC436);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11650);
                    postfixedExpression437=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression437.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 902:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:902:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DEC, DEC436, "PRE_DEC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:903:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11674);
                    unaryExpressionNotPlusMinus438=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus438.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:906:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT439=null;
        Token LOGICAL_NOT441=null;
        Token LPAREN443=null;
        Token RPAREN445=null;
        JavaParser.unaryExpression_return unaryExpression440 = null;

        JavaParser.unaryExpression_return unaryExpression442 = null;

        JavaParser.type_return type444 = null;

        JavaParser.unaryExpression_return unaryExpression446 = null;

        JavaParser.postfixedExpression_return postfixedExpression447 = null;


        CommonTree NOT439_tree=null;
        CommonTree LOGICAL_NOT441_tree=null;
        CommonTree LPAREN443_tree=null;
        CommonTree RPAREN445_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:907:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
            int alt128=4;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:907:9: NOT unaryExpression
                    {
                    NOT439=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus11693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT439);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11695);
                    unaryExpression440=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression440.getTree());


                    // AST REWRITE
                    // elements: NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 907:57: -> ^( NOT unaryExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:907:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:908:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT441=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT441);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11744);
                    unaryExpression442=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression442.getTree());


                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 908:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:908:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:909:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN443=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN443);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus11785);
                    type444=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type444.getTree());
                    RPAREN445=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN445);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11789);
                    unaryExpression446=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression446.getTree());


                    // AST REWRITE
                    // elements: type, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 909:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:909:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST_EXPR, LPAREN443, "CAST_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:910:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus11824);
                    postfixedExpression447=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression447.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixedExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:913:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final JavaParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
        JavaParser.postfixedExpression_return retval = new JavaParser.postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT450=null;
        Token THIS452=null;
        Token SUPER454=null;
        Token IDENT455=null;
        Token LBRACK458=null;
        Token RBRACK460=null;
        Token INC461=null;
        Token DEC462=null;
        JavaParser.primaryExpression_return primaryExpression448 = null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified449 = null;

        JavaParser.arguments_return arguments451 = null;

        JavaParser.arguments_return arguments453 = null;

        JavaParser.arguments_return arguments456 = null;

        JavaParser.innerNewExpression_return innerNewExpression457 = null;

        JavaParser.expression_return expression459 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT450_tree=null;
        CommonTree THIS452_tree=null;
        CommonTree SUPER454_tree=null;
        CommonTree IDENT455_tree=null;
        CommonTree LBRACK458_tree=null;
        CommonTree RBRACK460_tree=null;
        CommonTree INC461_tree=null;
        CommonTree DEC462_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:915:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:915:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:915:9: ( primaryExpression -> primaryExpression )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:915:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression11860);
            primaryExpression448=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression448.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 915:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:918:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop133:
            do {
                int alt133=3;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==DOT) ) {
                    alt133=1;
                }
                else if ( (LA133_0==LBRACK) ) {
                    alt133=2;
                }


                switch (alt133) {
            	case 1 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:918:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression11922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:919:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt132=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt132=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt132=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA132_3 = input.LA(2);

            	        if ( (LA132_3==DOT) ) {
            	            alt132=4;
            	        }
            	        else if ( (LA132_3==LPAREN) ) {
            	            alt132=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 132, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt132=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 132, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt132) {
            	        case 1 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:919:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:919:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:919:21: ( genericTypeArgumentListSimplified )?
            	            int alt129=2;
            	            int LA129_0 = input.LA(1);

            	            if ( (LA129_0==LESS_THAN) ) {
            	                alt129=1;
            	            }
            	            switch (alt129) {
            	                case 1 :
            	                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11972);
            	                    genericTypeArgumentListSimplified449=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified449.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT450=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12054); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT450);



            	            // AST REWRITE
            	            // elements: postfixedExpression, IDENT, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 921:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:921:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:923:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt130=2;
            	            int LA130_0 = input.LA(1);

            	            if ( (LA130_0==LPAREN) ) {
            	                alt130=1;
            	            }
            	            switch (alt130) {
            	                case 1 :
            	                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:923:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12133);
            	                    arguments451=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments451.getTree());


            	                    // AST REWRITE
            	                    // elements: arguments, genericTypeArgumentListSimplified, postfixedExpression
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 923:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:923:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:923:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:925:17: THIS
            	            {
            	            THIS452=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression12207); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS452);



            	            // AST REWRITE
            	            // elements: THIS, DOT, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 925:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:925:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_THIS.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:926:17: Super= SUPER arguments
            	            {
            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12270); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression12272);
            	            arguments453=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments453.getTree());


            	            // AST REWRITE
            	            // elements: postfixedExpression, arguments
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 926:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:926:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:927:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:927:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:927:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER454=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12325); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER454);

            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12329); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT455=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12331); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT455);



            	            // AST REWRITE
            	            // elements: postfixedExpression, IDENT, SUPER, outerDot, innerDot
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 927:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:927:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:927:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());
            	                adaptor.addChild(root_2, stream_SUPER.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:929:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt131=2;
            	            int LA131_0 = input.LA(1);

            	            if ( (LA131_0==LPAREN) ) {
            	                alt131=1;
            	            }
            	            switch (alt131) {
            	                case 1 :
            	                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:929:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12398);
            	                    arguments456=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments456.getTree());


            	                    // AST REWRITE
            	                    // elements: arguments, postfixedExpression
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 929:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:929:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:931:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12469);
            	            innerNewExpression457=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression457.getTree());


            	            // AST REWRITE
            	            // elements: postfixedExpression, DOT, innerNewExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 931:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:931:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:933:13: LBRACK expression RBRACK
            	    {
            	    LBRACK458=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression12526); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK458);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression12528);
            	    expression459=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression459.getTree());
            	    RBRACK460=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression12530); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK460);



            	    // AST REWRITE
            	    // elements: expression, postfixedExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 933:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:933:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:936:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt134=3;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==INC) ) {
                alt134=1;
            }
            else if ( (LA134_0==DEC) ) {
                alt134=2;
            }
            switch (alt134) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:936:13: INC
                    {
                    INC461=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression12591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC461);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 936:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:936:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INC, INC461, "POST_INC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:937:13: DEC
                    {
                    DEC462=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression12615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC462);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:937:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DEC, DEC462, "POST_DEC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:941:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JavaParser.primaryExpression_return primaryExpression() throws RecognitionException {
        JavaParser.primaryExpression_return retval = new JavaParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER468=null;
        Token DOT470=null;
        Token IDENT471=null;
        Token IDENT473=null;
        Token THIS475=null;
        Token THIS477=null;
        Token SUPER479=null;
        Token SUPER481=null;
        Token DOT482=null;
        Token IDENT483=null;
        Token DOT487=null;
        Token CLASS488=null;
        Token VOID489=null;
        Token DOT490=null;
        Token CLASS491=null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression463 = null;

        JavaParser.literal_return literal464 = null;

        JavaParser.newExpression_return newExpression465 = null;

        JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression466 = null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified467 = null;

        JavaParser.arguments_return arguments469 = null;

        JavaParser.arguments_return arguments472 = null;

        JavaParser.arguments_return arguments474 = null;

        JavaParser.arguments_return arguments476 = null;

        JavaParser.arguments_return arguments478 = null;

        JavaParser.arguments_return arguments480 = null;

        JavaParser.arguments_return arguments484 = null;

        JavaParser.primitiveType_return primitiveType485 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator486 = null;


        CommonTree SUPER468_tree=null;
        CommonTree DOT470_tree=null;
        CommonTree IDENT471_tree=null;
        CommonTree IDENT473_tree=null;
        CommonTree THIS475_tree=null;
        CommonTree THIS477_tree=null;
        CommonTree SUPER479_tree=null;
        CommonTree SUPER481_tree=null;
        CommonTree DOT482_tree=null;
        CommonTree IDENT483_tree=null;
        CommonTree DOT487_tree=null;
        CommonTree CLASS488_tree=null;
        CommonTree VOID489_tree=null;
        CommonTree DOT490_tree=null;
        CommonTree CLASS491_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:942:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt140=10;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:942:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12663);
                    parenthesizedExpression463=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression463.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:943:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression12673);
                    literal464=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal464.getTree());

                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:944:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression12683);
                    newExpression465=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression465.getTree());

                    }
                    break;
                case 4 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:945:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12693);
                    qualifiedIdentExpression466=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression466.getTree());

                    }
                    break;
                case 5 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:946:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12703);
                    genericTypeArgumentListSimplified467=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified467.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:947:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt136=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt136=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt136=2;
                        }
                        break;
                    case THIS:
                        {
                        alt136=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);

                        throw nvae;
                    }

                    switch (alt136) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:947:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER468=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12718); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER468);

                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:948:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt135=2;
                            int LA135_0 = input.LA(1);

                            if ( (LA135_0==LPAREN) ) {
                                alt135=1;
                            }
                            else if ( (LA135_0==DOT) ) {
                                alt135=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);

                                throw nvae;
                            }
                            switch (alt135) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:948:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12736);
                                    arguments469=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments469.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 948:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:948:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER468, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:949:17: DOT IDENT arguments
                                    {
                                    DOT470=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression12796); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT470);

                                    IDENT471=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12798); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT471);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression12800);
                                    arguments472=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments472.getTree());


                                    // AST REWRITE
                                    // elements: DOT, IDENT, arguments, genericTypeArgumentListSimplified, SUPER
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 949:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:949:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:949:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_SUPER.nextNode());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:951:13: IDENT arguments
                            {
                            IDENT473=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12867); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT473);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12869);
                            arguments474=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments474.getTree());


                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 951:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:951:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:952:13: THIS arguments
                            {
                            THIS475=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression12924); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS475);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12926);
                            arguments476=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments476.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 952:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:952:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS475, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:954:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:954:9: ( THIS -> THIS )
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:954:13: THIS
                    {
                    THIS477=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression12991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS477);



                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 954:57: -> THIS
                    {
                        adaptor.addChild(root_0, stream_THIS.nextNode());

                    }

                    retval.tree = root_0;}
                    }

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:956:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==LPAREN) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:956:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13059);
                            arguments478=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments478.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 956:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:956:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS477, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:958:9: SUPER arguments
                    {
                    SUPER479=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER479);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13126);
                    arguments480=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments480.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 958:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:958:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER479, "SUPER_CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:959:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:959:9: ( SUPER DOT IDENT )
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:959:13: SUPER DOT IDENT
                    {
                    SUPER481=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER481);

                    DOT482=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT482);

                    IDENT483=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT483);


                    }

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:961:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==LPAREN) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==EOF||(LA138_0>=AND && LA138_0<=ASSIGN)||(LA138_0>=BIT_SHIFT_RIGHT && LA138_0<=DOT)||(LA138_0>=EQUAL && LA138_0<=LBRACK)||(LA138_0>=LESS_OR_EQUAL && LA138_0<=LOGICAL_AND)||LA138_0==LOGICAL_OR||(LA138_0>=MINUS && LA138_0<=MOD_ASSIGN)||(LA138_0>=NOT_EQUAL && LA138_0<=XOR_ASSIGN)||LA138_0==INSTANCEOF) ) {
                        alt138=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);

                        throw nvae;
                    }
                    switch (alt138) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:961:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13210);
                            arguments484=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments484.getTree());


                            // AST REWRITE
                            // elements: IDENT, arguments, DOT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 961:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:961:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:961:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                adaptor.addChild(root_2, stream_SUPER.nextNode());
                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:962:57: 
                            {

                            // AST REWRITE
                            // elements: IDENT, DOT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 962:57: -> ^( DOT SUPER IDENT )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:962:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.nextNode());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:964:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:964:9: ( primitiveType -> primitiveType )
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:964:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression13352);
                    primitiveType485=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType485.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:966:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==LBRACK) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:966:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13411);
                    	    arrayDeclarator486=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator486.getTree());


                    	    // AST REWRITE
                    	    // elements: primaryExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 966:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:966:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    DOT487=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT487);

                    CLASS488=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS488);



                    // AST REWRITE
                    // elements: primaryExpression, DOT, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 968:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:968:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:969:9: VOID DOT CLASS
                    {
                    VOID489=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression13536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID489);

                    DOT490=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT490);

                    CLASS491=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS491);



                    // AST REWRITE
                    // elements: CLASS, VOID, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 969:57: -> ^( DOT VOID CLASS )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:969:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_VOID.nextNode());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:972:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
        JavaParser.qualifiedIdentExpression_return retval = new JavaParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT494=null;
        Token CLASS495=null;
        Token CLASS497=null;
        Token SUPER500=null;
        Token IDENT501=null;
        Token IDENT503=null;
        Token THIS505=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier492 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator493 = null;

        JavaParser.arguments_return arguments496 = null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified498 = null;

        JavaParser.arguments_return arguments499 = null;

        JavaParser.arguments_return arguments502 = null;

        JavaParser.arguments_return arguments504 = null;

        JavaParser.arguments_return arguments506 = null;

        JavaParser.innerNewExpression_return innerNewExpression507 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT494_tree=null;
        CommonTree CLASS495_tree=null;
        CommonTree CLASS497_tree=null;
        CommonTree SUPER500_tree=null;
        CommonTree IDENT501_tree=null;
        CommonTree IDENT503_tree=null;
        CommonTree THIS505_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:974:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:974:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:974:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:974:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13620);
            qualifiedIdentifier492=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier492.getTree());


            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 974:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt144=4;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==LBRACK) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13690);
                    	    arrayDeclarator493=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator493.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, qualifiedIdentExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 977:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:979:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:979:17: DOT CLASS
                    {
                    DOT494=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT494);

                    CLASS495=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS495);



                    // AST REWRITE
                    // elements: CLASS, DOT, qualifiedIdentExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 979:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:979:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:981:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13830);
                    arguments496=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments496.getTree());


                    // AST REWRITE
                    // elements: arguments, qualifiedIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 981:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:981:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:982:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:983:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt143=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt143=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt143=2;
                        }
                        break;
                    case THIS:
                        {
                        alt143=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt143=4;
                        }
                        break;
                    case NEW:
                        {
                        alt143=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }

                    switch (alt143) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:983:17: CLASS
                            {
                            CLASS497=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13909); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS497);



                            // AST REWRITE
                            // elements: DOT, CLASS, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 983:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:983:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:984:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13972);
                            genericTypeArgumentListSimplified498=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified498.getTree());
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:985:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt142=3;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==SUPER) ) {
                                int LA142_1 = input.LA(2);

                                if ( (LA142_1==DOT) ) {
                                    alt142=2;
                                }
                                else if ( (LA142_1==LPAREN) ) {
                                    alt142=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 142, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA142_0==IDENT) ) {
                                alt142=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 142, 0, input);

                                throw nvae;
                            }
                            switch (alt142) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:985:21: Super= SUPER arguments
                                    {
                                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression13997); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(Super);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13999);
                                    arguments499=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments499.getTree());


                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 985:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:985:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:986:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER500=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14049); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER500);

                                    innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14053); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(innerDot);

                                    IDENT501=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14055); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT501);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14057);
                                    arguments502=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments502.getTree());


                                    // AST REWRITE
                                    // elements: arguments, IDENT, qualifiedIdentifier, SUPER, innerDot, outerDot, genericTypeArgumentListSimplified
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 986:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:986:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:986:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:986:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_SUPER.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:987:21: IDENT arguments
                                    {
                                    IDENT503=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14107); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT503);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14109);
                                    arguments504=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments504.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, qualifiedIdentifier, arguments, IDENT, DOT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 987:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:987:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:987:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:989:17: THIS
                            {
                            THIS505=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression14184); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS505);



                            // AST REWRITE
                            // elements: THIS, qualifiedIdentifier, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 989:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:989:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_THIS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:990:17: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14250); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(Super);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14252);
                            arguments506=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments506.getTree());


                            // AST REWRITE
                            // elements: qualifiedIdentifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 990:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:990:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:991:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14300);
                            innerNewExpression507=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression507.getTree());


                            // AST REWRITE
                            // elements: DOT, innerNewExpression, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 991:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:991:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:996:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final JavaParser.newExpression_return newExpression() throws RecognitionException {
        JavaParser.newExpression_return retval = new JavaParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW508=null;
        JavaParser.primitiveType_return primitiveType509 = null;

        JavaParser.newArrayConstruction_return newArrayConstruction510 = null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified511 = null;

        JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified512 = null;

        JavaParser.newArrayConstruction_return newArrayConstruction513 = null;

        JavaParser.arguments_return arguments514 = null;

        JavaParser.classBody_return classBody515 = null;


        CommonTree NEW508_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:997:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:997:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW508=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression14376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW508);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:998:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==BOOLEAN||LA148_0==BYTE||LA148_0==CHAR||LA148_0==DOUBLE||LA148_0==FLOAT||(LA148_0>=INT && LA148_0<=LONG)||LA148_0==SHORT) ) {
                alt148=1;
            }
            else if ( (LA148_0==LESS_THAN||LA148_0==IDENT) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:998:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression14392);
                    primitiveType509=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType509.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14394);
                    newArrayConstruction510=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction510.getTree());


                    // AST REWRITE
                    // elements: newArrayConstruction, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 999:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:999:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW508, "STATIC_ARRAY_CREATOR"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1000:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1000:13: ( genericTypeArgumentListSimplified )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==LESS_THAN) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14438);
                            genericTypeArgumentListSimplified511=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified511.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14441);
                    qualifiedTypeIdentSimplified512=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified512.getTree());
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1001:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==LBRACK) ) {
                        alt147=1;
                    }
                    else if ( (LA147_0==LPAREN) ) {
                        alt147=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }
                    switch (alt147) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1001:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression14459);
                            newArrayConstruction513=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction513.getTree());


                            // AST REWRITE
                            // elements: qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified, newArrayConstruction
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1002:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1002:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW508, "STATIC_ARRAY_CREATOR"), root_1);

                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1002:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1003:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression14524);
                            arguments514=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments514.getTree());
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1003:27: ( classBody )?
                            int alt146=2;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==LCURLY) ) {
                                alt146=1;
                            }
                            switch (alt146) {
                                case 1 :
                                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression14526);
                                    classBody515=classBody();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_classBody.add(classBody515.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, classBody
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1004:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1004:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW508, "STATIC_ARRAY_CREATOR"), root_1);

                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1004:76: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1004:150: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.nextTree());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerNewExpression"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1009:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final JavaParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
        JavaParser.innerNewExpression_return retval = new JavaParser.innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW516=null;
        Token IDENT518=null;
        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified517 = null;

        JavaParser.arguments_return arguments519 = null;

        JavaParser.classBody_return classBody520 = null;


        CommonTree NEW516_tree=null;
        CommonTree IDENT518_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1010:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1010:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW516=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression14625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW516);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1010:13: ( genericTypeArgumentListSimplified )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==LESS_THAN) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14627);
                    genericTypeArgumentListSimplified517=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified517.getTree());

                    }
                    break;

            }

            IDENT518=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression14630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT518);

            pushFollow(FOLLOW_arguments_in_innerNewExpression14632);
            arguments519=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments519.getTree());
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1010:64: ( classBody )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==LCURLY) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression14634);
                    classBody520=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody520.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: genericTypeArgumentListSimplified, arguments, IDENT, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1011:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1011:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW516, "STATIC_ARRAY_CREATOR"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1011:68: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                }
                stream_genericTypeArgumentListSimplified.reset();
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_arguments.nextTree());
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1011:119: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newArrayConstruction"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1014:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final JavaParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
        JavaParser.newArrayConstruction_return retval = new JavaParser.newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK523=null;
        Token RBRACK525=null;
        Token LBRACK526=null;
        Token RBRACK528=null;
        JavaParser.arrayDeclaratorList_return arrayDeclaratorList521 = null;

        JavaParser.arrayInitializer_return arrayInitializer522 = null;

        JavaParser.expression_return expression524 = null;

        JavaParser.expression_return expression527 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList529 = null;


        CommonTree LBRACK523_tree=null;
        CommonTree RBRACK525_tree=null;
        CommonTree LBRACK526_tree=null;
        CommonTree RBRACK528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1015:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LBRACK) ) {
                int LA153_1 = input.LA(2);

                if ( (LA153_1==RBRACK) ) {
                    alt153=1;
                }
                else if ( (LA153_1==DEC||LA153_1==INC||LA153_1==LESS_THAN||LA153_1==LOGICAL_NOT||(LA153_1>=LPAREN && LA153_1<=MINUS)||LA153_1==NOT||LA153_1==PLUS||LA153_1==BOOLEAN||LA153_1==BYTE||LA153_1==CHAR||LA153_1==DOUBLE||LA153_1==FALSE||LA153_1==FLOAT||(LA153_1>=INT && LA153_1<=LONG)||(LA153_1>=NEW && LA153_1<=NULL)||LA153_1==SHORT||LA153_1==SUPER||LA153_1==THIS||LA153_1==TRUE||LA153_1==VOID||(LA153_1>=IDENT && LA153_1<=STRING_LITERAL)) ) {
                    alt153=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1015:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14680);
                    arrayDeclaratorList521=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList521.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction14682);
                    arrayInitializer522=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer522.getTree());

                    }
                    break;
                case 2 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK523=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14692); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_newArrayConstruction14695);
                    expression524=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression524.getTree());
                    RBRACK525=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14697); if (state.failed) return retval;
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:36: ( LBRACK expression RBRACK )*
                    loop151:
                    do {
                        int alt151=2;
                        alt151 = dfa151.predict(input);
                        switch (alt151) {
                    	case 1 :
                    	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:37: LBRACK expression RBRACK
                    	    {
                    	    LBRACK526=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14701); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction14704);
                    	    expression527=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression527.getTree());
                    	    RBRACK528=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14706); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);

                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:66: ( arrayDeclaratorList )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==LBRACK) ) {
                        int LA152_1 = input.LA(2);

                        if ( (LA152_1==RBRACK) ) {
                            alt152=1;
                        }
                    }
                    switch (alt152) {
                        case 1 :
                            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14711);
                            arrayDeclaratorList529=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList529.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1019:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN530=null;
        Token RPAREN532=null;
        JavaParser.expressionList_return expressionList531 = null;


        CommonTree LPAREN530_tree=null;
        CommonTree RPAREN532_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1020:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1020:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN530=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments14731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN530);

            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1020:16: ( expressionList )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==DEC||LA154_0==INC||LA154_0==LESS_THAN||LA154_0==LOGICAL_NOT||(LA154_0>=LPAREN && LA154_0<=MINUS)||LA154_0==NOT||LA154_0==PLUS||LA154_0==BOOLEAN||LA154_0==BYTE||LA154_0==CHAR||LA154_0==DOUBLE||LA154_0==FALSE||LA154_0==FLOAT||(LA154_0>=INT && LA154_0<=LONG)||(LA154_0>=NEW && LA154_0<=NULL)||LA154_0==SHORT||LA154_0==SUPER||LA154_0==THIS||LA154_0==TRUE||LA154_0==VOID||(LA154_0>=IDENT && LA154_0<=STRING_LITERAL)) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14733);
                    expressionList531=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList531.getTree());

                    }
                    break;

            }

            RPAREN532=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments14736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN532);



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1021:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1021:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, LPAREN530, "ARGUMENT_LIST"), root_1);

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1021:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1024:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set533=null;

        CommonTree set533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1025:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
            // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set533=(Token)input.LT(1);
            if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE||(input.LA(1)>=HEX_LITERAL && input.LA(1)<=STRING_LITERAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set533));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    // $ANTLR start synpred14_Java
    public final void synpred14_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:334:9: ( GREATER_THAN )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:334:9: GREATER_THAN
        {
        match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred14_Java5117); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Java

    // $ANTLR start synpred15_Java
    public final void synpred15_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:335:9: ( SHIFT_RIGHT )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:335:9: SHIFT_RIGHT
        {
        match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred15_Java5127); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Java

    // $ANTLR start synpred16_Java
    public final void synpred16_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:336:9: ( BIT_SHIFT_RIGHT )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:336:9: BIT_SHIFT_RIGHT
        {
        match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred16_Java5137); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Java

    // $ANTLR start synpred17_Java
    public final void synpred17_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:341:15: ( bound )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:341:15: bound
        {
        pushFollow(FOLLOW_bound_in_synpred17_Java5167);
        bound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Java

    // $ANTLR start synpred32_Java
    public final void synpred32_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:398:9: ( STATIC block )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:398:9: STATIC block
        {
        match(input,STATIC,FOLLOW_STATIC_in_synpred32_Java5699); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred32_Java5701);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Java

    // $ANTLR start synpred42_Java
    public final void synpred42_Java_fragment() throws RecognitionException {   
        Token ident=null;

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
        {
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )?
        int alt160=2;
        int LA160_0 = input.LA(1);

        if ( (LA160_0==LESS_THAN) ) {
            alt160=1;
        }
        switch (alt160) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred42_Java5738);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
        int alt167=3;
        switch ( input.LA(1) ) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            alt167=1;
            }
            break;
        case IDENT:
            {
            int LA167_2 = input.LA(2);

            if ( (LA167_2==LPAREN) ) {
                alt167=3;
            }
            else if ( (LA167_2==DOT||LA167_2==LBRACK||LA167_2==LESS_THAN||LA167_2==IDENT) ) {
                alt167=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 2, input);

                throw nvae;
            }
            }
            break;
        case VOID:
            {
            alt167=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 167, 0, input);

            throw nvae;
        }

        switch (alt167) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                {
                pushFollow(FOLLOW_type_in_synpred42_Java5757);
                type();

                state._fsp--;
                if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred42_Java5759); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred42_Java5761);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:48: ( arrayDeclaratorList )?
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==LBRACK) ) {
                    alt161=1;
                }
                switch (alt161) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred42_Java5763);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:69: ( throwsClause )?
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==THROWS) ) {
                    alt162=1;
                }
                switch (alt162) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred42_Java5766);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:83: ( block | SEMI )
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==LCURLY) ) {
                    alt163=1;
                }
                else if ( (LA163_0==SEMI) ) {
                    alt163=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 163, 0, input);

                    throw nvae;
                }
                switch (alt163) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:84: block
                        {
                        pushFollow(FOLLOW_block_in_synpred42_Java5770);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:92: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred42_Java5774); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                {
                match(input,VOID,FOLLOW_VOID_in_synpred42_Java5836); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred42_Java5838); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred42_Java5840);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:48: ( throwsClause )?
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==THROWS) ) {
                    alt164=1;
                }
                switch (alt164) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred42_Java5842);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:62: ( block | SEMI )
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==LCURLY) ) {
                    alt165=1;
                }
                else if ( (LA165_0==SEMI) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 0, input);

                    throw nvae;
                }
                switch (alt165) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:63: block
                        {
                        pushFollow(FOLLOW_block_in_synpred42_Java5846);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:71: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred42_Java5850); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:17: ident= IDENT formalParameterList ( throwsClause )? block
                {
                ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred42_Java5909); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred42_Java5911);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:49: ( throwsClause )?
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==THROWS) ) {
                    alt166=1;
                }
                switch (alt166) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred42_Java5913);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_block_in_synpred42_Java5916);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred42_Java

    // $ANTLR start synpred43_Java
    public final void synpred43_Java_fragment() throws RecognitionException {   
        Token ident=null;

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:399:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:399:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred43_Java5724);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        int alt176=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt176=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA176_2 = input.LA(2);

            if ( (synpred42_Java()) ) {
                alt176=1;
            }
            else if ( (true) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 2, input);

                throw nvae;
            }
            }
            break;
        case IDENT:
            {
            int LA176_3 = input.LA(2);

            if ( (synpred42_Java()) ) {
                alt176=1;
            }
            else if ( (true) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 3, input);

                throw nvae;
            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 176, 0, input);

            throw nvae;
        }

        switch (alt176) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:400:13: ( genericTypeParameterList )?
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==LESS_THAN) ) {
                    alt168=1;
                }
                switch (alt168) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred43_Java5738);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                int alt175=3;
                switch ( input.LA(1) ) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt175=1;
                    }
                    break;
                case IDENT:
                    {
                    int LA175_2 = input.LA(2);

                    if ( (LA175_2==DOT||LA175_2==LBRACK||LA175_2==LESS_THAN||LA175_2==IDENT) ) {
                        alt175=1;
                    }
                    else if ( (LA175_2==LPAREN) ) {
                        alt175=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case VOID:
                    {
                    alt175=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 0, input);

                    throw nvae;
                }

                switch (alt175) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                        {
                        pushFollow(FOLLOW_type_in_synpred43_Java5757);
                        type();

                        state._fsp--;
                        if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred43_Java5759); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred43_Java5761);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:48: ( arrayDeclaratorList )?
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==LBRACK) ) {
                            alt169=1;
                        }
                        switch (alt169) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred43_Java5763);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:69: ( throwsClause )?
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==THROWS) ) {
                            alt170=1;
                        }
                        switch (alt170) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred43_Java5766);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:83: ( block | SEMI )
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==LCURLY) ) {
                            alt171=1;
                        }
                        else if ( (LA171_0==SEMI) ) {
                            alt171=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 171, 0, input);

                            throw nvae;
                        }
                        switch (alt171) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:84: block
                                {
                                pushFollow(FOLLOW_block_in_synpred43_Java5770);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:401:92: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred43_Java5774); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 2 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred43_Java5836); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred43_Java5838); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred43_Java5840);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:48: ( throwsClause )?
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==THROWS) ) {
                            alt172=1;
                        }
                        switch (alt172) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred43_Java5842);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:62: ( block | SEMI )
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==LCURLY) ) {
                            alt173=1;
                        }
                        else if ( (LA173_0==SEMI) ) {
                            alt173=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 173, 0, input);

                            throw nvae;
                        }
                        switch (alt173) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:63: block
                                {
                                pushFollow(FOLLOW_block_in_synpred43_Java5846);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:403:71: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred43_Java5850); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 3 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:17: ident= IDENT formalParameterList ( throwsClause )? block
                        {
                        ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred43_Java5909); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred43_Java5911);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:405:49: ( throwsClause )?
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==THROWS) ) {
                            alt174=1;
                        }
                        switch (alt174) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred43_Java5913);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        pushFollow(FOLLOW_block_in_synpred43_Java5916);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:408:13: type classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred43_Java5980);
                type();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred43_Java5982);
                classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred43_Java5984); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred43_Java

    // $ANTLR start synpred44_Java
    public final void synpred44_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:411:9: ( typeDeclaration )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:411:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred44_Java6029);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_Java

    // $ANTLR start synpred50_Java
    public final void synpred50_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        {
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )?
        int alt179=2;
        int LA179_0 = input.LA(1);

        if ( (LA179_0==LESS_THAN) ) {
            alt179=1;
        }
        switch (alt179) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred50_Java6085);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==BOOLEAN||LA183_0==BYTE||LA183_0==CHAR||LA183_0==DOUBLE||LA183_0==FLOAT||(LA183_0>=INT && LA183_0<=LONG)||LA183_0==SHORT||LA183_0==IDENT) ) {
            alt183=1;
        }
        else if ( (LA183_0==VOID) ) {
            alt183=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 183, 0, input);

            throw nvae;
        }
        switch (alt183) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                {
                pushFollow(FOLLOW_type_in_synpred50_Java6104);
                type();

                state._fsp--;
                if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred50_Java6106); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred50_Java6108);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:48: ( arrayDeclaratorList )?
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==LBRACK) ) {
                    alt180=1;
                }
                switch (alt180) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred50_Java6110);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:69: ( throwsClause )?
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==THROWS) ) {
                    alt181=1;
                }
                switch (alt181) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred50_Java6113);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred50_Java6116); if (state.failed) return ;

                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                {
                match(input,VOID,FOLLOW_VOID_in_synpred50_Java6174); if (state.failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred50_Java6176); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred50_Java6178);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:48: ( throwsClause )?
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==THROWS) ) {
                    alt182=1;
                }
                switch (alt182) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred50_Java6180);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred50_Java6183); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred50_Java

    // $ANTLR start synpred51_Java
    public final void synpred51_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:416:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:416:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred51_Java6071);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        int alt189=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt189=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA189_2 = input.LA(2);

            if ( (synpred50_Java()) ) {
                alt189=1;
            }
            else if ( (true) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 2, input);

                throw nvae;
            }
            }
            break;
        case IDENT:
            {
            int LA189_3 = input.LA(2);

            if ( (synpred50_Java()) ) {
                alt189=1;
            }
            else if ( (true) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 3, input);

                throw nvae;
            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 189, 0, input);

            throw nvae;
        }

        switch (alt189) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                {
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:417:13: ( genericTypeParameterList )?
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==LESS_THAN) ) {
                    alt184=1;
                }
                switch (alt184) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred51_Java6085);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==BOOLEAN||LA188_0==BYTE||LA188_0==CHAR||LA188_0==DOUBLE||LA188_0==FLOAT||(LA188_0>=INT && LA188_0<=LONG)||LA188_0==SHORT||LA188_0==IDENT) ) {
                    alt188=1;
                }
                else if ( (LA188_0==VOID) ) {
                    alt188=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 188, 0, input);

                    throw nvae;
                }
                switch (alt188) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                        {
                        pushFollow(FOLLOW_type_in_synpred51_Java6104);
                        type();

                        state._fsp--;
                        if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred51_Java6106); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred51_Java6108);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:48: ( arrayDeclaratorList )?
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==LBRACK) ) {
                            alt185=1;
                        }
                        switch (alt185) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred51_Java6110);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:418:69: ( throwsClause )?
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==THROWS) ) {
                            alt186=1;
                        }
                        switch (alt186) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred51_Java6113);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred51_Java6116); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred51_Java6174); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred51_Java6176); if (state.failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred51_Java6178);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:420:48: ( throwsClause )?
                        int alt187=2;
                        int LA187_0 = input.LA(1);

                        if ( (LA187_0==THROWS) ) {
                            alt187=1;
                        }
                        switch (alt187) {
                            case 1 :
                                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred51_Java6180);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred51_Java6183); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:423:13: type interfaceFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred51_Java6246);
                type();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred51_Java6248);
                interfaceFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred51_Java6250); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred51_Java

    // $ANTLR start synpred52_Java
    public final void synpred52_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:426:9: ( typeDeclaration )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:426:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred52_Java6295);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_Java

    // $ANTLR start synpred58_Java
    public final void synpred58_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:465:9: ( arrayDeclarator )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:465:9: arrayDeclarator
        {
        pushFollow(FOLLOW_arrayDeclarator_in_synpred58_Java6597);
        arrayDeclarator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_Java

    // $ANTLR start synpred76_Java
    public final void synpred76_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:514:23: ( arrayDeclaratorList )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:514:23: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred76_Java6998);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_Java

    // $ANTLR start synpred77_Java
    public final void synpred77_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:519:28: ( arrayDeclaratorList )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:519:28: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred77_Java7047);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_Java

    // $ANTLR start synpred79_Java
    public final void synpred79_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:20: ( DOT typeIdent )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:529:20: DOT typeIdent
        {
        match(input,DOT,FOLLOW_DOT_in_synpred79_Java7132); if (state.failed) return ;
        pushFollow(FOLLOW_typeIdent_in_synpred79_Java7134);
        typeIdent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_Java

    // $ANTLR start synpred90_Java
    public final void synpred90_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:40: ( COMMA genericTypeArgument )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:558:40: COMMA genericTypeArgument
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred90_Java7359); if (state.failed) return ;
        pushFollow(FOLLOW_genericTypeArgument_in_synpred90_Java7361);
        genericTypeArgument();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_Java

    // $ANTLR start synpred92_Java
    public final void synpred92_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:564:18: ( genericWildcardBoundType )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:564:18: genericWildcardBoundType
        {
        pushFollow(FOLLOW_genericWildcardBoundType_in_synpred92_Java7415);
        genericWildcardBoundType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_Java

    // $ANTLR start synpred97_Java
    public final void synpred97_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:42: ( COMMA formalParameterStandardDecl )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:42: COMMA formalParameterStandardDecl
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred97_Java7633); if (state.failed) return ;
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred97_Java7635);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_Java

    // $ANTLR start synpred99_Java
    public final void synpred99_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
        {
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred99_Java7630);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:41: ( COMMA formalParameterStandardDecl )*
        loop192:
        do {
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==COMMA) ) {
                int LA192_1 = input.LA(2);

                if ( (synpred97_Java()) ) {
                    alt192=1;
                }


            }


            switch (alt192) {
        	case 1 :
        	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:42: COMMA formalParameterStandardDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred99_Java7633); if (state.failed) return ;
        	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred99_Java7635);
        	    formalParameterStandardDecl();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop192;
            }
        } while (true);

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:78: ( COMMA formalParameterVarArgDecl )?
        int alt193=2;
        int LA193_0 = input.LA(1);

        if ( (LA193_0==COMMA) ) {
            alt193=1;
        }
        switch (alt193) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:589:79: COMMA formalParameterVarArgDecl
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred99_Java7640); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred99_Java7642);
                formalParameterVarArgDecl();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred99_Java

    // $ANTLR start synpred100_Java
    public final void synpred100_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:592:13: ( formalParameterVarArgDecl )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:592:13: formalParameterVarArgDecl
        {
        pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred100_Java7699);
        formalParameterVarArgDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_Java

    // $ANTLR start synpred101_Java
    public final void synpred101_Java_fragment() throws RecognitionException {   
        Token ident=null;

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:613:13: ( DOT ident= IDENT )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:613:13: DOT ident= IDENT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred101_Java7944); if (state.failed) return ;
        ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred101_Java7948); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_Java

    // $ANTLR start synpred102_Java
    public final void synpred102_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:620:9: ( annotation )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:620:9: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred102_Java8001);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_Java

    // $ANTLR start synpred114_Java
    public final void synpred114_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:671:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:671:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred114_Java8455);
        modifierList();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred114_Java8457);
        type();

        state._fsp--;
        if (state.failed) return ;
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        int alt198=2;
        int LA198_0 = input.LA(1);

        if ( (LA198_0==IDENT) ) {
            int LA198_1 = input.LA(2);

            if ( (LA198_1==LPAREN) ) {
                alt198=1;
            }
            else if ( (LA198_1==ASSIGN||LA198_1==COMMA||LA198_1==LBRACK||LA198_1==SEMI) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 198, 0, input);

            throw nvae;
        }
        switch (alt198) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred114_Java8471); if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred114_Java8473); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred114_Java8475); if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:672:33: ( annotationDefaultValue )?
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==DEFAULT) ) {
                    alt197=1;
                }
                switch (alt197) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:0:0: annotationDefaultValue
                        {
                        pushFollow(FOLLOW_annotationDefaultValue_in_synpred114_Java8477);
                        annotationDefaultValue();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred114_Java8480); if (state.failed) return ;

                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:674:13: classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred114_Java8522);
                classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred114_Java8524); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred114_Java

    // $ANTLR start synpred116_Java
    public final void synpred116_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:692:9: ( localVariableDeclaration SEMI )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:692:9: localVariableDeclaration SEMI
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred116_Java8659);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred116_Java8661); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_Java

    // $ANTLR start synpred117_Java
    public final void synpred117_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:693:9: ( typeDeclaration )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:693:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred117_Java8672);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_Java

    // $ANTLR start synpred121_Java
    public final void synpred121_Java_fragment() throws RecognitionException {   
        JavaParser.statement_return elseStat = null;


        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:710:13: ( ELSE elseStat= statement )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:710:13: ELSE elseStat= statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred121_Java8970); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred121_Java8974);
        elseStat=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_Java

    // $ANTLR start synpred123_Java
    public final void synpred123_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:714:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:714:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
        {
        pushFollow(FOLLOW_forInit_in_synpred123_Java9157);
        forInit();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred123_Java9159); if (state.failed) return ;
        pushFollow(FOLLOW_forCondition_in_synpred123_Java9161);
        forCondition();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred123_Java9163); if (state.failed) return ;
        pushFollow(FOLLOW_forUpdater_in_synpred123_Java9165);
        forUpdater();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred123_Java9167); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred123_Java9169);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_Java

    // $ANTLR start synpred147_Java
    public final void synpred147_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:772:9: ( localVariableDeclaration )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:772:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred147_Java10228);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_Java

    // $ANTLR start synpred148_Java
    public final void synpred148_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:773:9: ( expressionList )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:773:9: expressionList
        {
        pushFollow(FOLLOW_expressionList_in_synpred148_Java10250);
        expressionList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:909:9: ( LPAREN type RPAREN unaryExpression )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:909:9: LPAREN type RPAREN unaryExpression
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred191_Java11783); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred191_Java11785);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred191_Java11787); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred191_Java11789);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred219_Java
    public final void synpred219_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:13: ( arrayDeclarator )+ ( DOT CLASS )
        {
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:13: ( arrayDeclarator )+
        int cnt221=0;
        loop221:
        do {
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==LBRACK) ) {
                alt221=1;
            }


            switch (alt221) {
        	case 1 :
        	    // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:977:17: arrayDeclarator
        	    {
        	    pushFollow(FOLLOW_arrayDeclarator_in_synpred219_Java13690);
        	    arrayDeclarator();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt221 >= 1 ) break loop221;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(221, input);
                    throw eee;
            }
            cnt221++;
        } while (true);

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:979:13: ( DOT CLASS )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:979:17: DOT CLASS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred219_Java13758); if (state.failed) return ;
        match(input,CLASS,FOLLOW_CLASS_in_synpred219_Java13760); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred219_Java

    // $ANTLR start synpred227_Java
    public final void synpred227_Java_fragment() throws RecognitionException {   
        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;

        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:982:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression ) )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:982:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
        {
        outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred227_Java13891); if (state.failed) return ;
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:983:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
        int alt224=5;
        switch ( input.LA(1) ) {
        case CLASS:
            {
            alt224=1;
            }
            break;
        case LESS_THAN:
            {
            alt224=2;
            }
            break;
        case THIS:
            {
            alt224=3;
            }
            break;
        case SUPER:
            {
            alt224=4;
            }
            break;
        case NEW:
            {
            alt224=5;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 224, 0, input);

            throw nvae;
        }

        switch (alt224) {
            case 1 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:983:17: CLASS
                {
                match(input,CLASS,FOLLOW_CLASS_in_synpred227_Java13909); if (state.failed) return ;

                }
                break;
            case 2 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:984:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred227_Java13972);
                genericTypeArgumentListSimplified();

                state._fsp--;
                if (state.failed) return ;
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:985:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                int alt223=3;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==SUPER) ) {
                    int LA223_1 = input.LA(2);

                    if ( (LA223_1==DOT) ) {
                        alt223=2;
                    }
                    else if ( (LA223_1==LPAREN) ) {
                        alt223=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 1, input);

                        throw nvae;
                    }
                }
                else if ( (LA223_0==IDENT) ) {
                    alt223=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 223, 0, input);

                    throw nvae;
                }
                switch (alt223) {
                    case 1 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:985:21: Super= SUPER arguments
                        {
                        Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred227_Java13997); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred227_Java13999);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:986:21: SUPER innerDot= DOT IDENT arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred227_Java14049); if (state.failed) return ;
                        innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred227_Java14053); if (state.failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred227_Java14055); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred227_Java14057);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 3 :
                        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:987:21: IDENT arguments
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred227_Java14107); if (state.failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred227_Java14109);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:989:17: THIS
                {
                match(input,THIS,FOLLOW_THIS_in_synpred227_Java14184); if (state.failed) return ;

                }
                break;
            case 4 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:990:17: Super= SUPER arguments
                {
                Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred227_Java14250); if (state.failed) return ;
                pushFollow(FOLLOW_arguments_in_synpred227_Java14252);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 5 :
                // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:991:17: innerNewExpression
                {
                pushFollow(FOLLOW_innerNewExpression_in_synpred227_Java14300);
                innerNewExpression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred227_Java

    // $ANTLR start synpred235_Java
    public final void synpred235_Java_fragment() throws RecognitionException {   
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:37: ( LBRACK expression RBRACK )
        // D:\\work\\CESTA\\trunk\\src\\org\\cesta\\grammars\\java\\Java.g:1016:37: LBRACK expression RBRACK
        {
        match(input,LBRACK,FOLLOW_LBRACK_in_synpred235_Java14701); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred235_Java14704);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACK,FOLLOW_RBRACK_in_synpred235_Java14706); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_Java

    // Delegated rules

    public final boolean synpred43_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA36 dfa36 = new DFA36(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA151 dfa151 = new DFA151(this);
    static final String DFA36_eotS =
        "\27\uffff";
    static final String DFA36_eofS =
        "\27\uffff";
    static final String DFA36_minS =
        "\1\7\1\uffff\14\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00a4\1\uffff\14\0\11\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\14\uffff\1\3\3\uffff\1\4\2\uffff\1\5\1\2";
    static final String DFA36_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\15\17\uffff\1\1\1\uffff\1\16\22\uffff\1\25\10\uffff\1\6"+
            "\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\22\3\uffff\1\16\1"+
            "\uffff\1\22\2\uffff\1\14\1\uffff\1\16\4\uffff\1\22\1\uffff\2"+
            "\16\1\7\3\uffff\1\5\1\4\1\3\1\uffff\1\16\1\2\1\13\2\uffff\1"+
            "\10\3\uffff\1\11\2\uffff\1\16\1\12\75\uffff\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "396:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Java()) ) {s = 22;}

                        else if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_Java()) ) {s = 14;}

                        else if ( (synpred44_Java()) ) {s = 18;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\25\uffff";
    static final String DFA43_eofS =
        "\25\uffff";
    static final String DFA43_minS =
        "\1\7\14\0\10\uffff";
    static final String DFA43_maxS =
        "\1\u00a4\14\0\10\uffff";
    static final String DFA43_acceptS =
        "\15\uffff\1\1\3\uffff\1\2\2\uffff\1\3";
    static final String DFA43_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10"+
        "\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\14\21\uffff\1\15\22\uffff\1\24\10\uffff\1\5\1\uffff\1\15"+
            "\1\uffff\1\15\2\uffff\1\15\1\21\3\uffff\1\15\1\uffff\1\21\2"+
            "\uffff\1\13\1\uffff\1\15\4\uffff\1\21\1\uffff\2\15\1\6\3\uffff"+
            "\1\3\1\2\1\1\1\uffff\1\15\1\4\1\12\2\uffff\1\7\3\uffff\1\10"+
            "\2\uffff\1\15\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "415:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_2 = input.LA(1);

                         
                        int index43_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA43_3 = input.LA(1);

                         
                        int index43_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA43_4 = input.LA(1);

                         
                        int index43_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA43_5 = input.LA(1);

                         
                        int index43_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA43_6 = input.LA(1);

                         
                        int index43_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA43_7 = input.LA(1);

                         
                        int index43_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 13;}

                        else if ( (synpred52_Java()) ) {s = 17;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\14\uffff";
    static final String DFA54_eofS =
        "\14\uffff";
    static final String DFA54_minS =
        "\1\7\13\uffff";
    static final String DFA54_maxS =
        "\1\146\13\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String DFA54_specialS =
        "\14\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\13\55\uffff\1\5\20\uffff\1\13\12\uffff\1\6\3\uffff\1\3\1"+
            "\2\1\1\2\uffff\1\4\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "484:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );";
        }
    }
    static final String DFA86_eotS =
        "\22\uffff";
    static final String DFA86_eofS =
        "\22\uffff";
    static final String DFA86_minS =
        "\1\7\14\0\5\uffff";
    static final String DFA86_maxS =
        "\1\u00a4\14\0\5\uffff";
    static final String DFA86_acceptS =
        "\15\uffff\1\1\1\uffff\1\2\2\uffff";
    static final String DFA86_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\5"+
        "\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\14\55\uffff\1\5\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1"+
            "\17\3\uffff\1\15\1\uffff\1\17\2\uffff\1\13\1\uffff\1\15\4\uffff"+
            "\1\17\1\uffff\2\15\1\6\3\uffff\1\3\1\2\1\1\1\uffff\1\15\1\4"+
            "\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "670:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_2 = input.LA(1);

                         
                        int index86_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA86_3 = input.LA(1);

                         
                        int index86_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA86_4 = input.LA(1);

                         
                        int index86_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA86_5 = input.LA(1);

                         
                        int index86_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA86_6 = input.LA(1);

                         
                        int index86_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA86_7 = input.LA(1);

                         
                        int index86_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA86_9 = input.LA(1);

                         
                        int index86_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA86_10 = input.LA(1);

                         
                        int index86_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA86_11 = input.LA(1);

                         
                        int index86_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA86_12 = input.LA(1);

                         
                        int index86_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index86_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\55\uffff";
    static final String DFA88_eofS =
        "\55\uffff";
    static final String DFA88_minS =
        "\1\7\4\0\6\uffff\1\0\41\uffff";
    static final String DFA88_maxS =
        "\1\u00aa\4\0\6\uffff\1\0\41\uffff";
    static final String DFA88_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\31\uffff\1\1";
    static final String DFA88_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\41\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\2\4\uffff\1\22\10\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1"+
            "\uffff\1\22\1\uffff\2\22\3\uffff\1\22\3\uffff\1\22\5\uffff\1"+
            "\22\10\uffff\1\5\1\22\1\3\1\22\1\3\2\uffff\1\3\1\5\1\22\1\uffff"+
            "\1\22\1\3\1\uffff\1\5\1\uffff\1\22\1\1\1\uffff\1\3\2\22\2\uffff"+
            "\1\5\1\uffff\2\3\1\5\2\22\1\uffff\3\5\1\22\1\3\2\5\2\22\1\13"+
            "\2\22\1\uffff\1\5\3\22\1\5\1\22\74\uffff\1\4\6\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "691:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_Java()) ) {s = 44;}

                        else if ( (synpred117_Java()) ) {s = 5;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_Java()) ) {s = 44;}

                        else if ( (synpred117_Java()) ) {s = 5;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA88_3 = input.LA(1);

                         
                        int index88_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index88_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA88_4 = input.LA(1);

                         
                        int index88_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index88_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA88_11 = input.LA(1);

                         
                        int index88_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index88_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA97_eotS =
        "\22\uffff";
    static final String DFA97_eofS =
        "\22\uffff";
    static final String DFA97_minS =
        "\1\14\15\uffff\1\4\3\uffff";
    static final String DFA97_maxS =
        "\1\u00aa\15\uffff\1\114\3\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\uffff\1\17\1\20\1\16";
    static final String DFA97_specialS =
        "\22\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\17\10\uffff\1\17\1\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\3\uffff\1\17\3\uffff\1\17\5\uffff\1\20\11\uffff"+
            "\1\2\1\17\1\14\1\17\2\uffff\1\17\1\uffff\1\15\1\uffff\1\6\1"+
            "\17\3\uffff\1\17\2\uffff\1\17\1\4\1\3\4\uffff\2\17\1\uffff\2"+
            "\17\4\uffff\1\12\1\17\2\uffff\1\17\1\10\1\11\1\17\1\13\2\uffff"+
            "\1\17\1\7\1\17\1\uffff\1\5\74\uffff\1\16\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\17\1\uffff\2\17\1\21\1\uffff\4\17\2\uffff\5\17\1\uffff"+
            "\3\17\1\uffff\6\17\1\uffff\6\17\3\uffff\11\17\27\uffff\1\17",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "703:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );";
        }
    }
    static final String DFA91_eotS =
        "\24\uffff";
    static final String DFA91_eofS =
        "\24\uffff";
    static final String DFA91_minS =
        "\1\7\4\0\17\uffff";
    static final String DFA91_maxS =
        "\1\u00aa\4\0\17\uffff";
    static final String DFA91_acceptS =
        "\5\uffff\1\1\15\uffff\1\2";
    static final String DFA91_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\17\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\2\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\5\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "714:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_2 = input.LA(1);

                         
                        int index91_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index91_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_3 = input.LA(1);

                         
                        int index91_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index91_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_4 = input.LA(1);

                         
                        int index91_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index91_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\23\uffff";
    static final String DFA104_eofS =
        "\23\uffff";
    static final String DFA104_minS =
        "\1\7\2\uffff\2\0\16\uffff";
    static final String DFA104_maxS =
        "\1\u00aa\2\uffff\2\0\16\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\14\uffff\1\3";
    static final String DFA104_specialS =
        "\3\uffff\1\0\1\1\16\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\1\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\22\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "771:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_Java()) ) {s = 1;}

                        else if ( (synpred148_Java()) ) {s = 5;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA104_4 = input.LA(1);

                         
                        int index104_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_Java()) ) {s = 1;}

                        else if ( (synpred148_Java()) ) {s = 5;}

                         
                        input.seek(index104_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\15\uffff";
    static final String DFA108_eofS =
        "\15\uffff";
    static final String DFA108_minS =
        "\1\5\14\uffff";
    static final String DFA108_maxS =
        "\1\64\14\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA108_specialS =
        "\15\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\6\1\1\2\uffff\1\14\4\uffff\1\5\20\uffff\1\3\1\uffff\1\11"+
            "\3\uffff\1\7\1\uffff\1\2\6\uffff\1\12\1\uffff\1\13\1\uffff\1"+
            "\4\1\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "805:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )";
        }
    }
    static final String DFA128_eotS =
        "\15\uffff";
    static final String DFA128_eofS =
        "\15\uffff";
    static final String DFA128_minS =
        "\1\31\2\uffff\1\0\11\uffff";
    static final String DFA128_maxS =
        "\1\u00aa\2\uffff\1\0\11\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\7\uffff\1\3";
    static final String DFA128_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\4\1\uffff\1\2\1\uffff\1\3\4\uffff\1\1\24\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\3\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\2\4\1\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\76\uffff\7\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "906:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\14\uffff";
    static final String DFA140_eofS =
        "\14\uffff";
    static final String DFA140_minS =
        "\1\31\6\uffff\1\17\4\uffff";
    static final String DFA140_maxS =
        "\1\u00aa\6\uffff\1\35\4\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\1\12\1\10\1\7";
    static final String DFA140_specialS =
        "\14\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\5\3\uffff\1\1\31\uffff\1\10\1\uffff\1\10\2\uffff\1\10\4"+
            "\uffff\1\10\3\uffff\1\2\2\uffff\1\10\6\uffff\2\10\1\uffff\1"+
            "\3\1\2\5\uffff\1\10\2\uffff\1\7\2\uffff\1\6\3\uffff\1\2\1\uffff"+
            "\1\11\76\uffff\1\4\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\15\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "941:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );";
        }
    }
    static final String DFA144_eotS =
        "\60\uffff";
    static final String DFA144_eofS =
        "\1\4\57\uffff";
    static final String DFA144_minS =
        "\1\4\1\0\1\uffff\1\0\54\uffff";
    static final String DFA144_maxS =
        "\1\114\1\0\1\uffff\1\0\54\uffff";
    static final String DFA144_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\51\uffff\1\1\1\3";
    static final String DFA144_specialS =
        "\1\uffff\1\0\1\uffff\1\1\54\uffff}>";
    static final String[] DFA144_transitionS = {
            "\3\4\1\uffff\7\4\1\3\2\uffff\4\4\1\1\1\uffff\3\4\1\uffff\1"+
            "\4\1\2\4\4\1\uffff\22\4\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "977:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 47;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\56\uffff";
    static final String DFA151_eofS =
        "\1\2\55\uffff";
    static final String DFA151_minS =
        "\1\4\1\0\54\uffff";
    static final String DFA151_maxS =
        "\1\114\1\0\54\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA151_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA151_transitionS = {
            "\3\2\1\uffff\10\2\2\uffff\4\2\1\1\1\uffff\3\2\1\uffff\1\2\1"+
            "\uffff\4\2\1\uffff\22\2\27\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 1016:36: ( LBRACK expression RBRACK )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_1 = input.LA(1);

                         
                        int index151_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_Java()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_compilationUnit_in_javaSource4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit4540 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit4551 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit4563 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit4575 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls4595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration4625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration4628 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration4656 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration4659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration4662 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration4664 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration4691 = new BitSet(new long[]{0x2020000000000080L,0x000000444CE22048L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration4751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration4786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration4788 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration4790 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration4793 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration4796 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause4852 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause4898 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause4944 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList4991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList4993 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList4996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList4998 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter5165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound5213 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5215 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound5218 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5220 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration5261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration5263 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration5265 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody5315 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody5317 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations5356 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations5359 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations5384 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5386 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5425 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants5428 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5431 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant5456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant5458 = new BitSet(new long[]{0x0000000022800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_arguments_in_enumConstant5461 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_enumConstant5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration5489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration5491 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5493 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5496 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration5499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5549 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList5552 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_typeList5555 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody5580 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody5582 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody5585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody5627 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody5629 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody5632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations5699 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations5724 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations5738 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5759 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5761 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5763 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5766 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5838 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5840 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5842 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5909 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5911 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5913 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations5982 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6071 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6085 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6108 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6110 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6113 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations6174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6176 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6178 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6180 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6248 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6325 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList6328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6330 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator6369 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator6372 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator6374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6419 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList6422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6424 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6463 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator6465 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator6467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId6509 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator6561 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList6597 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer6642 = new BitSet(new long[]{0x128004446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6645 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6648 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6650 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6654 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer6659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause6697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause6699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList6736 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier6777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier6787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier6807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier6837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier6847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier6857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier6877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList6896 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier6947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type6976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType6996 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7045 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7087 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7129 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7132 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7134 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7174 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified7177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7179 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent7219 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified7242 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList7354 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7356 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList7359 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7361 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument7413 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType7457 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType7466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7485 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7487 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified7490 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7492 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified7538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified7548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7571 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList7574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7577 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7602 = new BitSet(new long[]{0x12A0080000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7630 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7633 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7635 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7640 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7642 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7699 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl7799 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl7801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl7847 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl7849 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl7853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier7901 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier7944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier7948 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList8001 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_AT_in_annotation8039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8042 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8068 = new BitSet(new long[]{0x12A000446AA01080L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8070 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8109 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8114 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer8185 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer8188 = new BitSet(new long[]{0x12A000446AA01080L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer8191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue8214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression8257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8297 = new BitSet(new long[]{0x12A004446AA01880L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8300 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8303 = new BitSet(new long[]{0x12A000446AA01080L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8305 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8312 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration8359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration8361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration8363 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration8365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody8408 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody8410 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations8455 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations8457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations8471 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations8473 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations8475 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8477 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8522 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations8569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue8592 = new BitSet(new long[]{0x12A000446AA01080L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block8616 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_block8618 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_RCURLY_in_block8621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement8659 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement8661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement8672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration8705 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement8772 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8776 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement8791 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8795 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement8797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement8860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement8949 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement8951 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement8955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement8970 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement8974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement9140 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement9142 = new BitSet(new long[]{0x12A010446AA01080L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_forInit_in_statement9157 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9159 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_statement9161 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9163 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_statement9165 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9167 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement9204 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_statement9206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9208 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9210 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9212 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9214 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement9331 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9333 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement9384 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9386 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement9388 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9390 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement9433 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9435 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement9438 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement9440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement9445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement9488 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9490 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement9492 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement9494 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement9496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement9522 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9524 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement9572 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9574 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement9641 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9643 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement9710 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9712 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement9785 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9787 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement9857 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9859 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement9928 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement9941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches9980 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause10022 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause10025 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause10028 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause10030 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause10052 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause10054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchLabels_in_switchBlockLabels10086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchLabel_in_switchLabels10106 = new BitSet(new long[]{0x8400000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchLabel10119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchLabel10126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10142 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel10166 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel10169 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel10171 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel10174 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel10198 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel10201 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel10204 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition10338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression10420 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression10422 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression10424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10465 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10468 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10471 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression10528 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression10547 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression10566 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression10585 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression10604 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression10623 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression10642 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression10661 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression10680 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression10699 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10718 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10737 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10756 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression10803 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression10806 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression10809 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression10811 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10835 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression10838 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10841 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10862 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression10865 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10868 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10889 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression10892 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10895 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10916 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression10919 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10922 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10943 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_andExpression10946 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10949 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression10970 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression10989 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression11008 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11038 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression11071 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11095 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression11114 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11133 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression11152 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression11171 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11200 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11234 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11252 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression11271 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression11290 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11319 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11349 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression11367 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression11386 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11415 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11445 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression11464 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression11483 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression11502 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11531 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression11565 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression11594 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression11622 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression11648 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus11693 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11742 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11783 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus11785 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11787 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus11824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression11860 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression11922 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12054 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12133 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression12207 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12270 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12272 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12325 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12331 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12398 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression12469 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression12526 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression12528 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression12530 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression12591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression12615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression12663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression12673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression12683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression12693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12703 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12718 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression12796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12798 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12867 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12924 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12991 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13124 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13182 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13186 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression13352 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression13411 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13474 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression13536 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13538 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13620 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13690 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13758 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13891 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13972 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression13997 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14049 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14055 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14107 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression14184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14250 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression14300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression14376 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression14392 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression14438 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14441 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression14524 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_newExpression14526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression14625 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression14630 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression14632 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression14634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14680 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction14682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14692 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14695 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14697 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14701 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14704 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14706 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14731 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expressionList_in_arguments14733 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred14_Java5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred15_Java5127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred16_Java5137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred17_Java5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred32_Java5699 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred32_Java5701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred42_Java5738 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred42_Java5757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred42_Java5759 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred42_Java5761 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred42_Java5763 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred42_Java5766 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred42_Java5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred42_Java5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred42_Java5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred42_Java5838 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred42_Java5840 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred42_Java5842 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred42_Java5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred42_Java5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred42_Java5909 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred42_Java5911 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred42_Java5913 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred42_Java5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred43_Java5724 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred43_Java5738 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred43_Java5757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred43_Java5759 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred43_Java5761 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred43_Java5763 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred43_Java5766 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred43_Java5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred43_Java5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred43_Java5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred43_Java5838 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred43_Java5840 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred43_Java5842 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred43_Java5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred43_Java5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred43_Java5909 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred43_Java5911 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred43_Java5913 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred43_Java5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred43_Java5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred43_Java5982 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred43_Java5984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred44_Java6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred50_Java6085 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred50_Java6104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred50_Java6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred50_Java6108 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred50_Java6110 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred50_Java6113 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred50_Java6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred50_Java6174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred50_Java6176 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred50_Java6178 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred50_Java6180 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred50_Java6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred51_Java6071 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred51_Java6085 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred51_Java6104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred51_Java6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred51_Java6108 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred51_Java6110 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred51_Java6113 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred51_Java6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred51_Java6174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred51_Java6176 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred51_Java6178 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred51_Java6180 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred51_Java6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred51_Java6246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred51_Java6248 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred51_Java6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred52_Java6295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred58_Java6597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred76_Java6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred77_Java7047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred79_Java7132 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred79_Java7134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred90_Java7359 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred90_Java7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred92_Java7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred97_Java7633 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred97_Java7635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred99_Java7630 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred99_Java7633 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred99_Java7635 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred99_Java7640 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred99_Java7642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred100_Java7699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred101_Java7944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred101_Java7948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred102_Java8001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred114_Java8455 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred114_Java8457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred114_Java8471 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred114_Java8473 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred114_Java8475 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred114_Java8477 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_Java8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred114_Java8522 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_Java8524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred116_Java8659 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred116_Java8661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred117_Java8672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred121_Java8970 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred121_Java8974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred123_Java9157 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred123_Java9159 = new BitSet(new long[]{0x128010446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_synpred123_Java9161 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred123_Java9163 = new BitSet(new long[]{0x128008446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred123_Java9165 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred123_Java9167 = new BitSet(new long[]{0x73E010446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred123_Java9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred147_Java10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred148_Java10250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred191_Java11783 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred191_Java11785 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred191_Java11787 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred191_Java11789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred219_Java13690 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred219_Java13758 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred219_Java13760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred227_Java13891 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred227_Java13909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred227_Java13972 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred227_Java13997 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred227_Java13999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred227_Java14049 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred227_Java14053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred227_Java14055 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred227_Java14057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred227_Java14107 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred227_Java14109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred227_Java14184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred227_Java14250 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred227_Java14252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred227_Java14300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred235_Java14701 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_synpred235_Java14704 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred235_Java14706 = new BitSet(new long[]{0x0000000000000002L});

}